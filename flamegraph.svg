<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="981.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="9838"><g><title>perf (5 samples, 0.05%)</title><rect x="0.0000%" y="933" width="0.0508%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="917" width="0.0508%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="901" width="0.0508%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="885" width="0.0508%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="869" width="0.0508%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="853" width="0.0508%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="837" width="0.0508%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="821" width="0.0508%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="805" width="0.0508%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="789" width="0.0508%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="773" width="0.0508%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="757" width="0.0508%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="741" width="0.0508%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="725" width="0.0508%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="709" width="0.0508%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0102%" y="693" width="0.0407%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="4"/><text x="0.2602%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0102%" y="677" width="0.0407%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="4"/><text x="0.2602%" y="687.50"></text></g><g><title>_int_free (20 samples, 0.20%)</title><rect x="0.0508%" y="901" width="0.2033%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="20"/><text x="0.3008%" y="911.50"></text></g><g><title>_int_malloc (8 samples, 0.08%)</title><rect x="0.2541%" y="901" width="0.0813%" height="15" fill="rgb(221,200,47)" fg:x="25" fg:w="8"/><text x="0.5041%" y="911.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_fwd::WHITESPACE_ANCHORED_FWD as core::ops::deref::Deref&gt;::deref::__stability::LAZY (35 samples, 0.36%)</title><rect x="0.0508%" y="917" width="0.3558%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="35"/><text x="0.3008%" y="927.50"></text></g><g><title>regex_automata::dfa::DFA::rfind_at (7 samples, 0.07%)</title><rect x="0.3354%" y="901" width="0.0712%" height="15" fill="rgb(249,33,26)" fg:x="33" fg:w="7"/><text x="0.5854%" y="911.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.03%)</title><rect x="0.4066%" y="901" width="0.0305%" height="15" fill="rgb(235,183,28)" fg:x="40" fg:w="3"/><text x="0.6566%" y="911.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.03%)</title><rect x="0.4066%" y="885" width="0.0305%" height="15" fill="rgb(221,5,38)" fg:x="40" fg:w="3"/><text x="0.6566%" y="895.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.03%)</title><rect x="0.4066%" y="869" width="0.0305%" height="15" fill="rgb(247,18,42)" fg:x="40" fg:w="3"/><text x="0.6566%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.06%)</title><rect x="0.4066%" y="917" width="0.0610%" height="15" fill="rgb(241,131,45)" fg:x="40" fg:w="6"/><text x="0.6566%" y="927.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.03%)</title><rect x="0.4371%" y="901" width="0.0305%" height="15" fill="rgb(249,31,29)" fg:x="43" fg:w="3"/><text x="0.6871%" y="911.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.03%)</title><rect x="0.4371%" y="885" width="0.0305%" height="15" fill="rgb(225,111,53)" fg:x="43" fg:w="3"/><text x="0.6871%" y="895.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.03%)</title><rect x="0.4371%" y="869" width="0.0305%" height="15" fill="rgb(238,160,17)" fg:x="43" fg:w="3"/><text x="0.6871%" y="879.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::SubAssign&gt;::sub_assign (2 samples, 0.02%)</title><rect x="0.4676%" y="901" width="0.0203%" height="15" fill="rgb(214,148,48)" fg:x="46" fg:w="2"/><text x="0.7176%" y="911.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::str::traits::FromStr&gt;::from_str (1 samples, 0.01%)</title><rect x="0.4879%" y="901" width="0.0102%" height="15" fill="rgb(232,36,49)" fg:x="48" fg:w="1"/><text x="0.7379%" y="911.50"></text></g><g><title>__GI___libc_free (14 samples, 0.14%)</title><rect x="0.4981%" y="901" width="0.1423%" height="15" fill="rgb(209,103,24)" fg:x="49" fg:w="14"/><text x="0.7481%" y="911.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="0.6404%" y="901" width="0.0305%" height="15" fill="rgb(229,88,8)" fg:x="63" fg:w="3"/><text x="0.8904%" y="911.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="0.6709%" y="901" width="0.0203%" height="15" fill="rgb(213,181,19)" fg:x="66" fg:w="2"/><text x="0.9209%" y="911.50"></text></g><g><title>__rdl_realloc (3 samples, 0.03%)</title><rect x="0.6912%" y="901" width="0.0305%" height="15" fill="rgb(254,191,54)" fg:x="68" fg:w="3"/><text x="0.9412%" y="911.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.03%)</title><rect x="0.6912%" y="885" width="0.0305%" height="15" fill="rgb(241,83,37)" fg:x="68" fg:w="3"/><text x="0.9412%" y="895.50"></text></g><g><title>_int_free (24 samples, 0.24%)</title><rect x="0.7217%" y="901" width="0.2440%" height="15" fill="rgb(233,36,39)" fg:x="71" fg:w="24"/><text x="0.9717%" y="911.50"></text></g><g><title>_int_malloc (15 samples, 0.15%)</title><rect x="0.9656%" y="901" width="0.1525%" height="15" fill="rgb(226,3,54)" fg:x="95" fg:w="15"/><text x="1.2156%" y="911.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="1.1181%" y="901" width="0.0203%" height="15" fill="rgb(245,192,40)" fg:x="110" fg:w="2"/><text x="1.3681%" y="911.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (14 samples, 0.14%)</title><rect x="1.1384%" y="901" width="0.1423%" height="15" fill="rgb(238,167,29)" fg:x="112" fg:w="14"/><text x="1.3884%" y="911.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_rev (1 samples, 0.01%)</title><rect x="1.2807%" y="901" width="0.0102%" height="15" fill="rgb(232,182,51)" fg:x="126" fg:w="1"/><text x="1.5307%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,resolution::account::Account)&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="901" width="0.0305%" height="15" fill="rgb(231,60,39)" fg:x="127" fg:w="3"/><text x="1.5409%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;resolution::account::Account&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="885" width="0.0305%" height="15" fill="rgb(208,69,12)" fg:x="127" fg:w="3"/><text x="1.5409%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="869" width="0.0305%" height="15" fill="rgb(235,93,37)" fg:x="127" fg:w="3"/><text x="1.5409%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="853" width="0.0305%" height="15" fill="rgb(213,116,39)" fg:x="127" fg:w="3"/><text x="1.5409%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;)&gt;&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="837" width="0.0305%" height="15" fill="rgb(222,207,29)" fg:x="127" fg:w="3"/><text x="1.5409%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="1.2909%" y="821" width="0.0305%" height="15" fill="rgb(206,96,30)" fg:x="127" fg:w="3"/><text x="1.5409%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (3 samples, 0.03%)</title><rect x="1.2909%" y="805" width="0.0305%" height="15" fill="rgb(218,138,4)" fg:x="127" fg:w="3"/><text x="1.5409%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.03%)</title><rect x="1.2909%" y="789" width="0.0305%" height="15" fill="rgb(250,191,14)" fg:x="127" fg:w="3"/><text x="1.5409%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3 samples, 0.03%)</title><rect x="1.2909%" y="773" width="0.0305%" height="15" fill="rgb(239,60,40)" fg:x="127" fg:w="3"/><text x="1.5409%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;)&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="757" width="0.0305%" height="15" fill="rgb(206,27,48)" fg:x="127" fg:w="3"/><text x="1.5409%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="741" width="0.0305%" height="15" fill="rgb(225,35,8)" fg:x="127" fg:w="3"/><text x="1.5409%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;resolution::transaction::Transaction&gt;&gt; (3 samples, 0.03%)</title><rect x="1.2909%" y="725" width="0.0305%" height="15" fill="rgb(250,213,24)" fg:x="127" fg:w="3"/><text x="1.5409%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="1.2909%" y="709" width="0.0305%" height="15" fill="rgb(247,123,22)" fg:x="127" fg:w="3"/><text x="1.5409%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="1.2909%" y="693" width="0.0305%" height="15" fill="rgb(231,138,38)" fg:x="127" fg:w="3"/><text x="1.5409%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="1.2909%" y="677" width="0.0305%" height="15" fill="rgb(231,145,46)" fg:x="127" fg:w="3"/><text x="1.5409%" y="687.50"></text></g><g><title>csv_core::reader::Reader::read_record (6 samples, 0.06%)</title><rect x="1.3214%" y="901" width="0.0610%" height="15" fill="rgb(251,118,11)" fg:x="130" fg:w="6"/><text x="1.5714%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="1.3824%" y="901" width="0.0203%" height="15" fill="rgb(217,147,25)" fg:x="136" fg:w="2"/><text x="1.6324%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="1.3824%" y="885" width="0.0203%" height="15" fill="rgb(247,81,37)" fg:x="136" fg:w="2"/><text x="1.6324%" y="895.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.02%)</title><rect x="1.3824%" y="869" width="0.0203%" height="15" fill="rgb(209,12,38)" fg:x="136" fg:w="2"/><text x="1.6324%" y="879.50"></text></g><g><title>[[heap]] (94 samples, 0.96%)</title><rect x="0.4676%" y="917" width="0.9555%" height="15" fill="rgb(227,1,9)" fg:x="46" fg:w="94"/><text x="0.7176%" y="927.50"></text></g><g><title>rust_decimal::str::parse_str_radix_10 (2 samples, 0.02%)</title><rect x="1.4027%" y="901" width="0.0203%" height="15" fill="rgb(248,47,43)" fg:x="138" fg:w="2"/><text x="1.6527%" y="911.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (7 samples, 0.07%)</title><rect x="1.4231%" y="901" width="0.0712%" height="15" fill="rgb(221,10,30)" fg:x="140" fg:w="7"/><text x="1.6731%" y="911.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (4 samples, 0.04%)</title><rect x="1.4535%" y="885" width="0.0407%" height="15" fill="rgb(210,229,1)" fg:x="143" fg:w="4"/><text x="1.7035%" y="895.50"></text></g><g><title>rust_decimal::serde::&lt;impl serde::de::Deserialize for rust_decimal::decimal::Decimal&gt;::deserialize (4 samples, 0.04%)</title><rect x="1.4535%" y="869" width="0.0407%" height="15" fill="rgb(222,148,37)" fg:x="143" fg:w="4"/><text x="1.7035%" y="879.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.01%)</title><rect x="1.4942%" y="901" width="0.0102%" height="15" fill="rgb(234,67,33)" fg:x="147" fg:w="1"/><text x="1.7442%" y="911.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (2 samples, 0.02%)</title><rect x="1.5044%" y="901" width="0.0203%" height="15" fill="rgb(247,98,35)" fg:x="148" fg:w="2"/><text x="1.7544%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="1.5145%" y="885" width="0.0102%" height="15" fill="rgb(247,138,52)" fg:x="149" fg:w="1"/><text x="1.7645%" y="895.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.01%)</title><rect x="1.5145%" y="869" width="0.0102%" height="15" fill="rgb(213,79,30)" fg:x="149" fg:w="1"/><text x="1.7645%" y="879.50"></text></g><g><title>&lt;serde::de::value::StrDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.01%)</title><rect x="1.5145%" y="853" width="0.0102%" height="15" fill="rgb(246,177,23)" fg:x="149" fg:w="1"/><text x="1.7645%" y="863.50"></text></g><g><title>&lt;serde::de::value::StrDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.01%)</title><rect x="1.5145%" y="837" width="0.0102%" height="15" fill="rgb(230,62,27)" fg:x="149" fg:w="1"/><text x="1.7645%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.02%)</title><rect x="1.5247%" y="901" width="0.0203%" height="15" fill="rgb(216,154,8)" fg:x="150" fg:w="2"/><text x="1.7747%" y="911.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.02%)</title><rect x="1.5450%" y="901" width="0.0203%" height="15" fill="rgb(244,35,45)" fg:x="152" fg:w="2"/><text x="1.7950%" y="911.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (2 samples, 0.02%)</title><rect x="1.5654%" y="901" width="0.0203%" height="15" fill="rgb(251,115,12)" fg:x="154" fg:w="2"/><text x="1.8154%" y="911.50"></text></g><g><title>serde::de::EnumAccess::variant (2 samples, 0.02%)</title><rect x="1.5654%" y="885" width="0.0203%" height="15" fill="rgb(240,54,50)" fg:x="154" fg:w="2"/><text x="1.8154%" y="895.50"></text></g><g><title>&lt;rust_decimal::serde::DecimalVisitor as serde::de::Visitor&gt;::visit_str (8 samples, 0.08%)</title><rect x="1.5857%" y="901" width="0.0813%" height="15" fill="rgb(233,84,52)" fg:x="156" fg:w="8"/><text x="1.8357%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.05%)</title><rect x="1.6670%" y="901" width="0.0508%" height="15" fill="rgb(207,117,47)" fg:x="164" fg:w="5"/><text x="1.9170%" y="911.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="1.7178%" y="901" width="0.0203%" height="15" fill="rgb(249,43,39)" fg:x="169" fg:w="2"/><text x="1.9678%" y="911.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.01%)</title><rect x="1.7280%" y="885" width="0.0102%" height="15" fill="rgb(209,38,44)" fg:x="170" fg:w="1"/><text x="1.9780%" y="895.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.01%)</title><rect x="1.7280%" y="869" width="0.0102%" height="15" fill="rgb(236,212,23)" fg:x="170" fg:w="1"/><text x="1.9780%" y="879.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.06%)</title><rect x="1.7382%" y="901" width="0.0610%" height="15" fill="rgb(242,79,21)" fg:x="171" fg:w="6"/><text x="1.9882%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="1.7991%" y="901" width="0.0305%" height="15" fill="rgb(211,96,35)" fg:x="177" fg:w="3"/><text x="2.0491%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.03%)</title><rect x="1.7991%" y="885" width="0.0305%" height="15" fill="rgb(253,215,40)" fg:x="177" fg:w="3"/><text x="2.0491%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="1.7991%" y="869" width="0.0305%" height="15" fill="rgb(211,81,21)" fg:x="177" fg:w="3"/><text x="2.0491%" y="879.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (3 samples, 0.03%)</title><rect x="1.8296%" y="901" width="0.0305%" height="15" fill="rgb(208,190,38)" fg:x="180" fg:w="3"/><text x="2.0796%" y="911.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (2 samples, 0.02%)</title><rect x="1.8601%" y="901" width="0.0203%" height="15" fill="rgb(235,213,38)" fg:x="183" fg:w="2"/><text x="2.1101%" y="911.50"></text></g><g><title>[[stack]] (49 samples, 0.50%)</title><rect x="1.4231%" y="917" width="0.4981%" height="15" fill="rgb(237,122,38)" fg:x="140" fg:w="49"/><text x="1.6731%" y="927.50"></text></g><g><title>csv::string_record::StringRecord::trim (4 samples, 0.04%)</title><rect x="1.8805%" y="901" width="0.0407%" height="15" fill="rgb(244,218,35)" fg:x="185" fg:w="4"/><text x="2.1305%" y="911.50"></text></g><g><title>[anon] (1 samples, 0.01%)</title><rect x="1.9211%" y="917" width="0.0102%" height="15" fill="rgb(240,68,47)" fg:x="189" fg:w="1"/><text x="2.1711%" y="927.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1.9211%" y="901" width="0.0102%" height="15" fill="rgb(210,16,53)" fg:x="189" fg:w="1"/><text x="2.1711%" y="911.50"></text></g><g><title>__GI___libc_free (14 samples, 0.14%)</title><rect x="1.9313%" y="901" width="0.1423%" height="15" fill="rgb(235,124,12)" fg:x="190" fg:w="14"/><text x="2.1813%" y="911.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="2.0736%" y="901" width="0.0407%" height="15" fill="rgb(224,169,11)" fg:x="204" fg:w="4"/><text x="2.3236%" y="911.50"></text></g><g><title>__libc_calloc (17 samples, 0.17%)</title><rect x="2.1143%" y="901" width="0.1728%" height="15" fill="rgb(250,166,2)" fg:x="208" fg:w="17"/><text x="2.3643%" y="911.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="2.2871%" y="901" width="0.0407%" height="15" fill="rgb(242,216,29)" fg:x="225" fg:w="4"/><text x="2.5371%" y="911.50"></text></g><g><title>__rdl_alloc_zeroed (16 samples, 0.16%)</title><rect x="2.3277%" y="901" width="0.1626%" height="15" fill="rgb(230,116,27)" fg:x="229" fg:w="16"/><text x="2.5777%" y="911.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (16 samples, 0.16%)</title><rect x="2.3277%" y="885" width="0.1626%" height="15" fill="rgb(228,99,48)" fg:x="229" fg:w="16"/><text x="2.5777%" y="895.50"></text></g><g><title>_int_realloc (4 samples, 0.04%)</title><rect x="2.4903%" y="901" width="0.0407%" height="15" fill="rgb(253,11,6)" fg:x="245" fg:w="4"/><text x="2.7403%" y="911.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (14 samples, 0.14%)</title><rect x="2.5310%" y="901" width="0.1423%" height="15" fill="rgb(247,143,39)" fg:x="249" fg:w="14"/><text x="2.7810%" y="911.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_rev (4 samples, 0.04%)</title><rect x="2.6733%" y="901" width="0.0407%" height="15" fill="rgb(236,97,10)" fg:x="263" fg:w="4"/><text x="2.9233%" y="911.50"></text></g><g><title>[libc-2.33.so] (102 samples, 1.04%)</title><rect x="1.9313%" y="917" width="1.0368%" height="15" fill="rgb(233,208,19)" fg:x="190" fg:w="102"/><text x="2.1813%" y="927.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (25 samples, 0.25%)</title><rect x="2.7140%" y="901" width="0.2541%" height="15" fill="rgb(216,164,2)" fg:x="267" fg:w="25"/><text x="2.9640%" y="911.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (4 samples, 0.04%)</title><rect x="4.1675%" y="901" width="0.0407%" height="15" fill="rgb(220,129,5)" fg:x="410" fg:w="4"/><text x="4.4175%" y="911.50"></text></g><g><title>serde::de::MapAccess::next_key (6 samples, 0.06%)</title><rect x="4.3708%" y="869" width="0.0610%" height="15" fill="rgb(242,17,10)" fg:x="430" fg:w="6"/><text x="4.6208%" y="879.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (6 samples, 0.06%)</title><rect x="4.3708%" y="853" width="0.0610%" height="15" fill="rgb(242,107,0)" fg:x="430" fg:w="6"/><text x="4.6208%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.06%)</title><rect x="4.3708%" y="837" width="0.0610%" height="15" fill="rgb(251,28,31)" fg:x="430" fg:w="6"/><text x="4.6208%" y="847.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (6 samples, 0.06%)</title><rect x="4.3708%" y="821" width="0.0610%" height="15" fill="rgb(233,223,10)" fg:x="430" fg:w="6"/><text x="4.6208%" y="831.50"></text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (6 samples, 0.06%)</title><rect x="4.3708%" y="805" width="0.0610%" height="15" fill="rgb(215,21,27)" fg:x="430" fg:w="6"/><text x="4.6208%" y="815.50"></text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.06%)</title><rect x="4.3708%" y="789" width="0.0610%" height="15" fill="rgb(232,23,21)" fg:x="430" fg:w="6"/><text x="4.6208%" y="799.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_bytes (6 samples, 0.06%)</title><rect x="4.3708%" y="773" width="0.0610%" height="15" fill="rgb(244,5,23)" fg:x="430" fg:w="6"/><text x="4.6208%" y="783.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (31 samples, 0.32%)</title><rect x="4.2082%" y="901" width="0.3151%" height="15" fill="rgb(226,81,46)" fg:x="414" fg:w="31"/><text x="4.4582%" y="911.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (15 samples, 0.15%)</title><rect x="4.3708%" y="885" width="0.1525%" height="15" fill="rgb(247,70,30)" fg:x="430" fg:w="15"/><text x="4.6208%" y="895.50"></text></g><g><title>serde::de::MapAccess::next_value (9 samples, 0.09%)</title><rect x="4.4318%" y="869" width="0.0915%" height="15" fill="rgb(212,68,19)" fg:x="436" fg:w="9"/><text x="4.6818%" y="879.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.09%)</title><rect x="4.4318%" y="853" width="0.0915%" height="15" fill="rgb(240,187,13)" fg:x="436" fg:w="9"/><text x="4.6818%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.02%)</title><rect x="4.5029%" y="837" width="0.0203%" height="15" fill="rgb(223,113,26)" fg:x="443" fg:w="2"/><text x="4.7529%" y="847.50"></text></g><g><title>resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize (2 samples, 0.02%)</title><rect x="4.5029%" y="821" width="0.0203%" height="15" fill="rgb(206,192,2)" fg:x="443" fg:w="2"/><text x="4.7529%" y="831.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_enum (2 samples, 0.02%)</title><rect x="4.5029%" y="805" width="0.0203%" height="15" fill="rgb(241,108,4)" fg:x="443" fg:w="2"/><text x="4.7529%" y="815.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (7 samples, 0.07%)</title><rect x="4.5233%" y="901" width="0.0712%" height="15" fill="rgb(247,173,49)" fg:x="445" fg:w="7"/><text x="4.7733%" y="911.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.01%)</title><rect x="4.6351%" y="885" width="0.0102%" height="15" fill="rgb(224,114,35)" fg:x="456" fg:w="1"/><text x="4.8851%" y="895.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.01%)</title><rect x="4.6351%" y="869" width="0.0102%" height="15" fill="rgb(245,159,27)" fg:x="456" fg:w="1"/><text x="4.8851%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1 samples, 0.01%)</title><rect x="4.6351%" y="853" width="0.0102%" height="15" fill="rgb(245,172,44)" fg:x="456" fg:w="1"/><text x="4.8851%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.06%)</title><rect x="4.5944%" y="901" width="0.0610%" height="15" fill="rgb(236,23,11)" fg:x="452" fg:w="6"/><text x="4.8444%" y="911.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.01%)</title><rect x="4.6453%" y="885" width="0.0102%" height="15" fill="rgb(205,117,38)" fg:x="457" fg:w="1"/><text x="4.8953%" y="895.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.01%)</title><rect x="4.6453%" y="869" width="0.0102%" height="15" fill="rgb(237,72,25)" fg:x="457" fg:w="1"/><text x="4.8953%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1 samples, 0.01%)</title><rect x="4.6453%" y="853" width="0.0102%" height="15" fill="rgb(244,70,9)" fg:x="457" fg:w="1"/><text x="4.8953%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="6.9831%" y="773" width="0.0305%" height="15" fill="rgb(217,125,39)" fg:x="687" fg:w="3"/><text x="7.2331%" y="783.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (28 samples, 0.28%)</title><rect x="6.7392%" y="885" width="0.2846%" height="15" fill="rgb(235,36,10)" fg:x="663" fg:w="28"/><text x="6.9892%" y="895.50"></text></g><g><title>csv::string_record::StringRecord::read (26 samples, 0.26%)</title><rect x="6.7595%" y="869" width="0.2643%" height="15" fill="rgb(251,123,47)" fg:x="665" fg:w="26"/><text x="7.0095%" y="879.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (22 samples, 0.22%)</title><rect x="6.8002%" y="853" width="0.2236%" height="15" fill="rgb(221,13,13)" fg:x="669" fg:w="22"/><text x="7.0502%" y="863.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (19 samples, 0.19%)</title><rect x="6.8307%" y="837" width="0.1931%" height="15" fill="rgb(238,131,9)" fg:x="672" fg:w="19"/><text x="7.0807%" y="847.50"></text></g><g><title>csv::byte_record::ByteRecord::expand_fields (4 samples, 0.04%)</title><rect x="6.9831%" y="821" width="0.0407%" height="15" fill="rgb(211,50,8)" fg:x="687" fg:w="4"/><text x="7.2331%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (4 samples, 0.04%)</title><rect x="6.9831%" y="805" width="0.0407%" height="15" fill="rgb(245,182,24)" fg:x="687" fg:w="4"/><text x="7.2331%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 0.04%)</title><rect x="6.9831%" y="789" width="0.0407%" height="15" fill="rgb(242,14,37)" fg:x="687" fg:w="4"/><text x="7.2331%" y="799.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="7.0136%" y="773" width="0.0102%" height="15" fill="rgb(246,228,12)" fg:x="690" fg:w="1"/><text x="7.2636%" y="783.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (234 samples, 2.38%)</title><rect x="4.6554%" y="901" width="2.3785%" height="15" fill="rgb(213,55,15)" fg:x="458" fg:w="234"/><text x="4.9054%" y="911.50">&lt;c..</text></g><g><title>csv::string_record::StringRecord::deserialize (1 samples, 0.01%)</title><rect x="7.0238%" y="885" width="0.0102%" height="15" fill="rgb(209,9,3)" fg:x="691" fg:w="1"/><text x="7.2738%" y="895.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (3 samples, 0.03%)</title><rect x="7.0339%" y="901" width="0.0305%" height="15" fill="rgb(230,59,30)" fg:x="692" fg:w="3"/><text x="7.2839%" y="911.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (5 samples, 0.05%)</title><rect x="7.0644%" y="901" width="0.0508%" height="15" fill="rgb(209,121,21)" fg:x="695" fg:w="5"/><text x="7.3144%" y="911.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (6 samples, 0.06%)</title><rect x="7.1153%" y="901" width="0.0610%" height="15" fill="rgb(220,109,13)" fg:x="700" fg:w="6"/><text x="7.3653%" y="911.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::str::traits::FromStr&gt;::from_str (4 samples, 0.04%)</title><rect x="7.1763%" y="901" width="0.0407%" height="15" fill="rgb(232,18,1)" fg:x="706" fg:w="4"/><text x="7.4263%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="7.2169%" y="901" width="0.0203%" height="15" fill="rgb(215,41,42)" fg:x="710" fg:w="2"/><text x="7.4669%" y="911.50"></text></g><g><title>[resolution] (2 samples, 0.02%)</title><rect x="7.2372%" y="901" width="0.0203%" height="15" fill="rgb(224,123,36)" fg:x="712" fg:w="2"/><text x="7.4872%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="7.2372%" y="885" width="0.0203%" height="15" fill="rgb(240,125,3)" fg:x="712" fg:w="2"/><text x="7.4872%" y="895.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="901" width="0.5489%" height="15" fill="rgb(205,98,50)" fg:x="714" fg:w="54"/><text x="7.5076%" y="911.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="885" width="0.5489%" height="15" fill="rgb(205,185,37)" fg:x="714" fg:w="54"/><text x="7.5076%" y="895.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="869" width="0.5489%" height="15" fill="rgb(238,207,15)" fg:x="714" fg:w="54"/><text x="7.5076%" y="879.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="853" width="0.5489%" height="15" fill="rgb(213,199,42)" fg:x="714" fg:w="54"/><text x="7.5076%" y="863.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="837" width="0.5489%" height="15" fill="rgb(235,201,11)" fg:x="714" fg:w="54"/><text x="7.5076%" y="847.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="821" width="0.5489%" height="15" fill="rgb(207,46,11)" fg:x="714" fg:w="54"/><text x="7.5076%" y="831.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="805" width="0.5489%" height="15" fill="rgb(241,35,35)" fg:x="714" fg:w="54"/><text x="7.5076%" y="815.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="789" width="0.5489%" height="15" fill="rgb(243,32,47)" fg:x="714" fg:w="54"/><text x="7.5076%" y="799.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="773" width="0.5489%" height="15" fill="rgb(247,202,23)" fg:x="714" fg:w="54"/><text x="7.5076%" y="783.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="757" width="0.5489%" height="15" fill="rgb(219,102,11)" fg:x="714" fg:w="54"/><text x="7.5076%" y="767.50"></text></g><g><title>[unknown] (54 samples, 0.55%)</title><rect x="7.2576%" y="741" width="0.5489%" height="15" fill="rgb(243,110,44)" fg:x="714" fg:w="54"/><text x="7.5076%" y="751.50"></text></g><g><title>[unknown] (37 samples, 0.38%)</title><rect x="7.4304%" y="725" width="0.3761%" height="15" fill="rgb(222,74,54)" fg:x="731" fg:w="37"/><text x="7.6804%" y="735.50"></text></g><g><title>[unknown] (29 samples, 0.29%)</title><rect x="7.5117%" y="709" width="0.2948%" height="15" fill="rgb(216,99,12)" fg:x="739" fg:w="29"/><text x="7.7617%" y="719.50"></text></g><g><title>[unknown] (28 samples, 0.28%)</title><rect x="7.5219%" y="693" width="0.2846%" height="15" fill="rgb(226,22,26)" fg:x="740" fg:w="28"/><text x="7.7719%" y="703.50"></text></g><g><title>[unknown] (23 samples, 0.23%)</title><rect x="7.5727%" y="677" width="0.2338%" height="15" fill="rgb(217,163,10)" fg:x="745" fg:w="23"/><text x="7.8227%" y="687.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="7.6235%" y="661" width="0.1830%" height="15" fill="rgb(213,25,53)" fg:x="750" fg:w="18"/><text x="7.8735%" y="671.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="7.7048%" y="645" width="0.1016%" height="15" fill="rgb(252,105,26)" fg:x="758" fg:w="10"/><text x="7.9548%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="7.7455%" y="629" width="0.0610%" height="15" fill="rgb(220,39,43)" fg:x="762" fg:w="6"/><text x="7.9955%" y="639.50"></text></g><g><title>__GI___libc_free (6 samples, 0.06%)</title><rect x="7.8065%" y="901" width="0.0610%" height="15" fill="rgb(229,68,48)" fg:x="768" fg:w="6"/><text x="8.0565%" y="911.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="7.8675%" y="901" width="0.0407%" height="15" fill="rgb(252,8,32)" fg:x="774" fg:w="4"/><text x="8.1175%" y="911.50"></text></g><g><title>__libc_calloc (8 samples, 0.08%)</title><rect x="7.9081%" y="901" width="0.0813%" height="15" fill="rgb(223,20,43)" fg:x="778" fg:w="8"/><text x="8.1581%" y="911.50"></text></g><g><title>__rdl_alloc_zeroed (5 samples, 0.05%)</title><rect x="7.9894%" y="901" width="0.0508%" height="15" fill="rgb(229,81,49)" fg:x="786" fg:w="5"/><text x="8.2394%" y="911.50"></text></g><g><title>_int_free (41 samples, 0.42%)</title><rect x="8.0403%" y="901" width="0.4168%" height="15" fill="rgb(236,28,36)" fg:x="791" fg:w="41"/><text x="8.2903%" y="911.50"></text></g><g><title>_int_malloc (45 samples, 0.46%)</title><rect x="8.4570%" y="901" width="0.4574%" height="15" fill="rgb(249,185,26)" fg:x="832" fg:w="45"/><text x="8.7070%" y="911.50"></text></g><g><title>_int_realloc (8 samples, 0.08%)</title><rect x="8.9144%" y="901" width="0.0813%" height="15" fill="rgb(249,174,33)" fg:x="877" fg:w="8"/><text x="9.1644%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.05%)</title><rect x="8.9957%" y="901" width="0.0508%" height="15" fill="rgb(233,201,37)" fg:x="885" fg:w="5"/><text x="9.2457%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.02%)</title><rect x="9.0262%" y="885" width="0.0203%" height="15" fill="rgb(221,78,26)" fg:x="888" fg:w="2"/><text x="9.2762%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.08%)</title><rect x="9.0466%" y="901" width="0.0813%" height="15" fill="rgb(250,127,30)" fg:x="890" fg:w="8"/><text x="9.2966%" y="911.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (5 samples, 0.05%)</title><rect x="9.1279%" y="901" width="0.0508%" height="15" fill="rgb(230,49,44)" fg:x="898" fg:w="5"/><text x="9.3779%" y="911.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_rev (19 samples, 0.19%)</title><rect x="9.1787%" y="901" width="0.1931%" height="15" fill="rgb(229,67,23)" fg:x="903" fg:w="19"/><text x="9.4287%" y="911.50"></text></g><g><title>regex_automata::dfa::DFA::rfind (3 samples, 0.03%)</title><rect x="9.3413%" y="885" width="0.0305%" height="15" fill="rgb(249,83,47)" fg:x="919" fg:w="3"/><text x="9.5913%" y="895.50"></text></g><g><title>&lt;regex_automata::dense_imp::DenseDFA&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::rfind_at (3 samples, 0.03%)</title><rect x="9.3413%" y="869" width="0.0305%" height="15" fill="rgb(215,43,3)" fg:x="919" fg:w="3"/><text x="9.5913%" y="879.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u16&gt;::from_str (4 samples, 0.04%)</title><rect x="9.3718%" y="901" width="0.0407%" height="15" fill="rgb(238,154,13)" fg:x="922" fg:w="4"/><text x="9.6218%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (8 samples, 0.08%)</title><rect x="9.4125%" y="901" width="0.0813%" height="15" fill="rgb(219,56,2)" fg:x="926" fg:w="8"/><text x="9.6625%" y="911.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (1 samples, 0.01%)</title><rect x="9.4938%" y="901" width="0.0102%" height="15" fill="rgb(233,0,4)" fg:x="934" fg:w="1"/><text x="9.7438%" y="911.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (4 samples, 0.04%)</title><rect x="9.5040%" y="901" width="0.0407%" height="15" fill="rgb(235,30,7)" fg:x="935" fg:w="4"/><text x="9.7540%" y="911.50"></text></g><g><title>alloc::alloc::box_free (2 samples, 0.02%)</title><rect x="9.6056%" y="837" width="0.0203%" height="15" fill="rgb(250,79,13)" fg:x="945" fg:w="2"/><text x="9.8556%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="9.6056%" y="821" width="0.0203%" height="15" fill="rgb(211,146,34)" fg:x="945" fg:w="2"/><text x="9.8556%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="9.6056%" y="805" width="0.0203%" height="15" fill="rgb(228,22,38)" fg:x="945" fg:w="2"/><text x="9.8556%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="9.6259%" y="821" width="0.0305%" height="15" fill="rgb(235,168,5)" fg:x="947" fg:w="3"/><text x="9.8759%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="9.6259%" y="805" width="0.0305%" height="15" fill="rgb(221,155,16)" fg:x="947" fg:w="3"/><text x="9.8759%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="9.6259%" y="789" width="0.0305%" height="15" fill="rgb(215,215,53)" fg:x="947" fg:w="3"/><text x="9.8759%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="9.6259%" y="773" width="0.0305%" height="15" fill="rgb(223,4,10)" fg:x="947" fg:w="3"/><text x="9.8759%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="9.6259%" y="757" width="0.0305%" height="15" fill="rgb(234,103,6)" fg:x="947" fg:w="3"/><text x="9.8759%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::string_record::StringRecord&gt; (7 samples, 0.07%)</title><rect x="9.6056%" y="885" width="0.0712%" height="15" fill="rgb(227,97,0)" fg:x="945" fg:w="7"/><text x="9.8556%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (7 samples, 0.07%)</title><rect x="9.6056%" y="869" width="0.0712%" height="15" fill="rgb(234,150,53)" fg:x="945" fg:w="7"/><text x="9.8556%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (7 samples, 0.07%)</title><rect x="9.6056%" y="853" width="0.0712%" height="15" fill="rgb(228,201,54)" fg:x="945" fg:w="7"/><text x="9.8556%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (5 samples, 0.05%)</title><rect x="9.6259%" y="837" width="0.0508%" height="15" fill="rgb(222,22,37)" fg:x="947" fg:w="5"/><text x="9.8759%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (2 samples, 0.02%)</title><rect x="9.6564%" y="821" width="0.0203%" height="15" fill="rgb(237,53,32)" fg:x="950" fg:w="2"/><text x="9.9064%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.02%)</title><rect x="9.6564%" y="805" width="0.0203%" height="15" fill="rgb(233,25,53)" fg:x="950" fg:w="2"/><text x="9.9064%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.02%)</title><rect x="9.6564%" y="789" width="0.0203%" height="15" fill="rgb(210,40,34)" fg:x="950" fg:w="2"/><text x="9.9064%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="9.6564%" y="773" width="0.0203%" height="15" fill="rgb(241,220,44)" fg:x="950" fg:w="2"/><text x="9.9064%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="9.6564%" y="757" width="0.0203%" height="15" fill="rgb(235,28,35)" fg:x="950" fg:w="2"/><text x="9.9064%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="9.6564%" y="741" width="0.0203%" height="15" fill="rgb(210,56,17)" fg:x="950" fg:w="2"/><text x="9.9064%" y="751.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (2 samples, 0.02%)</title><rect x="9.6768%" y="885" width="0.0203%" height="15" fill="rgb(224,130,29)" fg:x="952" fg:w="2"/><text x="9.9268%" y="895.50"></text></g><g><title>csv::string_record::StringRecord::push_field (5 samples, 0.05%)</title><rect x="9.6971%" y="885" width="0.0508%" height="15" fill="rgb(235,212,8)" fg:x="954" fg:w="5"/><text x="9.9471%" y="895.50"></text></g><g><title>csv::byte_record::ByteRecord::push_field (5 samples, 0.05%)</title><rect x="9.6971%" y="869" width="0.0508%" height="15" fill="rgb(223,33,50)" fg:x="954" fg:w="5"/><text x="9.9471%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5 samples, 0.05%)</title><rect x="9.6971%" y="853" width="0.0508%" height="15" fill="rgb(219,149,13)" fg:x="954" fg:w="5"/><text x="9.9471%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.05%)</title><rect x="9.6971%" y="837" width="0.0508%" height="15" fill="rgb(250,156,29)" fg:x="954" fg:w="5"/><text x="9.9471%" y="847.50"></text></g><g><title>csv::string_record::StringRecord::trim (25 samples, 0.25%)</title><rect x="9.5446%" y="901" width="0.2541%" height="15" fill="rgb(216,193,19)" fg:x="939" fg:w="25"/><text x="9.7946%" y="911.50"></text></g><g><title>csv::string_record::StringRecord::with_capacity (5 samples, 0.05%)</title><rect x="9.7479%" y="885" width="0.0508%" height="15" fill="rgb(216,135,14)" fg:x="959" fg:w="5"/><text x="9.9979%" y="895.50"></text></g><g><title>csv::byte_record::ByteRecord::with_capacity (5 samples, 0.05%)</title><rect x="9.7479%" y="869" width="0.0508%" height="15" fill="rgb(241,47,5)" fg:x="959" fg:w="5"/><text x="9.9979%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.05%)</title><rect x="9.7479%" y="853" width="0.0508%" height="15" fill="rgb(233,42,35)" fg:x="959" fg:w="5"/><text x="9.9979%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.05%)</title><rect x="9.7479%" y="837" width="0.0508%" height="15" fill="rgb(231,13,6)" fg:x="959" fg:w="5"/><text x="9.9979%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.05%)</title><rect x="9.7479%" y="821" width="0.0508%" height="15" fill="rgb(207,181,40)" fg:x="959" fg:w="5"/><text x="9.9979%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.05%)</title><rect x="9.7479%" y="805" width="0.0508%" height="15" fill="rgb(254,173,49)" fg:x="959" fg:w="5"/><text x="9.9979%" y="815.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.05%)</title><rect x="9.7479%" y="789" width="0.0508%" height="15" fill="rgb(221,1,38)" fg:x="959" fg:w="5"/><text x="9.9979%" y="799.50"></text></g><g><title>csv_core::reader::Reader::read_record (6 samples, 0.06%)</title><rect x="9.7987%" y="901" width="0.0610%" height="15" fill="rgb(206,124,46)" fg:x="964" fg:w="6"/><text x="10.0487%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.11%)</title><rect x="9.8597%" y="901" width="0.1118%" height="15" fill="rgb(249,21,11)" fg:x="970" fg:w="11"/><text x="10.1097%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (6 samples, 0.06%)</title><rect x="9.9106%" y="885" width="0.0610%" height="15" fill="rgb(222,201,40)" fg:x="975" fg:w="6"/><text x="10.1606%" y="895.50"></text></g><g><title>core::hash::Hasher::write_u32 (6 samples, 0.06%)</title><rect x="9.9106%" y="869" width="0.0610%" height="15" fill="rgb(235,61,29)" fg:x="975" fg:w="6"/><text x="10.1606%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (5 samples, 0.05%)</title><rect x="9.9715%" y="901" width="0.0508%" height="15" fill="rgb(219,207,3)" fg:x="981" fg:w="5"/><text x="10.2215%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14 samples, 0.14%)</title><rect x="10.0224%" y="901" width="0.1423%" height="15" fill="rgb(222,56,46)" fg:x="986" fg:w="14"/><text x="10.2724%" y="911.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.01%)</title><rect x="10.2358%" y="885" width="0.0102%" height="15" fill="rgb(239,76,54)" fg:x="1007" fg:w="1"/><text x="10.4858%" y="895.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="10.2358%" y="869" width="0.0102%" height="15" fill="rgb(231,124,27)" fg:x="1007" fg:w="1"/><text x="10.4858%" y="879.50"></text></g><g><title>resolution::account::Account::is_locked (8 samples, 0.08%)</title><rect x="10.2460%" y="885" width="0.0813%" height="15" fill="rgb(249,195,6)" fg:x="1008" fg:w="8"/><text x="10.4960%" y="895.50"></text></g><g><title>resolution::account::Account::add_transaction (18 samples, 0.18%)</title><rect x="10.1647%" y="901" width="0.1830%" height="15" fill="rgb(237,174,47)" fg:x="1000" fg:w="18"/><text x="10.4147%" y="911.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (2 samples, 0.02%)</title><rect x="10.3273%" y="885" width="0.0203%" height="15" fill="rgb(206,201,31)" fg:x="1016" fg:w="2"/><text x="10.5773%" y="895.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.02%)</title><rect x="10.3273%" y="869" width="0.0203%" height="15" fill="rgb(231,57,52)" fg:x="1016" fg:w="2"/><text x="10.5773%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.02%)</title><rect x="10.3273%" y="853" width="0.0203%" height="15" fill="rgb(248,177,22)" fg:x="1016" fg:w="2"/><text x="10.5773%" y="863.50"></text></g><g><title>resolution::main (12 samples, 0.12%)</title><rect x="10.3476%" y="901" width="0.1220%" height="15" fill="rgb(215,211,37)" fg:x="1018" fg:w="12"/><text x="10.5976%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.02%)</title><rect x="10.4493%" y="885" width="0.0203%" height="15" fill="rgb(241,128,51)" fg:x="1028" fg:w="2"/><text x="10.6993%" y="895.50"></text></g><g><title>rust_decimal::ops::add::add_sub_internal (13 samples, 0.13%)</title><rect x="10.4696%" y="901" width="0.1321%" height="15" fill="rgb(227,165,31)" fg:x="1030" fg:w="13"/><text x="10.7196%" y="911.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (6 samples, 0.06%)</title><rect x="10.5408%" y="885" width="0.0610%" height="15" fill="rgb(228,167,24)" fg:x="1037" fg:w="6"/><text x="10.7908%" y="895.50"></text></g><g><title>rust_decimal::ops::add::aligned_add (4 samples, 0.04%)</title><rect x="10.6017%" y="901" width="0.0407%" height="15" fill="rgb(228,143,12)" fg:x="1043" fg:w="4"/><text x="10.8517%" y="911.50"></text></g><g><title>rust_decimal::ops::array::add_by_internal (51 samples, 0.52%)</title><rect x="10.6424%" y="901" width="0.5184%" height="15" fill="rgb(249,149,8)" fg:x="1047" fg:w="51"/><text x="10.8924%" y="911.50"></text></g><g><title>rust_decimal::ops::cmp::cmp_internal (1 samples, 0.01%)</title><rect x="11.1608%" y="901" width="0.0102%" height="15" fill="rgb(243,35,44)" fg:x="1098" fg:w="1"/><text x="11.4108%" y="911.50"></text></g><g><title>[unknown] (809 samples, 8.22%)</title><rect x="2.9681%" y="917" width="8.2232%" height="15" fill="rgb(246,89,9)" fg:x="292" fg:w="809"/><text x="3.2181%" y="927.50">[unknown]</text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="11.1710%" y="901" width="0.0203%" height="15" fill="rgb(233,213,13)" fg:x="1099" fg:w="2"/><text x="11.4210%" y="911.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="11.1913%" y="917" width="0.0203%" height="15" fill="rgb(233,141,41)" fg:x="1101" fg:w="2"/><text x="11.4413%" y="927.50"></text></g><g><title>__libc_calloc (8 samples, 0.08%)</title><rect x="11.2116%" y="917" width="0.0813%" height="15" fill="rgb(239,167,4)" fg:x="1103" fg:w="8"/><text x="11.4616%" y="927.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="11.2929%" y="917" width="0.0102%" height="15" fill="rgb(209,217,16)" fg:x="1111" fg:w="1"/><text x="11.5429%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 0.04%)</title><rect x="12.0655%" y="709" width="0.0407%" height="15" fill="rgb(219,88,35)" fg:x="1187" fg:w="4"/><text x="12.3155%" y="719.50"></text></g><g><title>csv::Trim::should_trim_fields (3 samples, 0.03%)</title><rect x="12.1874%" y="693" width="0.0305%" height="15" fill="rgb(220,193,23)" fg:x="1199" fg:w="3"/><text x="12.4374%" y="703.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (14 samples, 0.14%)</title><rect x="12.3907%" y="661" width="0.1423%" height="15" fill="rgb(230,90,52)" fg:x="1219" fg:w="14"/><text x="12.6407%" y="671.50"></text></g><g><title>core::slice::ascii::is_ascii (14 samples, 0.14%)</title><rect x="12.3907%" y="645" width="0.1423%" height="15" fill="rgb(252,106,19)" fg:x="1219" fg:w="14"/><text x="12.6407%" y="655.50"></text></g><g><title>core::slice::ascii::contains_nonascii (9 samples, 0.09%)</title><rect x="12.4416%" y="629" width="0.0915%" height="15" fill="rgb(206,74,20)" fg:x="1224" fg:w="9"/><text x="12.6916%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.08%)</title><rect x="12.5330%" y="645" width="0.0813%" height="15" fill="rgb(230,138,44)" fg:x="1233" fg:w="8"/><text x="12.7830%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.01%)</title><rect x="12.6144%" y="645" width="0.0102%" height="15" fill="rgb(235,182,43)" fg:x="1241" fg:w="1"/><text x="12.8644%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (26 samples, 0.26%)</title><rect x="12.3704%" y="677" width="0.2643%" height="15" fill="rgb(242,16,51)" fg:x="1217" fg:w="26"/><text x="12.6204%" y="687.50"></text></g><g><title>csv::byte_record::Bounds::end (10 samples, 0.10%)</title><rect x="12.5330%" y="661" width="0.1016%" height="15" fill="rgb(248,9,4)" fg:x="1233" fg:w="10"/><text x="12.7830%" y="671.50"></text></g><g><title>csv::byte_record::Bounds::ends (1 samples, 0.01%)</title><rect x="12.6245%" y="645" width="0.0102%" height="15" fill="rgb(210,31,22)" fg:x="1242" fg:w="1"/><text x="12.8745%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="12.6245%" y="629" width="0.0102%" height="15" fill="rgb(239,54,39)" fg:x="1242" fg:w="1"/><text x="12.8745%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="12.6245%" y="613" width="0.0102%" height="15" fill="rgb(230,99,41)" fg:x="1242" fg:w="1"/><text x="12.8745%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="12.6245%" y="597" width="0.0102%" height="15" fill="rgb(253,106,12)" fg:x="1242" fg:w="1"/><text x="12.8745%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="12.6245%" y="581" width="0.0102%" height="15" fill="rgb(213,46,41)" fg:x="1242" fg:w="1"/><text x="12.8745%" y="591.50"></text></g><g><title>csv::Trim::should_trim_fields (3 samples, 0.03%)</title><rect x="12.8888%" y="661" width="0.0305%" height="15" fill="rgb(215,133,35)" fg:x="1268" fg:w="3"/><text x="13.1388%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="13.0108%" y="613" width="0.0203%" height="15" fill="rgb(213,28,5)" fg:x="1280" fg:w="2"/><text x="13.2608%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="13.0108%" y="597" width="0.0203%" height="15" fill="rgb(215,77,49)" fg:x="1280" fg:w="2"/><text x="13.2608%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="13.0108%" y="581" width="0.0203%" height="15" fill="rgb(248,100,22)" fg:x="1280" fg:w="2"/><text x="13.2608%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="13.0108%" y="565" width="0.0203%" height="15" fill="rgb(208,67,9)" fg:x="1280" fg:w="2"/><text x="13.2608%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.02%)</title><rect x="13.0311%" y="597" width="0.0203%" height="15" fill="rgb(219,133,21)" fg:x="1282" fg:w="2"/><text x="13.2811%" y="607.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.05%)</title><rect x="13.0108%" y="645" width="0.0508%" height="15" fill="rgb(246,46,29)" fg:x="1280" fg:w="5"/><text x="13.2608%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (5 samples, 0.05%)</title><rect x="13.0108%" y="629" width="0.0508%" height="15" fill="rgb(246,185,52)" fg:x="1280" fg:w="5"/><text x="13.2608%" y="639.50"></text></g><g><title>csv::byte_record::Bounds::end (3 samples, 0.03%)</title><rect x="13.0311%" y="613" width="0.0305%" height="15" fill="rgb(252,136,11)" fg:x="1282" fg:w="3"/><text x="13.2811%" y="623.50"></text></g><g><title>csv::byte_record::Bounds::ends (1 samples, 0.01%)</title><rect x="13.0514%" y="597" width="0.0102%" height="15" fill="rgb(219,138,53)" fg:x="1284" fg:w="1"/><text x="13.3014%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.20%)</title><rect x="13.1937%" y="629" width="0.2033%" height="15" fill="rgb(211,51,23)" fg:x="1298" fg:w="20"/><text x="13.4437%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.11%)</title><rect x="13.2852%" y="613" width="0.1118%" height="15" fill="rgb(247,221,28)" fg:x="1307" fg:w="11"/><text x="13.5352%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.11%)</title><rect x="13.2852%" y="597" width="0.1118%" height="15" fill="rgb(251,222,45)" fg:x="1307" fg:w="11"/><text x="13.5352%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="13.4479%" y="597" width="0.0203%" height="15" fill="rgb(217,162,53)" fg:x="1323" fg:w="2"/><text x="13.6979%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="13.4580%" y="581" width="0.0102%" height="15" fill="rgb(229,93,14)" fg:x="1324" fg:w="1"/><text x="13.7080%" y="591.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.46%)</title><rect x="13.0616%" y="645" width="0.4574%" height="15" fill="rgb(209,67,49)" fg:x="1285" fg:w="45"/><text x="13.3116%" y="655.50"></text></g><g><title>csv::byte_record::Bounds::ends (12 samples, 0.12%)</title><rect x="13.3970%" y="629" width="0.1220%" height="15" fill="rgb(213,87,29)" fg:x="1318" fg:w="12"/><text x="13.6470%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.07%)</title><rect x="13.4479%" y="613" width="0.0712%" height="15" fill="rgb(205,151,52)" fg:x="1323" fg:w="7"/><text x="13.6979%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.05%)</title><rect x="13.4682%" y="597" width="0.0508%" height="15" fill="rgb(253,215,39)" fg:x="1325" fg:w="5"/><text x="13.7182%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.05%)</title><rect x="13.4682%" y="581" width="0.0508%" height="15" fill="rgb(221,220,41)" fg:x="1325" fg:w="5"/><text x="13.7182%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.05%)</title><rect x="13.4682%" y="565" width="0.0508%" height="15" fill="rgb(218,133,21)" fg:x="1325" fg:w="5"/><text x="13.7182%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="645" width="0.0102%" height="15" fill="rgb(221,193,43)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="629" width="0.0102%" height="15" fill="rgb(240,128,52)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="613" width="0.0102%" height="15" fill="rgb(253,114,12)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="597" width="0.0102%" height="15" fill="rgb(215,223,47)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="581" width="0.0102%" height="15" fill="rgb(248,225,23)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="565" width="0.0102%" height="15" fill="rgb(250,108,0)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="549" width="0.0102%" height="15" fill="rgb(228,208,7)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="533" width="0.0102%" height="15" fill="rgb(244,45,10)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="517" width="0.0102%" height="15" fill="rgb(207,125,25)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="501" width="0.0102%" height="15" fill="rgb(210,195,18)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="485" width="0.0102%" height="15" fill="rgb(249,80,12)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="469" width="0.0102%" height="15" fill="rgb(221,65,9)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="453" width="0.0102%" height="15" fill="rgb(235,49,36)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="13.5190%" y="437" width="0.0102%" height="15" fill="rgb(225,32,20)" fg:x="1330" fg:w="1"/><text x="13.7690%" y="447.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_rev::WHITESPACE_ANCHORED_REV as core::ops::deref::Deref&gt;::deref (10 samples, 0.10%)</title><rect x="13.6410%" y="597" width="0.1016%" height="15" fill="rgb(215,141,46)" fg:x="1342" fg:w="10"/><text x="13.8910%" y="607.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_rev::WHITESPACE_ANCHORED_REV as core::ops::deref::Deref&gt;::deref::__stability (10 samples, 0.10%)</title><rect x="13.6410%" y="581" width="0.1016%" height="15" fill="rgb(250,160,47)" fg:x="1342" fg:w="10"/><text x="13.8910%" y="591.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (10 samples, 0.10%)</title><rect x="13.6410%" y="565" width="0.1016%" height="15" fill="rgb(216,222,40)" fg:x="1342" fg:w="10"/><text x="13.8910%" y="575.50"></text></g><g><title>std::sync::once::Once::call_once (9 samples, 0.09%)</title><rect x="13.6511%" y="549" width="0.0915%" height="15" fill="rgb(234,217,39)" fg:x="1343" fg:w="9"/><text x="13.9011%" y="559.50"></text></g><g><title>std::sync::once::Once::is_completed (9 samples, 0.09%)</title><rect x="13.6511%" y="533" width="0.0915%" height="15" fill="rgb(207,178,40)" fg:x="1343" fg:w="9"/><text x="13.9011%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.09%)</title><rect x="13.6511%" y="517" width="0.0915%" height="15" fill="rgb(221,136,13)" fg:x="1343" fg:w="9"/><text x="13.9011%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.09%)</title><rect x="13.6511%" y="501" width="0.0915%" height="15" fill="rgb(249,199,10)" fg:x="1343" fg:w="9"/><text x="13.9011%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.12%)</title><rect x="14.8506%" y="549" width="0.1220%" height="15" fill="rgb(249,222,13)" fg:x="1461" fg:w="12"/><text x="15.1006%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (12 samples, 0.12%)</title><rect x="14.8506%" y="533" width="0.1220%" height="15" fill="rgb(244,185,38)" fg:x="1461" fg:w="12"/><text x="15.1006%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (12 samples, 0.12%)</title><rect x="14.8506%" y="517" width="0.1220%" height="15" fill="rgb(236,202,9)" fg:x="1461" fg:w="12"/><text x="15.1006%" y="527.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_state (9 samples, 0.09%)</title><rect x="14.9726%" y="549" width="0.0915%" height="15" fill="rgb(250,229,37)" fg:x="1473" fg:w="9"/><text x="15.2226%" y="559.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_state (9 samples, 0.09%)</title><rect x="14.9726%" y="533" width="0.0915%" height="15" fill="rgb(206,174,23)" fg:x="1473" fg:w="9"/><text x="15.2226%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::le (9 samples, 0.09%)</title><rect x="14.9726%" y="517" width="0.0915%" height="15" fill="rgb(211,33,43)" fg:x="1473" fg:w="9"/><text x="15.2226%" y="527.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim_end (161 samples, 1.64%)</title><rect x="13.5292%" y="629" width="1.6365%" height="15" fill="rgb(245,58,50)" fg:x="1331" fg:w="161"/><text x="13.7792%" y="639.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_rev (156 samples, 1.59%)</title><rect x="13.5800%" y="613" width="1.5857%" height="15" fill="rgb(244,68,36)" fg:x="1336" fg:w="156"/><text x="13.8300%" y="623.50"></text></g><g><title>regex_automata::dfa::DFA::rfind (140 samples, 1.42%)</title><rect x="13.7426%" y="597" width="1.4231%" height="15" fill="rgb(232,229,15)" fg:x="1352" fg:w="140"/><text x="13.9926%" y="607.50"></text></g><g><title>&lt;regex_automata::dense_imp::DenseDFA&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::rfind_at (140 samples, 1.42%)</title><rect x="13.7426%" y="581" width="1.4231%" height="15" fill="rgb(254,30,23)" fg:x="1352" fg:w="140"/><text x="13.9926%" y="591.50"></text></g><g><title>regex_automata::dfa::DFA::rfind_at (60 samples, 0.61%)</title><rect x="14.5558%" y="565" width="0.6099%" height="15" fill="rgb(235,160,14)" fg:x="1432" fg:w="60"/><text x="14.8058%" y="575.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::next_state_unchecked (10 samples, 0.10%)</title><rect x="15.0640%" y="549" width="0.1016%" height="15" fill="rgb(212,155,44)" fg:x="1482" fg:w="10"/><text x="15.3140%" y="559.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_fwd::WHITESPACE_ANCHORED_FWD as core::ops::deref::Deref&gt;::deref (10 samples, 0.10%)</title><rect x="15.3486%" y="597" width="0.1016%" height="15" fill="rgb(226,2,50)" fg:x="1510" fg:w="10"/><text x="15.5986%" y="607.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_fwd::WHITESPACE_ANCHORED_FWD as core::ops::deref::Deref&gt;::deref::__stability (10 samples, 0.10%)</title><rect x="15.3486%" y="581" width="0.1016%" height="15" fill="rgb(234,177,6)" fg:x="1510" fg:w="10"/><text x="15.5986%" y="591.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (10 samples, 0.10%)</title><rect x="15.3486%" y="565" width="0.1016%" height="15" fill="rgb(217,24,9)" fg:x="1510" fg:w="10"/><text x="15.5986%" y="575.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.01%)</title><rect x="15.4401%" y="549" width="0.0102%" height="15" fill="rgb(220,13,46)" fg:x="1519" fg:w="1"/><text x="15.6901%" y="559.50"></text></g><g><title>std::sync::once::Once::is_completed (1 samples, 0.01%)</title><rect x="15.4401%" y="533" width="0.0102%" height="15" fill="rgb(239,221,27)" fg:x="1519" fg:w="1"/><text x="15.6901%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (5 samples, 0.05%)</title><rect x="15.4503%" y="597" width="0.0508%" height="15" fill="rgb(222,198,25)" fg:x="1520" fg:w="5"/><text x="15.7003%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.06%)</title><rect x="16.5887%" y="549" width="0.0610%" height="15" fill="rgb(211,99,13)" fg:x="1632" fg:w="6"/><text x="16.8387%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.06%)</title><rect x="16.5887%" y="533" width="0.0610%" height="15" fill="rgb(232,111,31)" fg:x="1632" fg:w="6"/><text x="16.8387%" y="543.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_dead_state (3 samples, 0.03%)</title><rect x="16.6497%" y="549" width="0.0305%" height="15" fill="rgb(245,82,37)" fg:x="1638" fg:w="3"/><text x="16.8997%" y="559.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_dead_state (3 samples, 0.03%)</title><rect x="16.6497%" y="533" width="0.0305%" height="15" fill="rgb(227,149,46)" fg:x="1638" fg:w="3"/><text x="16.8997%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (3 samples, 0.03%)</title><rect x="16.6497%" y="517" width="0.0305%" height="15" fill="rgb(218,36,50)" fg:x="1638" fg:w="3"/><text x="16.8997%" y="527.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_or_dead_state (4 samples, 0.04%)</title><rect x="16.6802%" y="549" width="0.0407%" height="15" fill="rgb(226,80,48)" fg:x="1641" fg:w="4"/><text x="16.9302%" y="559.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_or_dead_state (4 samples, 0.04%)</title><rect x="16.6802%" y="533" width="0.0407%" height="15" fill="rgb(238,224,15)" fg:x="1641" fg:w="4"/><text x="16.9302%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::le (4 samples, 0.04%)</title><rect x="16.6802%" y="517" width="0.0407%" height="15" fill="rgb(241,136,10)" fg:x="1641" fg:w="4"/><text x="16.9302%" y="527.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_state (7 samples, 0.07%)</title><rect x="16.7209%" y="549" width="0.0712%" height="15" fill="rgb(208,32,45)" fg:x="1645" fg:w="7"/><text x="16.9709%" y="559.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_state (7 samples, 0.07%)</title><rect x="16.7209%" y="533" width="0.0712%" height="15" fill="rgb(207,135,9)" fg:x="1645" fg:w="7"/><text x="16.9709%" y="543.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (168 samples, 1.71%)</title><rect x="15.2165%" y="613" width="1.7077%" height="15" fill="rgb(206,86,44)" fg:x="1497" fg:w="168"/><text x="15.4665%" y="623.50"></text></g><g><title>regex_automata::dfa::DFA::find (140 samples, 1.42%)</title><rect x="15.5011%" y="597" width="1.4231%" height="15" fill="rgb(245,177,15)" fg:x="1525" fg:w="140"/><text x="15.7511%" y="607.50"></text></g><g><title>&lt;regex_automata::dense_imp::DenseDFA&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::find_at (140 samples, 1.42%)</title><rect x="15.5011%" y="581" width="1.4231%" height="15" fill="rgb(206,64,50)" fg:x="1525" fg:w="140"/><text x="15.7511%" y="591.50"></text></g><g><title>regex_automata::dfa::DFA::find_at (42 samples, 0.43%)</title><rect x="16.4973%" y="565" width="0.4269%" height="15" fill="rgb(234,36,40)" fg:x="1623" fg:w="42"/><text x="16.7473%" y="575.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::next_state_unchecked (13 samples, 0.13%)</title><rect x="16.7920%" y="549" width="0.1321%" height="15" fill="rgb(213,64,8)" fg:x="1652" fg:w="13"/><text x="17.0420%" y="559.50"></text></g><g><title>&lt;u8 as regex_automata::state_id::StateID&gt;::to_usize (8 samples, 0.08%)</title><rect x="16.8429%" y="533" width="0.0813%" height="15" fill="rgb(210,75,36)" fg:x="1657" fg:w="8"/><text x="17.0929%" y="543.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim (337 samples, 3.43%)</title><rect x="13.5292%" y="645" width="3.4255%" height="15" fill="rgb(229,88,21)" fg:x="1331" fg:w="337"/><text x="13.7792%" y="655.50">bst..</text></g><g><title>bstr::ext_slice::ByteSlice::trim_start (176 samples, 1.79%)</title><rect x="15.1657%" y="629" width="1.7890%" height="15" fill="rgb(252,204,47)" fg:x="1492" fg:w="176"/><text x="15.4157%" y="639.50">b..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.03%)</title><rect x="16.9242%" y="613" width="0.0305%" height="15" fill="rgb(208,77,27)" fg:x="1665" fg:w="3"/><text x="17.1742%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="16.9242%" y="597" width="0.0305%" height="15" fill="rgb(221,76,26)" fg:x="1665" fg:w="3"/><text x="17.1742%" y="607.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (4 samples, 0.04%)</title><rect x="16.9547%" y="645" width="0.0407%" height="15" fill="rgb(225,139,18)" fg:x="1668" fg:w="4"/><text x="17.2047%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.04%)</title><rect x="16.9547%" y="629" width="0.0407%" height="15" fill="rgb(230,137,11)" fg:x="1668" fg:w="4"/><text x="17.2047%" y="639.50"></text></g><g><title>__GI___libc_free (66 samples, 0.67%)</title><rect x="17.0055%" y="565" width="0.6709%" height="15" fill="rgb(212,28,1)" fg:x="1673" fg:w="66"/><text x="17.2555%" y="575.50"></text></g><g><title>_int_free (40 samples, 0.41%)</title><rect x="17.2698%" y="549" width="0.4066%" height="15" fill="rgb(248,164,17)" fg:x="1699" fg:w="40"/><text x="17.5198%" y="559.50"></text></g><g><title>tcache_put (18 samples, 0.18%)</title><rect x="17.4934%" y="533" width="0.1830%" height="15" fill="rgb(222,171,42)" fg:x="1721" fg:w="18"/><text x="17.7434%" y="543.50"></text></g><g><title>alloc::alloc::box_free (79 samples, 0.80%)</title><rect x="17.0055%" y="613" width="0.8030%" height="15" fill="rgb(243,84,45)" fg:x="1673" fg:w="79"/><text x="17.2555%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.80%)</title><rect x="17.0055%" y="597" width="0.8030%" height="15" fill="rgb(252,49,23)" fg:x="1673" fg:w="79"/><text x="17.2555%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.80%)</title><rect x="17.0055%" y="581" width="0.8030%" height="15" fill="rgb(215,19,7)" fg:x="1673" fg:w="79"/><text x="17.2555%" y="591.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.13%)</title><rect x="17.6764%" y="565" width="0.1321%" height="15" fill="rgb(238,81,41)" fg:x="1739" fg:w="13"/><text x="17.9264%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.13%)</title><rect x="17.6764%" y="549" width="0.1321%" height="15" fill="rgb(210,199,37)" fg:x="1739" fg:w="13"/><text x="17.9264%" y="559.50"></text></g><g><title>__GI___libc_free (42 samples, 0.43%)</title><rect x="17.8288%" y="517" width="0.4269%" height="15" fill="rgb(244,192,49)" fg:x="1754" fg:w="42"/><text x="18.0788%" y="527.50"></text></g><g><title>_int_free (30 samples, 0.30%)</title><rect x="17.9508%" y="501" width="0.3049%" height="15" fill="rgb(226,211,11)" fg:x="1766" fg:w="30"/><text x="18.2008%" y="511.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.09%)</title><rect x="18.2557%" y="517" width="0.0915%" height="15" fill="rgb(236,162,54)" fg:x="1796" fg:w="9"/><text x="18.5057%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.09%)</title><rect x="18.2557%" y="501" width="0.0915%" height="15" fill="rgb(220,229,9)" fg:x="1796" fg:w="9"/><text x="18.5057%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (56 samples, 0.57%)</title><rect x="17.8085%" y="597" width="0.5692%" height="15" fill="rgb(250,87,22)" fg:x="1752" fg:w="56"/><text x="18.0585%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (56 samples, 0.57%)</title><rect x="17.8085%" y="581" width="0.5692%" height="15" fill="rgb(239,43,17)" fg:x="1752" fg:w="56"/><text x="18.0585%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.57%)</title><rect x="17.8085%" y="565" width="0.5692%" height="15" fill="rgb(231,177,25)" fg:x="1752" fg:w="56"/><text x="18.0585%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (54 samples, 0.55%)</title><rect x="17.8288%" y="549" width="0.5489%" height="15" fill="rgb(219,179,1)" fg:x="1754" fg:w="54"/><text x="18.0788%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (54 samples, 0.55%)</title><rect x="17.8288%" y="533" width="0.5489%" height="15" fill="rgb(238,219,53)" fg:x="1754" fg:w="54"/><text x="18.0788%" y="543.50"></text></g><g><title>__rust_dealloc (3 samples, 0.03%)</title><rect x="18.3472%" y="517" width="0.0305%" height="15" fill="rgb(232,167,36)" fg:x="1805" fg:w="3"/><text x="18.5972%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="485" width="0.0102%" height="15" fill="rgb(244,19,51)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="469" width="0.0102%" height="15" fill="rgb(224,6,22)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="453" width="0.0102%" height="15" fill="rgb(224,145,5)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="437" width="0.0102%" height="15" fill="rgb(234,130,49)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="421" width="0.0102%" height="15" fill="rgb(254,6,2)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="405" width="0.0102%" height="15" fill="rgb(208,96,46)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="389" width="0.0102%" height="15" fill="rgb(239,3,39)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="373" width="0.0102%" height="15" fill="rgb(233,210,1)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="357" width="0.0102%" height="15" fill="rgb(244,137,37)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="341" width="0.0102%" height="15" fill="rgb(240,136,2)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="325" width="0.0102%" height="15" fill="rgb(239,18,37)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6522%" y="309" width="0.0102%" height="15" fill="rgb(218,185,22)" fg:x="1835" fg:w="1"/><text x="18.9022%" y="319.50"></text></g><g><title>__GI___libc_free (47 samples, 0.48%)</title><rect x="18.4794%" y="501" width="0.4777%" height="15" fill="rgb(225,218,4)" fg:x="1818" fg:w="47"/><text x="18.7294%" y="511.50"></text></g><g><title>_int_free (29 samples, 0.29%)</title><rect x="18.6623%" y="485" width="0.2948%" height="15" fill="rgb(230,182,32)" fg:x="1836" fg:w="29"/><text x="18.9123%" y="495.50"></text></g><g><title>free_perturb (2 samples, 0.02%)</title><rect x="18.9368%" y="469" width="0.0203%" height="15" fill="rgb(242,56,43)" fg:x="1863" fg:w="2"/><text x="19.1868%" y="479.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="18.9571%" y="501" width="0.0305%" height="15" fill="rgb(233,99,24)" fg:x="1865" fg:w="3"/><text x="19.2071%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="18.9571%" y="485" width="0.0305%" height="15" fill="rgb(234,209,42)" fg:x="1865" fg:w="3"/><text x="19.2071%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.54%)</title><rect x="18.4794%" y="533" width="0.5387%" height="15" fill="rgb(227,7,12)" fg:x="1818" fg:w="53"/><text x="18.7294%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (53 samples, 0.54%)</title><rect x="18.4794%" y="517" width="0.5387%" height="15" fill="rgb(245,203,43)" fg:x="1818" fg:w="53"/><text x="18.7294%" y="527.50"></text></g><g><title>__rust_dealloc (3 samples, 0.03%)</title><rect x="18.9876%" y="501" width="0.0305%" height="15" fill="rgb(238,205,33)" fg:x="1868" fg:w="3"/><text x="19.2376%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (203 samples, 2.06%)</title><rect x="16.9953%" y="645" width="2.0634%" height="15" fill="rgb(231,56,7)" fg:x="1672" fg:w="203"/><text x="17.2453%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (203 samples, 2.06%)</title><rect x="16.9953%" y="629" width="2.0634%" height="15" fill="rgb(244,186,29)" fg:x="1672" fg:w="203"/><text x="17.2453%" y="639.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (123 samples, 1.25%)</title><rect x="17.8085%" y="613" width="1.2503%" height="15" fill="rgb(234,111,31)" fg:x="1752" fg:w="123"/><text x="18.0585%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (67 samples, 0.68%)</title><rect x="18.3777%" y="597" width="0.6810%" height="15" fill="rgb(241,149,10)" fg:x="1808" fg:w="67"/><text x="18.6277%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (67 samples, 0.68%)</title><rect x="18.3777%" y="581" width="0.6810%" height="15" fill="rgb(249,206,44)" fg:x="1808" fg:w="67"/><text x="18.6277%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (67 samples, 0.68%)</title><rect x="18.3777%" y="565" width="0.6810%" height="15" fill="rgb(251,153,30)" fg:x="1808" fg:w="67"/><text x="18.6277%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.68%)</title><rect x="18.3777%" y="549" width="0.6810%" height="15" fill="rgb(239,152,38)" fg:x="1808" fg:w="67"/><text x="18.6277%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.04%)</title><rect x="19.0181%" y="533" width="0.0407%" height="15" fill="rgb(249,139,47)" fg:x="1871" fg:w="4"/><text x="19.2681%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="19.0588%" y="613" width="0.0203%" height="15" fill="rgb(244,64,35)" fg:x="1875" fg:w="2"/><text x="19.3088%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.05%)</title><rect x="19.0588%" y="629" width="0.0508%" height="15" fill="rgb(216,46,15)" fg:x="1875" fg:w="5"/><text x="19.3088%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.03%)</title><rect x="19.0791%" y="613" width="0.0305%" height="15" fill="rgb(250,74,19)" fg:x="1877" fg:w="3"/><text x="19.3291%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="19.0791%" y="597" width="0.0305%" height="15" fill="rgb(249,42,33)" fg:x="1877" fg:w="3"/><text x="19.3291%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="19.0791%" y="581" width="0.0305%" height="15" fill="rgb(242,149,17)" fg:x="1877" fg:w="3"/><text x="19.3291%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.05%)</title><rect x="19.1096%" y="613" width="0.0508%" height="15" fill="rgb(244,29,21)" fg:x="1880" fg:w="5"/><text x="19.3596%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="19.1604%" y="581" width="0.0102%" height="15" fill="rgb(220,130,37)" fg:x="1885" fg:w="1"/><text x="19.4104%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="19.1604%" y="565" width="0.0102%" height="15" fill="rgb(211,67,2)" fg:x="1885" fg:w="1"/><text x="19.4104%" y="575.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (12 samples, 0.12%)</title><rect x="19.0588%" y="645" width="0.1220%" height="15" fill="rgb(235,68,52)" fg:x="1875" fg:w="12"/><text x="19.3088%" y="655.50"></text></g><g><title>csv::byte_record::Bounds::end (7 samples, 0.07%)</title><rect x="19.1096%" y="629" width="0.0712%" height="15" fill="rgb(246,142,3)" fg:x="1880" fg:w="7"/><text x="19.3596%" y="639.50"></text></g><g><title>csv::byte_record::Bounds::ends (2 samples, 0.02%)</title><rect x="19.1604%" y="613" width="0.0203%" height="15" fill="rgb(241,25,7)" fg:x="1885" fg:w="2"/><text x="19.4104%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="19.1604%" y="597" width="0.0203%" height="15" fill="rgb(242,119,39)" fg:x="1885" fg:w="2"/><text x="19.4104%" y="607.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="19.1706%" y="581" width="0.0102%" height="15" fill="rgb(241,98,45)" fg:x="1886" fg:w="1"/><text x="19.4206%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="19.1706%" y="565" width="0.0102%" height="15" fill="rgb(254,28,30)" fg:x="1886" fg:w="1"/><text x="19.4206%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="19.1706%" y="549" width="0.0102%" height="15" fill="rgb(241,142,54)" fg:x="1886" fg:w="1"/><text x="19.4206%" y="559.50"></text></g><g><title>csv::byte_record::ByteRecord::len (1 samples, 0.01%)</title><rect x="19.1807%" y="645" width="0.0102%" height="15" fill="rgb(222,85,15)" fg:x="1887" fg:w="1"/><text x="19.4307%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::position (1 samples, 0.01%)</title><rect x="19.1909%" y="645" width="0.0102%" height="15" fill="rgb(210,85,47)" fg:x="1888" fg:w="1"/><text x="19.4409%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="19.1909%" y="629" width="0.0102%" height="15" fill="rgb(224,206,25)" fg:x="1888" fg:w="1"/><text x="19.4409%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 0.15%)</title><rect x="19.3434%" y="629" width="0.1525%" height="15" fill="rgb(243,201,19)" fg:x="1903" fg:w="15"/><text x="19.5934%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.15%)</title><rect x="19.3434%" y="613" width="0.1525%" height="15" fill="rgb(236,59,4)" fg:x="1903" fg:w="15"/><text x="19.5934%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (15 samples, 0.15%)</title><rect x="19.3434%" y="597" width="0.1525%" height="15" fill="rgb(254,179,45)" fg:x="1903" fg:w="15"/><text x="19.5934%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.03%)</title><rect x="19.4653%" y="581" width="0.0305%" height="15" fill="rgb(226,14,10)" fg:x="1915" fg:w="3"/><text x="19.7153%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.03%)</title><rect x="19.4653%" y="565" width="0.0305%" height="15" fill="rgb(244,27,41)" fg:x="1915" fg:w="3"/><text x="19.7153%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.03%)</title><rect x="19.4653%" y="549" width="0.0305%" height="15" fill="rgb(235,35,32)" fg:x="1915" fg:w="3"/><text x="19.7153%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (54 samples, 0.55%)</title><rect x="19.4958%" y="629" width="0.5489%" height="15" fill="rgb(218,68,31)" fg:x="1918" fg:w="54"/><text x="19.7458%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.55%)</title><rect x="19.4958%" y="613" width="0.5489%" height="15" fill="rgb(207,120,37)" fg:x="1918" fg:w="54"/><text x="19.7458%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (50 samples, 0.51%)</title><rect x="19.5365%" y="597" width="0.5082%" height="15" fill="rgb(227,98,0)" fg:x="1922" fg:w="50"/><text x="19.7865%" y="607.50"></text></g><g><title>csv::byte_record::Bounds::add (16 samples, 0.16%)</title><rect x="20.0447%" y="629" width="0.1626%" height="15" fill="rgb(207,7,3)" fg:x="1972" fg:w="16"/><text x="20.2947%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="20.2277%" y="613" width="0.0102%" height="15" fill="rgb(206,98,19)" fg:x="1990" fg:w="1"/><text x="20.4777%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.04%)</title><rect x="20.2379%" y="613" width="0.0407%" height="15" fill="rgb(217,5,26)" fg:x="1991" fg:w="4"/><text x="20.4879%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="20.2785%" y="581" width="0.0305%" height="15" fill="rgb(235,190,38)" fg:x="1995" fg:w="3"/><text x="20.5285%" y="591.50"></text></g><g><title>csv::byte_record::ByteRecord::push_field (113 samples, 1.15%)</title><rect x="19.2011%" y="645" width="1.1486%" height="15" fill="rgb(247,86,24)" fg:x="1889" fg:w="113"/><text x="19.4511%" y="655.50"></text></g><g><title>csv::byte_record::Bounds::end (14 samples, 0.14%)</title><rect x="20.2074%" y="629" width="0.1423%" height="15" fill="rgb(205,101,16)" fg:x="1988" fg:w="14"/><text x="20.4574%" y="639.50"></text></g><g><title>csv::byte_record::Bounds::ends (7 samples, 0.07%)</title><rect x="20.2785%" y="613" width="0.0712%" height="15" fill="rgb(246,168,33)" fg:x="1995" fg:w="7"/><text x="20.5285%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.07%)</title><rect x="20.2785%" y="597" width="0.0712%" height="15" fill="rgb(231,114,1)" fg:x="1995" fg:w="7"/><text x="20.5285%" y="607.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.04%)</title><rect x="20.3090%" y="581" width="0.0407%" height="15" fill="rgb(207,184,53)" fg:x="1998" fg:w="4"/><text x="20.5590%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.04%)</title><rect x="20.3090%" y="565" width="0.0407%" height="15" fill="rgb(224,95,51)" fg:x="1998" fg:w="4"/><text x="20.5590%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.04%)</title><rect x="20.3090%" y="549" width="0.0407%" height="15" fill="rgb(212,188,45)" fg:x="1998" fg:w="4"/><text x="20.5590%" y="559.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (4 samples, 0.04%)</title><rect x="20.3497%" y="645" width="0.0407%" height="15" fill="rgb(223,154,38)" fg:x="2002" fg:w="4"/><text x="20.5997%" y="655.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="20.8579%" y="533" width="0.0203%" height="15" fill="rgb(251,22,52)" fg:x="2052" fg:w="2"/><text x="21.1079%" y="543.50"></text></g><g><title>__GI___libc_malloc (56 samples, 0.57%)</title><rect x="20.6038%" y="549" width="0.5692%" height="15" fill="rgb(229,209,22)" fg:x="2027" fg:w="56"/><text x="20.8538%" y="559.50"></text></g><g><title>tcache_get (29 samples, 0.29%)</title><rect x="20.8782%" y="533" width="0.2948%" height="15" fill="rgb(234,138,34)" fg:x="2054" fg:w="29"/><text x="21.1282%" y="543.50"></text></g><g><title>__rdl_alloc (7 samples, 0.07%)</title><rect x="21.1730%" y="549" width="0.0712%" height="15" fill="rgb(212,95,11)" fg:x="2083" fg:w="7"/><text x="21.4230%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.07%)</title><rect x="21.1730%" y="533" width="0.0712%" height="15" fill="rgb(240,179,47)" fg:x="2083" fg:w="7"/><text x="21.4230%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (78 samples, 0.79%)</title><rect x="20.4716%" y="629" width="0.7928%" height="15" fill="rgb(240,163,11)" fg:x="2014" fg:w="78"/><text x="20.7216%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (65 samples, 0.66%)</title><rect x="20.6038%" y="613" width="0.6607%" height="15" fill="rgb(236,37,12)" fg:x="2027" fg:w="65"/><text x="20.8538%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.66%)</title><rect x="20.6038%" y="597" width="0.6607%" height="15" fill="rgb(232,164,16)" fg:x="2027" fg:w="65"/><text x="20.8538%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.66%)</title><rect x="20.6038%" y="581" width="0.6607%" height="15" fill="rgb(244,205,15)" fg:x="2027" fg:w="65"/><text x="20.8538%" y="591.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.66%)</title><rect x="20.6038%" y="565" width="0.6607%" height="15" fill="rgb(223,117,47)" fg:x="2027" fg:w="65"/><text x="20.8538%" y="575.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="21.2442%" y="549" width="0.0203%" height="15" fill="rgb(244,107,35)" fg:x="2090" fg:w="2"/><text x="21.4942%" y="559.50"></text></g><g><title>__libc_calloc (80 samples, 0.81%)</title><rect x="21.3153%" y="517" width="0.8132%" height="15" fill="rgb(205,140,8)" fg:x="2097" fg:w="80"/><text x="21.5653%" y="527.50"></text></g><g><title>_int_malloc (30 samples, 0.30%)</title><rect x="21.8235%" y="501" width="0.3049%" height="15" fill="rgb(228,84,46)" fg:x="2147" fg:w="30"/><text x="22.0735%" y="511.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="22.0878%" y="485" width="0.0407%" height="15" fill="rgb(254,188,9)" fg:x="2173" fg:w="4"/><text x="22.3378%" y="495.50"></text></g><g><title>__rdl_alloc_zeroed (7 samples, 0.07%)</title><rect x="22.1285%" y="517" width="0.0712%" height="15" fill="rgb(206,112,54)" fg:x="2177" fg:w="7"/><text x="22.3785%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (4 samples, 0.04%)</title><rect x="22.1590%" y="501" width="0.0407%" height="15" fill="rgb(216,84,49)" fg:x="2180" fg:w="4"/><text x="22.4090%" y="511.50"></text></g><g><title>alloc::vec::from_elem (93 samples, 0.95%)</title><rect x="21.2645%" y="629" width="0.9453%" height="15" fill="rgb(214,194,35)" fg:x="2092" fg:w="93"/><text x="21.5145%" y="639.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (93 samples, 0.95%)</title><rect x="21.2645%" y="613" width="0.9453%" height="15" fill="rgb(249,28,3)" fg:x="2092" fg:w="93"/><text x="21.5145%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (89 samples, 0.90%)</title><rect x="21.3051%" y="597" width="0.9047%" height="15" fill="rgb(222,56,52)" fg:x="2096" fg:w="89"/><text x="21.5551%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (89 samples, 0.90%)</title><rect x="21.3051%" y="581" width="0.9047%" height="15" fill="rgb(245,217,50)" fg:x="2096" fg:w="89"/><text x="21.5551%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (89 samples, 0.90%)</title><rect x="21.3051%" y="565" width="0.9047%" height="15" fill="rgb(213,201,24)" fg:x="2096" fg:w="89"/><text x="21.5551%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.90%)</title><rect x="21.3051%" y="549" width="0.9047%" height="15" fill="rgb(248,116,28)" fg:x="2096" fg:w="89"/><text x="21.5551%" y="559.50"></text></g><g><title>alloc::alloc::alloc_zeroed (88 samples, 0.89%)</title><rect x="21.3153%" y="533" width="0.8945%" height="15" fill="rgb(219,72,43)" fg:x="2097" fg:w="88"/><text x="21.5653%" y="543.50"></text></g><g><title>__rust_alloc_zeroed (1 samples, 0.01%)</title><rect x="22.1996%" y="517" width="0.0102%" height="15" fill="rgb(209,138,14)" fg:x="2184" fg:w="1"/><text x="22.4496%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="501" width="0.0102%" height="15" fill="rgb(222,18,33)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="485" width="0.0102%" height="15" fill="rgb(213,199,7)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="469" width="0.0102%" height="15" fill="rgb(250,110,10)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="453" width="0.0102%" height="15" fill="rgb(248,123,6)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="437" width="0.0102%" height="15" fill="rgb(206,91,31)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="421" width="0.0102%" height="15" fill="rgb(211,154,13)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="405" width="0.0102%" height="15" fill="rgb(225,148,7)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="22.2200%" y="389" width="0.0102%" height="15" fill="rgb(220,160,43)" fg:x="2186" fg:w="1"/><text x="22.4700%" y="399.50"></text></g><g><title>__libc_calloc (93 samples, 0.95%)</title><rect x="22.2301%" y="501" width="0.9453%" height="15" fill="rgb(213,52,39)" fg:x="2187" fg:w="93"/><text x="22.4801%" y="511.50"></text></g><g><title>_int_malloc (41 samples, 0.42%)</title><rect x="22.7587%" y="485" width="0.4168%" height="15" fill="rgb(243,137,7)" fg:x="2239" fg:w="41"/><text x="23.0087%" y="495.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="23.1551%" y="469" width="0.0203%" height="15" fill="rgb(230,79,13)" fg:x="2278" fg:w="2"/><text x="23.4051%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (100 samples, 1.02%)</title><rect x="22.2098%" y="549" width="1.0165%" height="15" fill="rgb(247,105,23)" fg:x="2185" fg:w="100"/><text x="22.4598%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 1.02%)</title><rect x="22.2098%" y="533" width="1.0165%" height="15" fill="rgb(223,179,41)" fg:x="2185" fg:w="100"/><text x="22.4598%" y="543.50"></text></g><g><title>alloc::alloc::alloc_zeroed (100 samples, 1.02%)</title><rect x="22.2098%" y="517" width="1.0165%" height="15" fill="rgb(218,9,34)" fg:x="2185" fg:w="100"/><text x="22.4598%" y="527.50"></text></g><g><title>__rdl_alloc_zeroed (5 samples, 0.05%)</title><rect x="23.1754%" y="501" width="0.0508%" height="15" fill="rgb(222,106,8)" fg:x="2280" fg:w="5"/><text x="23.4254%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (5 samples, 0.05%)</title><rect x="23.1754%" y="485" width="0.0508%" height="15" fill="rgb(211,220,0)" fg:x="2280" fg:w="5"/><text x="23.4254%" y="495.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (1,017 samples, 10.34%)</title><rect x="12.9193%" y="661" width="10.3375%" height="15" fill="rgb(229,52,16)" fg:x="1271" fg:w="1017"/><text x="13.1693%" y="671.50">csv::byte_recor..</text></g><g><title>csv::byte_record::ByteRecord::with_capacity (282 samples, 2.87%)</title><rect x="20.3903%" y="645" width="2.8664%" height="15" fill="rgb(212,155,18)" fg:x="2006" fg:w="282"/><text x="20.6403%" y="655.50">cs..</text></g><g><title>csv::byte_record::Bounds::with_capacity (103 samples, 1.05%)</title><rect x="22.2098%" y="629" width="1.0470%" height="15" fill="rgb(242,21,14)" fg:x="2185" fg:w="103"/><text x="22.4598%" y="639.50"></text></g><g><title>alloc::vec::from_elem (103 samples, 1.05%)</title><rect x="22.2098%" y="613" width="1.0470%" height="15" fill="rgb(222,19,48)" fg:x="2185" fg:w="103"/><text x="22.4598%" y="623.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (103 samples, 1.05%)</title><rect x="22.2098%" y="597" width="1.0470%" height="15" fill="rgb(232,45,27)" fg:x="2185" fg:w="103"/><text x="22.4598%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (103 samples, 1.05%)</title><rect x="22.2098%" y="581" width="1.0470%" height="15" fill="rgb(249,103,42)" fg:x="2185" fg:w="103"/><text x="22.4598%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (103 samples, 1.05%)</title><rect x="22.2098%" y="565" width="1.0470%" height="15" fill="rgb(246,81,33)" fg:x="2185" fg:w="103"/><text x="22.4598%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.03%)</title><rect x="23.2263%" y="549" width="0.0305%" height="15" fill="rgb(252,33,42)" fg:x="2285" fg:w="3"/><text x="23.4763%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3 samples, 0.03%)</title><rect x="23.2263%" y="533" width="0.0305%" height="15" fill="rgb(209,212,41)" fg:x="2285" fg:w="3"/><text x="23.4763%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3 samples, 0.03%)</title><rect x="23.2263%" y="517" width="0.0305%" height="15" fill="rgb(207,154,6)" fg:x="2285" fg:w="3"/><text x="23.4763%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.03%)</title><rect x="23.2263%" y="501" width="0.0305%" height="15" fill="rgb(223,64,47)" fg:x="2285" fg:w="3"/><text x="23.4763%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.02%)</title><rect x="23.5820%" y="629" width="0.0203%" height="15" fill="rgb(211,161,38)" fg:x="2320" fg:w="2"/><text x="23.8320%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (9 samples, 0.09%)</title><rect x="23.5820%" y="645" width="0.0915%" height="15" fill="rgb(219,138,40)" fg:x="2320" fg:w="9"/><text x="23.8320%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (7 samples, 0.07%)</title><rect x="23.6024%" y="629" width="0.0712%" height="15" fill="rgb(241,228,46)" fg:x="2322" fg:w="7"/><text x="23.8524%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (7 samples, 0.07%)</title><rect x="23.6024%" y="613" width="0.0712%" height="15" fill="rgb(223,209,38)" fg:x="2322" fg:w="7"/><text x="23.8524%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="23.6532%" y="597" width="0.0203%" height="15" fill="rgb(236,164,45)" fg:x="2327" fg:w="2"/><text x="23.9032%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="23.6532%" y="581" width="0.0203%" height="15" fill="rgb(231,15,5)" fg:x="2327" fg:w="2"/><text x="23.9032%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="23.6532%" y="565" width="0.0203%" height="15" fill="rgb(252,35,15)" fg:x="2327" fg:w="2"/><text x="23.9032%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="23.6532%" y="549" width="0.0203%" height="15" fill="rgb(248,181,18)" fg:x="2327" fg:w="2"/><text x="23.9032%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (12 samples, 0.12%)</title><rect x="23.6735%" y="645" width="0.1220%" height="15" fill="rgb(233,39,42)" fg:x="2329" fg:w="12"/><text x="23.9235%" y="655.50"></text></g><g><title>core::cmp::min (6 samples, 0.06%)</title><rect x="23.7345%" y="629" width="0.0610%" height="15" fill="rgb(238,110,33)" fg:x="2335" fg:w="6"/><text x="23.9845%" y="639.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.06%)</title><rect x="23.7345%" y="613" width="0.0610%" height="15" fill="rgb(233,195,10)" fg:x="2335" fg:w="6"/><text x="23.9845%" y="623.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.06%)</title><rect x="23.7345%" y="597" width="0.0610%" height="15" fill="rgb(254,105,3)" fg:x="2335" fg:w="6"/><text x="23.9845%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="581" width="0.0102%" height="15" fill="rgb(221,225,9)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="565" width="0.0102%" height="15" fill="rgb(224,227,45)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="549" width="0.0102%" height="15" fill="rgb(229,198,43)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="533" width="0.0102%" height="15" fill="rgb(206,209,35)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="517" width="0.0102%" height="15" fill="rgb(245,195,53)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="501" width="0.0102%" height="15" fill="rgb(240,92,26)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="485" width="0.0102%" height="15" fill="rgb(207,40,23)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="469" width="0.0102%" height="15" fill="rgb(223,111,35)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="453" width="0.0102%" height="15" fill="rgb(229,147,28)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="437" width="0.0102%" height="15" fill="rgb(211,29,28)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="23.7853%" y="421" width="0.0102%" height="15" fill="rgb(228,72,33)" fg:x="2340" fg:w="1"/><text x="24.0353%" y="431.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (44 samples, 0.45%)</title><rect x="23.8870%" y="629" width="0.4472%" height="15" fill="rgb(205,214,31)" fg:x="2350" fg:w="44"/><text x="24.1370%" y="639.50"></text></g><g><title>std::sys::unix::fs::File::read (44 samples, 0.45%)</title><rect x="23.8870%" y="613" width="0.4472%" height="15" fill="rgb(224,111,15)" fg:x="2350" fg:w="44"/><text x="24.1370%" y="623.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (44 samples, 0.45%)</title><rect x="23.8870%" y="597" width="0.4472%" height="15" fill="rgb(253,21,26)" fg:x="2350" fg:w="44"/><text x="24.1370%" y="607.50"></text></g><g><title>__GI___libc_read (44 samples, 0.45%)</title><rect x="23.8870%" y="581" width="0.4472%" height="15" fill="rgb(245,139,43)" fg:x="2350" fg:w="44"/><text x="24.1370%" y="591.50"></text></g><g><title>[unknown] (44 samples, 0.45%)</title><rect x="23.8870%" y="565" width="0.4472%" height="15" fill="rgb(252,170,7)" fg:x="2350" fg:w="44"/><text x="24.1370%" y="575.50"></text></g><g><title>[unknown] (43 samples, 0.44%)</title><rect x="23.8971%" y="549" width="0.4371%" height="15" fill="rgb(231,118,14)" fg:x="2351" fg:w="43"/><text x="24.1471%" y="559.50"></text></g><g><title>[unknown] (43 samples, 0.44%)</title><rect x="23.8971%" y="533" width="0.4371%" height="15" fill="rgb(238,83,0)" fg:x="2351" fg:w="43"/><text x="24.1471%" y="543.50"></text></g><g><title>[unknown] (38 samples, 0.39%)</title><rect x="23.9480%" y="517" width="0.3863%" height="15" fill="rgb(221,39,39)" fg:x="2356" fg:w="38"/><text x="24.1980%" y="527.50"></text></g><g><title>[unknown] (38 samples, 0.39%)</title><rect x="23.9480%" y="501" width="0.3863%" height="15" fill="rgb(222,119,46)" fg:x="2356" fg:w="38"/><text x="24.1980%" y="511.50"></text></g><g><title>[unknown] (38 samples, 0.39%)</title><rect x="23.9480%" y="485" width="0.3863%" height="15" fill="rgb(222,165,49)" fg:x="2356" fg:w="38"/><text x="24.1980%" y="495.50"></text></g><g><title>[unknown] (35 samples, 0.36%)</title><rect x="23.9785%" y="469" width="0.3558%" height="15" fill="rgb(219,113,52)" fg:x="2359" fg:w="35"/><text x="24.2285%" y="479.50"></text></g><g><title>[unknown] (35 samples, 0.36%)</title><rect x="23.9785%" y="453" width="0.3558%" height="15" fill="rgb(214,7,15)" fg:x="2359" fg:w="35"/><text x="24.2285%" y="463.50"></text></g><g><title>[unknown] (35 samples, 0.36%)</title><rect x="23.9785%" y="437" width="0.3558%" height="15" fill="rgb(235,32,4)" fg:x="2359" fg:w="35"/><text x="24.2285%" y="447.50"></text></g><g><title>[unknown] (33 samples, 0.34%)</title><rect x="23.9988%" y="421" width="0.3354%" height="15" fill="rgb(238,90,54)" fg:x="2361" fg:w="33"/><text x="24.2488%" y="431.50"></text></g><g><title>[unknown] (32 samples, 0.33%)</title><rect x="24.0089%" y="405" width="0.3253%" height="15" fill="rgb(213,208,19)" fg:x="2362" fg:w="32"/><text x="24.2589%" y="415.50"></text></g><g><title>[unknown] (28 samples, 0.28%)</title><rect x="24.0496%" y="389" width="0.2846%" height="15" fill="rgb(233,156,4)" fg:x="2366" fg:w="28"/><text x="24.2996%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="24.3342%" y="629" width="0.0102%" height="15" fill="rgb(207,194,5)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.01%)</title><rect x="24.3342%" y="613" width="0.0102%" height="15" fill="rgb(206,111,30)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="24.3342%" y="597" width="0.0102%" height="15" fill="rgb(243,70,54)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="24.3342%" y="581" width="0.0102%" height="15" fill="rgb(242,28,8)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="24.3342%" y="565" width="0.0102%" height="15" fill="rgb(219,106,18)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="575.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="24.3342%" y="549" width="0.0102%" height="15" fill="rgb(244,222,10)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="24.3342%" y="533" width="0.0102%" height="15" fill="rgb(236,179,52)" fg:x="2394" fg:w="1"/><text x="24.5842%" y="543.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (56 samples, 0.57%)</title><rect x="23.7955%" y="645" width="0.5692%" height="15" fill="rgb(213,23,39)" fg:x="2341" fg:w="56"/><text x="24.0455%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="24.3444%" y="629" width="0.0203%" height="15" fill="rgb(238,48,10)" fg:x="2395" fg:w="2"/><text x="24.5944%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="24.3444%" y="613" width="0.0203%" height="15" fill="rgb(251,196,23)" fg:x="2395" fg:w="2"/><text x="24.5944%" y="623.50"></text></g><g><title>csv::byte_record::ByteRecord::as_parts (1 samples, 0.01%)</title><rect x="24.3647%" y="645" width="0.0102%" height="15" fill="rgb(250,152,24)" fg:x="2397" fg:w="1"/><text x="24.6147%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::clear (4 samples, 0.04%)</title><rect x="24.3749%" y="645" width="0.0407%" height="15" fill="rgb(209,150,17)" fg:x="2398" fg:w="4"/><text x="24.6249%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::truncate (4 samples, 0.04%)</title><rect x="24.3749%" y="629" width="0.0407%" height="15" fill="rgb(234,202,34)" fg:x="2398" fg:w="4"/><text x="24.6249%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.09%)</title><rect x="24.4765%" y="597" width="0.0915%" height="15" fill="rgb(253,148,53)" fg:x="2408" fg:w="9"/><text x="24.7265%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (5 samples, 0.05%)</title><rect x="24.7001%" y="533" width="0.0508%" height="15" fill="rgb(218,129,16)" fg:x="2430" fg:w="5"/><text x="24.9501%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.04%)</title><rect x="24.7510%" y="533" width="0.0407%" height="15" fill="rgb(216,85,19)" fg:x="2435" fg:w="4"/><text x="25.0010%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (2 samples, 0.02%)</title><rect x="24.7916%" y="533" width="0.0203%" height="15" fill="rgb(235,228,7)" fg:x="2439" fg:w="2"/><text x="25.0416%" y="543.50"></text></g><g><title>[libc-2.33.so] (2 samples, 0.02%)</title><rect x="25.5032%" y="437" width="0.0203%" height="15" fill="rgb(245,175,0)" fg:x="2509" fg:w="2"/><text x="25.7532%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.16%)</title><rect x="25.5235%" y="437" width="0.1626%" height="15" fill="rgb(208,168,36)" fg:x="2511" fg:w="16"/><text x="25.7735%" y="447.50"></text></g><g><title>_int_free (51 samples, 0.52%)</title><rect x="25.6861%" y="437" width="0.5184%" height="15" fill="rgb(246,171,24)" fg:x="2527" fg:w="51"/><text x="25.9361%" y="447.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="26.1943%" y="421" width="0.0102%" height="15" fill="rgb(215,142,24)" fg:x="2577" fg:w="1"/><text x="26.4443%" y="431.50"></text></g><g><title>checked_request2size (3 samples, 0.03%)</title><rect x="26.6823%" y="421" width="0.0305%" height="15" fill="rgb(250,187,7)" fg:x="2625" fg:w="3"/><text x="26.9323%" y="431.50"></text></g><g><title>_int_realloc (152 samples, 1.55%)</title><rect x="25.1779%" y="453" width="1.5450%" height="15" fill="rgb(228,66,33)" fg:x="2477" fg:w="152"/><text x="25.4279%" y="463.50"></text></g><g><title>_int_malloc (51 samples, 0.52%)</title><rect x="26.2045%" y="437" width="0.5184%" height="15" fill="rgb(234,215,21)" fg:x="2578" fg:w="51"/><text x="26.4545%" y="447.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="26.7127%" y="421" width="0.0102%" height="15" fill="rgb(222,191,20)" fg:x="2628" fg:w="1"/><text x="26.9627%" y="431.50"></text></g><g><title>__GI___libc_realloc (189 samples, 1.92%)</title><rect x="24.8831%" y="469" width="1.9211%" height="15" fill="rgb(245,79,54)" fg:x="2448" fg:w="189"/><text x="25.1331%" y="479.50">_..</text></g><g><title>checked_request2size (8 samples, 0.08%)</title><rect x="26.7229%" y="453" width="0.0813%" height="15" fill="rgb(240,10,37)" fg:x="2629" fg:w="8"/><text x="26.9729%" y="463.50"></text></g><g><title>__rdl_realloc (10 samples, 0.10%)</title><rect x="26.8042%" y="469" width="0.1016%" height="15" fill="rgb(214,192,32)" fg:x="2637" fg:w="10"/><text x="27.0542%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (8 samples, 0.08%)</title><rect x="26.8246%" y="453" width="0.0813%" height="15" fill="rgb(209,36,54)" fg:x="2639" fg:w="8"/><text x="27.0746%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (203 samples, 2.06%)</title><rect x="24.8831%" y="517" width="2.0634%" height="15" fill="rgb(220,10,11)" fg:x="2448" fg:w="203"/><text x="25.1331%" y="527.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (203 samples, 2.06%)</title><rect x="24.8831%" y="501" width="2.0634%" height="15" fill="rgb(221,106,17)" fg:x="2448" fg:w="203"/><text x="25.1331%" y="511.50">a..</text></g><g><title>alloc::alloc::realloc (203 samples, 2.06%)</title><rect x="24.8831%" y="485" width="2.0634%" height="15" fill="rgb(251,142,44)" fg:x="2448" fg:w="203"/><text x="25.1331%" y="495.50">a..</text></g><g><title>__rust_realloc (4 samples, 0.04%)</title><rect x="26.9059%" y="469" width="0.0407%" height="15" fill="rgb(238,13,15)" fg:x="2647" fg:w="4"/><text x="27.1559%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (220 samples, 2.24%)</title><rect x="24.8120%" y="533" width="2.2362%" height="15" fill="rgb(208,107,27)" fg:x="2441" fg:w="220"/><text x="25.0620%" y="543.50">a..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (10 samples, 0.10%)</title><rect x="26.9465%" y="517" width="0.1016%" height="15" fill="rgb(205,136,37)" fg:x="2651" fg:w="10"/><text x="27.1965%" y="527.50"></text></g><g><title>core::cmp::max (7 samples, 0.07%)</title><rect x="27.0482%" y="533" width="0.0712%" height="15" fill="rgb(250,205,27)" fg:x="2661" fg:w="7"/><text x="27.2982%" y="543.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.07%)</title><rect x="27.0482%" y="517" width="0.0712%" height="15" fill="rgb(210,80,43)" fg:x="2661" fg:w="7"/><text x="27.2982%" y="527.50"></text></g><g><title>core::cmp::max_by (7 samples, 0.07%)</title><rect x="27.0482%" y="501" width="0.0712%" height="15" fill="rgb(247,160,36)" fg:x="2661" fg:w="7"/><text x="27.2982%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (255 samples, 2.59%)</title><rect x="24.5680%" y="597" width="2.5920%" height="15" fill="rgb(234,13,49)" fg:x="2417" fg:w="255"/><text x="24.8180%" y="607.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (255 samples, 2.59%)</title><rect x="24.5680%" y="581" width="2.5920%" height="15" fill="rgb(234,122,0)" fg:x="2417" fg:w="255"/><text x="24.8180%" y="591.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (255 samples, 2.59%)</title><rect x="24.5680%" y="565" width="2.5920%" height="15" fill="rgb(207,146,38)" fg:x="2417" fg:w="255"/><text x="24.8180%" y="575.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (251 samples, 2.55%)</title><rect x="24.6087%" y="549" width="2.5513%" height="15" fill="rgb(207,177,25)" fg:x="2421" fg:w="251"/><text x="24.8587%" y="559.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.04%)</title><rect x="27.1193%" y="533" width="0.0407%" height="15" fill="rgb(211,178,42)" fg:x="2668" fg:w="4"/><text x="27.3693%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.04%)</title><rect x="27.1193%" y="517" width="0.0407%" height="15" fill="rgb(230,69,54)" fg:x="2668" fg:w="4"/><text x="27.3693%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.04%)</title><rect x="27.1600%" y="597" width="0.0407%" height="15" fill="rgb(214,135,41)" fg:x="2672" fg:w="4"/><text x="27.4100%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="27.2007%" y="597" width="0.0203%" height="15" fill="rgb(237,67,25)" fg:x="2676" fg:w="2"/><text x="27.4507%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="27.2007%" y="581" width="0.0203%" height="15" fill="rgb(222,189,50)" fg:x="2676" fg:w="2"/><text x="27.4507%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (300 samples, 3.05%)</title><rect x="24.4562%" y="629" width="3.0494%" height="15" fill="rgb(245,148,34)" fg:x="2406" fg:w="300"/><text x="24.7062%" y="639.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (298 samples, 3.03%)</title><rect x="24.4765%" y="613" width="3.0291%" height="15" fill="rgb(222,29,6)" fg:x="2408" fg:w="298"/><text x="24.7265%" y="623.50">all..</text></g><g><title>core::ptr::write (28 samples, 0.28%)</title><rect x="27.2210%" y="597" width="0.2846%" height="15" fill="rgb(221,189,43)" fg:x="2678" fg:w="28"/><text x="27.4710%" y="607.50"></text></g><g><title>__memset_avx2_unaligned_erms (28 samples, 0.28%)</title><rect x="27.2210%" y="581" width="0.2846%" height="15" fill="rgb(207,36,27)" fg:x="2678" fg:w="28"/><text x="27.4710%" y="591.50"></text></g><g><title>core::cmp::max (12 samples, 0.12%)</title><rect x="27.5056%" y="629" width="0.1220%" height="15" fill="rgb(217,90,24)" fg:x="2706" fg:w="12"/><text x="27.7556%" y="639.50"></text></g><g><title>core::cmp::Ord::max (12 samples, 0.12%)</title><rect x="27.5056%" y="613" width="0.1220%" height="15" fill="rgb(224,66,35)" fg:x="2706" fg:w="12"/><text x="27.7556%" y="623.50"></text></g><g><title>core::cmp::max_by (12 samples, 0.12%)</title><rect x="27.5056%" y="597" width="0.1220%" height="15" fill="rgb(221,13,50)" fg:x="2706" fg:w="12"/><text x="27.7556%" y="607.50"></text></g><g><title>csv::byte_record::ByteRecord::expand_fields (317 samples, 3.22%)</title><rect x="24.4155%" y="645" width="3.2222%" height="15" fill="rgb(236,68,49)" fg:x="2402" fg:w="317"/><text x="24.6655%" y="655.50">csv..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.01%)</title><rect x="27.6276%" y="629" width="0.0102%" height="15" fill="rgb(229,146,28)" fg:x="2718" fg:w="1"/><text x="27.8776%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="27.6276%" y="613" width="0.0102%" height="15" fill="rgb(225,31,38)" fg:x="2718" fg:w="1"/><text x="27.8776%" y="623.50"></text></g><g><title>csv::byte_record::ByteRecord::set_len (12 samples, 0.12%)</title><rect x="27.6377%" y="645" width="0.1220%" height="15" fill="rgb(250,208,3)" fg:x="2719" fg:w="12"/><text x="27.8877%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (9 samples, 0.09%)</title><rect x="27.7597%" y="645" width="0.0915%" height="15" fill="rgb(246,54,23)" fg:x="2731" fg:w="9"/><text x="28.0097%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::len (4 samples, 0.04%)</title><rect x="27.8614%" y="629" width="0.0407%" height="15" fill="rgb(243,76,11)" fg:x="2741" fg:w="4"/><text x="28.1114%" y="639.50"></text></g><g><title>csv::reader::ReaderState::add_record (6 samples, 0.06%)</title><rect x="27.8512%" y="645" width="0.0610%" height="15" fill="rgb(245,21,50)" fg:x="2740" fg:w="6"/><text x="28.1012%" y="655.50"></text></g><g><title>csv::byte_record::Position::set_record (1 samples, 0.01%)</title><rect x="27.9020%" y="629" width="0.0102%" height="15" fill="rgb(228,9,43)" fg:x="2745" fg:w="1"/><text x="28.1520%" y="639.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="29.1319%" y="613" width="0.0305%" height="15" fill="rgb(208,100,47)" fg:x="2866" fg:w="3"/><text x="29.3819%" y="623.50"></text></g><g><title>core::cmp::PartialOrd::ge (4 samples, 0.04%)</title><rect x="29.1624%" y="613" width="0.0407%" height="15" fill="rgb(232,26,8)" fg:x="2869" fg:w="4"/><text x="29.4124%" y="623.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.04%)</title><rect x="29.1624%" y="597" width="0.0407%" height="15" fill="rgb(216,166,38)" fg:x="2869" fg:w="4"/><text x="29.4124%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (4 samples, 0.04%)</title><rect x="29.1624%" y="581" width="0.0407%" height="15" fill="rgb(251,202,51)" fg:x="2869" fg:w="4"/><text x="29.4124%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u8&gt;::cmp (4 samples, 0.04%)</title><rect x="29.1624%" y="565" width="0.0407%" height="15" fill="rgb(254,216,34)" fg:x="2869" fg:w="4"/><text x="29.4124%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (4 samples, 0.04%)</title><rect x="29.2031%" y="613" width="0.0407%" height="15" fill="rgb(251,32,27)" fg:x="2873" fg:w="4"/><text x="29.4531%" y="623.50"></text></g><g><title>csv_core::reader::Dfa::get_output (90 samples, 0.91%)</title><rect x="29.2437%" y="613" width="0.9148%" height="15" fill="rgb(208,127,28)" fg:x="2877" fg:w="90"/><text x="29.4937%" y="623.50"></text></g><g><title>csv_core::reader::Dfa::new_read_record_result (15 samples, 0.15%)</title><rect x="30.1586%" y="613" width="0.1525%" height="15" fill="rgb(224,137,22)" fg:x="2967" fg:w="15"/><text x="30.4086%" y="623.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (385 samples, 3.91%)</title><rect x="28.0443%" y="629" width="3.9134%" height="15" fill="rgb(254,70,32)" fg:x="2759" fg:w="385"/><text x="28.2943%" y="639.50">csv_..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (162 samples, 1.65%)</title><rect x="30.3110%" y="613" width="1.6467%" height="15" fill="rgb(229,75,37)" fg:x="2982" fg:w="162"/><text x="30.5610%" y="623.50"></text></g><g><title>csv::string_record::StringRecord::read (1,944 samples, 19.76%)</title><rect x="12.2179%" y="693" width="19.7601%" height="15" fill="rgb(252,64,23)" fg:x="1202" fg:w="1944"/><text x="12.4679%" y="703.50">csv::string_record::StringRecor..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (1,903 samples, 19.34%)</title><rect x="12.6347%" y="677" width="19.3434%" height="15" fill="rgb(232,162,48)" fg:x="1243" fg:w="1903"/><text x="12.8847%" y="687.50">csv::reader::Reader&lt;R&gt;::read_b..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (858 samples, 8.72%)</title><rect x="23.2568%" y="661" width="8.7213%" height="15" fill="rgb(246,160,12)" fg:x="2288" fg:w="858"/><text x="23.5068%" y="671.50">csv::reader:..</text></g><g><title>csv_core::reader::Reader::read_record (400 samples, 4.07%)</title><rect x="27.9122%" y="645" width="4.0659%" height="15" fill="rgb(247,166,0)" fg:x="2746" fg:w="400"/><text x="28.1622%" y="655.50">csv_..</text></g><g><title>csv_core::reader::Reader::strip_utf8_bom (2 samples, 0.02%)</title><rect x="31.9577%" y="629" width="0.0203%" height="15" fill="rgb(249,219,21)" fg:x="3144" fg:w="2"/><text x="32.2077%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="32.1305%" y="613" width="0.0203%" height="15" fill="rgb(205,209,3)" fg:x="3161" fg:w="2"/><text x="32.3805%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="32.1305%" y="597" width="0.0203%" height="15" fill="rgb(243,44,1)" fg:x="3161" fg:w="2"/><text x="32.3805%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="32.1305%" y="581" width="0.0203%" height="15" fill="rgb(206,159,16)" fg:x="3161" fg:w="2"/><text x="32.3805%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="32.1305%" y="565" width="0.0203%" height="15" fill="rgb(244,77,30)" fg:x="3161" fg:w="2"/><text x="32.3805%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.10%)</title><rect x="32.1508%" y="597" width="0.1016%" height="15" fill="rgb(218,69,12)" fg:x="3163" fg:w="10"/><text x="32.4008%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.01%)</title><rect x="32.2525%" y="597" width="0.0102%" height="15" fill="rgb(212,87,7)" fg:x="3173" fg:w="1"/><text x="32.5025%" y="607.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.14%)</title><rect x="32.1305%" y="677" width="0.1423%" height="15" fill="rgb(245,114,25)" fg:x="3161" fg:w="14"/><text x="32.3805%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (14 samples, 0.14%)</title><rect x="32.1305%" y="661" width="0.1423%" height="15" fill="rgb(210,61,42)" fg:x="3161" fg:w="14"/><text x="32.3805%" y="671.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.14%)</title><rect x="32.1305%" y="645" width="0.1423%" height="15" fill="rgb(211,52,33)" fg:x="3161" fg:w="14"/><text x="32.3805%" y="655.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (14 samples, 0.14%)</title><rect x="32.1305%" y="629" width="0.1423%" height="15" fill="rgb(234,58,33)" fg:x="3161" fg:w="14"/><text x="32.3805%" y="639.50"></text></g><g><title>csv::byte_record::Bounds::end (12 samples, 0.12%)</title><rect x="32.1508%" y="613" width="0.1220%" height="15" fill="rgb(220,115,36)" fg:x="3163" fg:w="12"/><text x="32.4008%" y="623.50"></text></g><g><title>csv::byte_record::Bounds::ends (1 samples, 0.01%)</title><rect x="32.2627%" y="597" width="0.0102%" height="15" fill="rgb(243,153,54)" fg:x="3174" fg:w="1"/><text x="32.5127%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="32.2627%" y="581" width="0.0102%" height="15" fill="rgb(251,47,18)" fg:x="3174" fg:w="1"/><text x="32.5127%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="32.2627%" y="565" width="0.0102%" height="15" fill="rgb(242,102,42)" fg:x="3174" fg:w="1"/><text x="32.5127%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.12%)</title><rect x="32.5981%" y="645" width="0.1220%" height="15" fill="rgb(234,31,38)" fg:x="3207" fg:w="12"/><text x="32.8481%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.12%)</title><rect x="32.5981%" y="629" width="0.1220%" height="15" fill="rgb(221,117,51)" fg:x="3207" fg:w="12"/><text x="32.8481%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.12%)</title><rect x="32.5981%" y="613" width="0.1220%" height="15" fill="rgb(212,20,18)" fg:x="3207" fg:w="12"/><text x="32.8481%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.08%)</title><rect x="32.7201%" y="613" width="0.0813%" height="15" fill="rgb(245,133,36)" fg:x="3219" fg:w="8"/><text x="32.9701%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="32.7912%" y="597" width="0.0102%" height="15" fill="rgb(212,6,19)" fg:x="3226" fg:w="1"/><text x="33.0412%" y="607.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.60%)</title><rect x="32.2728%" y="677" width="0.5997%" height="15" fill="rgb(218,1,36)" fg:x="3175" fg:w="59"/><text x="32.5228%" y="687.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.60%)</title><rect x="32.2728%" y="661" width="0.5997%" height="15" fill="rgb(246,84,54)" fg:x="3175" fg:w="59"/><text x="32.5228%" y="671.50"></text></g><g><title>csv::byte_record::Bounds::ends (15 samples, 0.15%)</title><rect x="32.7201%" y="645" width="0.1525%" height="15" fill="rgb(242,110,6)" fg:x="3219" fg:w="15"/><text x="32.9701%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (15 samples, 0.15%)</title><rect x="32.7201%" y="629" width="0.1525%" height="15" fill="rgb(214,47,5)" fg:x="3219" fg:w="15"/><text x="32.9701%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.07%)</title><rect x="32.8014%" y="613" width="0.0712%" height="15" fill="rgb(218,159,25)" fg:x="3227" fg:w="7"/><text x="33.0514%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.07%)</title><rect x="32.8014%" y="597" width="0.0712%" height="15" fill="rgb(215,211,28)" fg:x="3227" fg:w="7"/><text x="33.0514%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.07%)</title><rect x="32.8014%" y="581" width="0.0712%" height="15" fill="rgb(238,59,32)" fg:x="3227" fg:w="7"/><text x="33.0514%" y="591.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (5 samples, 0.05%)</title><rect x="32.8725%" y="677" width="0.0508%" height="15" fill="rgb(226,82,3)" fg:x="3234" fg:w="5"/><text x="33.1225%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.05%)</title><rect x="32.8725%" y="661" width="0.0508%" height="15" fill="rgb(240,164,32)" fg:x="3234" fg:w="5"/><text x="33.1225%" y="671.50"></text></g><g><title>__GI___libc_free (58 samples, 0.59%)</title><rect x="32.9437%" y="581" width="0.5896%" height="15" fill="rgb(232,46,7)" fg:x="3241" fg:w="58"/><text x="33.1937%" y="591.50"></text></g><g><title>_int_free (39 samples, 0.40%)</title><rect x="33.1368%" y="565" width="0.3964%" height="15" fill="rgb(229,129,53)" fg:x="3260" fg:w="39"/><text x="33.3868%" y="575.50"></text></g><g><title>tcache_put (16 samples, 0.16%)</title><rect x="33.3706%" y="549" width="0.1626%" height="15" fill="rgb(234,188,29)" fg:x="3283" fg:w="16"/><text x="33.6206%" y="559.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.12%)</title><rect x="33.5332%" y="581" width="0.1220%" height="15" fill="rgb(246,141,4)" fg:x="3299" fg:w="12"/><text x="33.7832%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.12%)</title><rect x="33.5332%" y="565" width="0.1220%" height="15" fill="rgb(229,23,39)" fg:x="3299" fg:w="12"/><text x="33.7832%" y="575.50"></text></g><g><title>alloc::alloc::box_free (72 samples, 0.73%)</title><rect x="32.9437%" y="629" width="0.7319%" height="15" fill="rgb(206,12,3)" fg:x="3241" fg:w="72"/><text x="33.1937%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.73%)</title><rect x="32.9437%" y="613" width="0.7319%" height="15" fill="rgb(252,226,20)" fg:x="3241" fg:w="72"/><text x="33.1937%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.73%)</title><rect x="32.9437%" y="597" width="0.7319%" height="15" fill="rgb(216,123,35)" fg:x="3241" fg:w="72"/><text x="33.1937%" y="607.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="33.6552%" y="581" width="0.0203%" height="15" fill="rgb(212,68,40)" fg:x="3311" fg:w="2"/><text x="33.9052%" y="591.50"></text></g><g><title>__GI___libc_free (67 samples, 0.68%)</title><rect x="33.6959%" y="533" width="0.6810%" height="15" fill="rgb(254,125,32)" fg:x="3315" fg:w="67"/><text x="33.9459%" y="543.50"></text></g><g><title>_int_free (47 samples, 0.48%)</title><rect x="33.8992%" y="517" width="0.4777%" height="15" fill="rgb(253,97,22)" fg:x="3335" fg:w="47"/><text x="34.1492%" y="527.50"></text></g><g><title>free_perturb (2 samples, 0.02%)</title><rect x="34.3566%" y="501" width="0.0203%" height="15" fill="rgb(241,101,14)" fg:x="3380" fg:w="2"/><text x="34.6066%" y="511.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="34.3769%" y="533" width="0.0305%" height="15" fill="rgb(238,103,29)" fg:x="3382" fg:w="3"/><text x="34.6269%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="34.3769%" y="517" width="0.0305%" height="15" fill="rgb(233,195,47)" fg:x="3382" fg:w="3"/><text x="34.6269%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.73%)</title><rect x="33.6959%" y="565" width="0.7319%" height="15" fill="rgb(246,218,30)" fg:x="3315" fg:w="72"/><text x="33.9459%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.73%)</title><rect x="33.6959%" y="549" width="0.7319%" height="15" fill="rgb(219,145,47)" fg:x="3315" fg:w="72"/><text x="33.9459%" y="559.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="34.4074%" y="533" width="0.0203%" height="15" fill="rgb(243,12,26)" fg:x="3385" fg:w="2"/><text x="34.6574%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (75 samples, 0.76%)</title><rect x="33.6755%" y="613" width="0.7624%" height="15" fill="rgb(214,87,16)" fg:x="3313" fg:w="75"/><text x="33.9255%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (75 samples, 0.76%)</title><rect x="33.6755%" y="597" width="0.7624%" height="15" fill="rgb(208,99,42)" fg:x="3313" fg:w="75"/><text x="33.9255%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.76%)</title><rect x="33.6755%" y="581" width="0.7624%" height="15" fill="rgb(253,99,2)" fg:x="3313" fg:w="75"/><text x="33.9255%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="34.4277%" y="565" width="0.0102%" height="15" fill="rgb(220,168,23)" fg:x="3387" fg:w="1"/><text x="34.6777%" y="575.50"></text></g><g><title>__GI___libc_free (64 samples, 0.65%)</title><rect x="34.4379%" y="517" width="0.6505%" height="15" fill="rgb(242,38,24)" fg:x="3388" fg:w="64"/><text x="34.6879%" y="527.50"></text></g><g><title>_int_free (41 samples, 0.42%)</title><rect x="34.6717%" y="501" width="0.4168%" height="15" fill="rgb(225,182,9)" fg:x="3411" fg:w="41"/><text x="34.9217%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (73 samples, 0.74%)</title><rect x="34.4379%" y="549" width="0.7420%" height="15" fill="rgb(243,178,37)" fg:x="3388" fg:w="73"/><text x="34.6879%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (73 samples, 0.74%)</title><rect x="34.4379%" y="533" width="0.7420%" height="15" fill="rgb(232,139,19)" fg:x="3388" fg:w="73"/><text x="34.6879%" y="543.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.09%)</title><rect x="35.0884%" y="517" width="0.0915%" height="15" fill="rgb(225,201,24)" fg:x="3452" fg:w="9"/><text x="35.3384%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.09%)</title><rect x="35.0884%" y="501" width="0.0915%" height="15" fill="rgb(221,47,46)" fg:x="3452" fg:w="9"/><text x="35.3384%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::string_record::StringRecord&gt; (224 samples, 2.28%)</title><rect x="32.9234%" y="677" width="2.2769%" height="15" fill="rgb(249,23,13)" fg:x="3239" fg:w="224"/><text x="33.1734%" y="687.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (224 samples, 2.28%)</title><rect x="32.9234%" y="661" width="2.2769%" height="15" fill="rgb(219,9,5)" fg:x="3239" fg:w="224"/><text x="33.1734%" y="671.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (224 samples, 2.28%)</title><rect x="32.9234%" y="645" width="2.2769%" height="15" fill="rgb(254,171,16)" fg:x="3239" fg:w="224"/><text x="33.1734%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (150 samples, 1.52%)</title><rect x="33.6755%" y="629" width="1.5247%" height="15" fill="rgb(230,171,20)" fg:x="3313" fg:w="150"/><text x="33.9255%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (75 samples, 0.76%)</title><rect x="34.4379%" y="613" width="0.7624%" height="15" fill="rgb(210,71,41)" fg:x="3388" fg:w="75"/><text x="34.6879%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (75 samples, 0.76%)</title><rect x="34.4379%" y="597" width="0.7624%" height="15" fill="rgb(206,173,20)" fg:x="3388" fg:w="75"/><text x="34.6879%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (75 samples, 0.76%)</title><rect x="34.4379%" y="581" width="0.7624%" height="15" fill="rgb(233,88,34)" fg:x="3388" fg:w="75"/><text x="34.6879%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.76%)</title><rect x="34.4379%" y="565" width="0.7624%" height="15" fill="rgb(223,209,46)" fg:x="3388" fg:w="75"/><text x="34.6879%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="35.1799%" y="549" width="0.0203%" height="15" fill="rgb(250,43,18)" fg:x="3461" fg:w="2"/><text x="35.4299%" y="559.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (8 samples, 0.08%)</title><rect x="35.4137%" y="645" width="0.0813%" height="15" fill="rgb(208,13,10)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="655.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (8 samples, 0.08%)</title><rect x="35.4137%" y="629" width="0.0813%" height="15" fill="rgb(212,200,36)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="639.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (8 samples, 0.08%)</title><rect x="35.4137%" y="613" width="0.0813%" height="15" fill="rgb(225,90,30)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (8 samples, 0.08%)</title><rect x="35.4137%" y="597" width="0.0813%" height="15" fill="rgb(236,182,39)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (8 samples, 0.08%)</title><rect x="35.4137%" y="581" width="0.0813%" height="15" fill="rgb(212,144,35)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="591.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (8 samples, 0.08%)</title><rect x="35.4137%" y="565" width="0.0813%" height="15" fill="rgb(228,63,44)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.08%)</title><rect x="35.4137%" y="549" width="0.0813%" height="15" fill="rgb(228,109,6)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (8 samples, 0.08%)</title><rect x="35.4137%" y="533" width="0.0813%" height="15" fill="rgb(238,117,24)" fg:x="3484" fg:w="8"/><text x="35.6637%" y="543.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (5 samples, 0.05%)</title><rect x="35.5357%" y="597" width="0.0508%" height="15" fill="rgb(242,26,26)" fg:x="3496" fg:w="5"/><text x="35.7857%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (5 samples, 0.05%)</title><rect x="35.5357%" y="581" width="0.0508%" height="15" fill="rgb(221,92,48)" fg:x="3496" fg:w="5"/><text x="35.7857%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (5 samples, 0.05%)</title><rect x="35.5357%" y="565" width="0.0508%" height="15" fill="rgb(209,209,32)" fg:x="3496" fg:w="5"/><text x="35.7857%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (3 samples, 0.03%)</title><rect x="35.5865%" y="597" width="0.0305%" height="15" fill="rgb(221,70,22)" fg:x="3501" fg:w="3"/><text x="35.8365%" y="607.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (30 samples, 0.30%)</title><rect x="35.4950%" y="645" width="0.3049%" height="15" fill="rgb(248,145,5)" fg:x="3492" fg:w="30"/><text x="35.7450%" y="655.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (30 samples, 0.30%)</title><rect x="35.4950%" y="629" width="0.3049%" height="15" fill="rgb(226,116,26)" fg:x="3492" fg:w="30"/><text x="35.7450%" y="639.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (30 samples, 0.30%)</title><rect x="35.4950%" y="613" width="0.3049%" height="15" fill="rgb(244,5,17)" fg:x="3492" fg:w="30"/><text x="35.7450%" y="623.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (18 samples, 0.18%)</title><rect x="35.6170%" y="597" width="0.1830%" height="15" fill="rgb(252,159,33)" fg:x="3504" fg:w="18"/><text x="35.8670%" y="607.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (18 samples, 0.18%)</title><rect x="35.6170%" y="581" width="0.1830%" height="15" fill="rgb(206,71,0)" fg:x="3504" fg:w="18"/><text x="35.8670%" y="591.50"></text></g><g><title>core::str::validations::next_code_point_reverse (18 samples, 0.18%)</title><rect x="35.6170%" y="565" width="0.1830%" height="15" fill="rgb(233,118,54)" fg:x="3504" fg:w="18"/><text x="35.8670%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (13 samples, 0.13%)</title><rect x="35.6678%" y="549" width="0.1321%" height="15" fill="rgb(234,83,48)" fg:x="3509" fg:w="13"/><text x="35.9178%" y="559.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (7 samples, 0.07%)</title><rect x="35.8000%" y="597" width="0.0712%" height="15" fill="rgb(228,3,54)" fg:x="3522" fg:w="7"/><text x="36.0500%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (7 samples, 0.07%)</title><rect x="35.8000%" y="581" width="0.0712%" height="15" fill="rgb(226,155,13)" fg:x="3522" fg:w="7"/><text x="36.0500%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (7 samples, 0.07%)</title><rect x="35.8000%" y="565" width="0.0712%" height="15" fill="rgb(241,28,37)" fg:x="3522" fg:w="7"/><text x="36.0500%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (90 samples, 0.91%)</title><rect x="35.2002%" y="677" width="0.9148%" height="15" fill="rgb(233,93,10)" fg:x="3463" fg:w="90"/><text x="35.4502%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (90 samples, 0.91%)</title><rect x="35.2002%" y="661" width="0.9148%" height="15" fill="rgb(225,113,19)" fg:x="3463" fg:w="90"/><text x="35.4502%" y="671.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (31 samples, 0.32%)</title><rect x="35.8000%" y="645" width="0.3151%" height="15" fill="rgb(241,2,18)" fg:x="3522" fg:w="31"/><text x="36.0500%" y="655.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (31 samples, 0.32%)</title><rect x="35.8000%" y="629" width="0.3151%" height="15" fill="rgb(228,207,21)" fg:x="3522" fg:w="31"/><text x="36.0500%" y="639.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (31 samples, 0.32%)</title><rect x="35.8000%" y="613" width="0.3151%" height="15" fill="rgb(213,211,35)" fg:x="3522" fg:w="31"/><text x="36.0500%" y="623.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.24%)</title><rect x="35.8711%" y="597" width="0.2440%" height="15" fill="rgb(209,83,10)" fg:x="3529" fg:w="24"/><text x="36.1211%" y="607.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.10%)</title><rect x="36.0134%" y="581" width="0.1016%" height="15" fill="rgb(209,164,1)" fg:x="3543" fg:w="10"/><text x="36.2634%" y="591.50"></text></g><g><title>core::str::validations::next_code_point (10 samples, 0.10%)</title><rect x="36.0134%" y="565" width="0.1016%" height="15" fill="rgb(213,184,43)" fg:x="3543" fg:w="10"/><text x="36.2634%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="36.0642%" y="549" width="0.0508%" height="15" fill="rgb(231,61,34)" fg:x="3548" fg:w="5"/><text x="36.3142%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="36.1151%" y="645" width="0.0203%" height="15" fill="rgb(235,75,3)" fg:x="3553" fg:w="2"/><text x="36.3651%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="36.1151%" y="629" width="0.0203%" height="15" fill="rgb(220,106,47)" fg:x="3553" fg:w="2"/><text x="36.3651%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="36.1151%" y="613" width="0.0203%" height="15" fill="rgb(210,196,33)" fg:x="3553" fg:w="2"/><text x="36.3651%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="36.1151%" y="597" width="0.0203%" height="15" fill="rgb(229,154,42)" fg:x="3553" fg:w="2"/><text x="36.3651%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="36.1354%" y="629" width="0.0305%" height="15" fill="rgb(228,114,26)" fg:x="3555" fg:w="3"/><text x="36.3854%" y="639.50"></text></g><g><title>csv::string_record::StringRecord::as_slice (8 samples, 0.08%)</title><rect x="36.1151%" y="677" width="0.0813%" height="15" fill="rgb(208,144,1)" fg:x="3553" fg:w="8"/><text x="36.3651%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (8 samples, 0.08%)</title><rect x="36.1151%" y="661" width="0.0813%" height="15" fill="rgb(239,112,37)" fg:x="3553" fg:w="8"/><text x="36.3651%" y="671.50"></text></g><g><title>csv::byte_record::Bounds::end (6 samples, 0.06%)</title><rect x="36.1354%" y="645" width="0.0610%" height="15" fill="rgb(210,96,50)" fg:x="3555" fg:w="6"/><text x="36.3854%" y="655.50"></text></g><g><title>csv::byte_record::Bounds::ends (3 samples, 0.03%)</title><rect x="36.1659%" y="629" width="0.0305%" height="15" fill="rgb(222,178,2)" fg:x="3558" fg:w="3"/><text x="36.4159%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.03%)</title><rect x="36.1659%" y="613" width="0.0305%" height="15" fill="rgb(226,74,18)" fg:x="3558" fg:w="3"/><text x="36.4159%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="36.1659%" y="597" width="0.0305%" height="15" fill="rgb(225,67,54)" fg:x="3558" fg:w="3"/><text x="36.4159%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="36.1862%" y="581" width="0.0102%" height="15" fill="rgb(251,92,32)" fg:x="3560" fg:w="1"/><text x="36.4362%" y="591.50"></text></g><g><title>csv::string_record::StringRecord::len (1 samples, 0.01%)</title><rect x="36.1964%" y="677" width="0.0102%" height="15" fill="rgb(228,149,22)" fg:x="3561" fg:w="1"/><text x="36.4464%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::len (1 samples, 0.01%)</title><rect x="36.1964%" y="661" width="0.0102%" height="15" fill="rgb(243,54,13)" fg:x="3561" fg:w="1"/><text x="36.4464%" y="671.50"></text></g><g><title>csv::string_record::StringRecord::position (10 samples, 0.10%)</title><rect x="36.2065%" y="677" width="0.1016%" height="15" fill="rgb(243,180,28)" fg:x="3562" fg:w="10"/><text x="36.4565%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::position (10 samples, 0.10%)</title><rect x="36.2065%" y="661" width="0.1016%" height="15" fill="rgb(208,167,24)" fg:x="3562" fg:w="10"/><text x="36.4565%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (8 samples, 0.08%)</title><rect x="36.2269%" y="645" width="0.0813%" height="15" fill="rgb(245,73,45)" fg:x="3564" fg:w="8"/><text x="36.4769%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.10%)</title><rect x="36.4505%" y="645" width="0.1016%" height="15" fill="rgb(237,203,48)" fg:x="3586" fg:w="10"/><text x="36.7005%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.10%)</title><rect x="36.4505%" y="629" width="0.1016%" height="15" fill="rgb(211,197,16)" fg:x="3586" fg:w="10"/><text x="36.7005%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.10%)</title><rect x="36.4505%" y="613" width="0.1016%" height="15" fill="rgb(243,99,51)" fg:x="3586" fg:w="10"/><text x="36.7005%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (67 samples, 0.68%)</title><rect x="36.5521%" y="645" width="0.6810%" height="15" fill="rgb(215,123,29)" fg:x="3596" fg:w="67"/><text x="36.8021%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.68%)</title><rect x="36.5521%" y="629" width="0.6810%" height="15" fill="rgb(239,186,37)" fg:x="3596" fg:w="67"/><text x="36.8021%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (58 samples, 0.59%)</title><rect x="36.6436%" y="613" width="0.5896%" height="15" fill="rgb(252,136,39)" fg:x="3605" fg:w="58"/><text x="36.8936%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.04%)</title><rect x="37.4161%" y="613" width="0.0407%" height="15" fill="rgb(223,213,32)" fg:x="3681" fg:w="4"/><text x="37.6661%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.04%)</title><rect x="37.4161%" y="597" width="0.0407%" height="15" fill="rgb(233,115,5)" fg:x="3681" fg:w="4"/><text x="37.6661%" y="607.50"></text></g><g><title>csv::byte_record::Bounds::add (28 samples, 0.28%)</title><rect x="37.2332%" y="645" width="0.2846%" height="15" fill="rgb(207,226,44)" fg:x="3663" fg:w="28"/><text x="37.4832%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.10%)</title><rect x="37.4161%" y="629" width="0.1016%" height="15" fill="rgb(208,126,0)" fg:x="3681" fg:w="10"/><text x="37.6661%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.06%)</title><rect x="37.4568%" y="613" width="0.0610%" height="15" fill="rgb(244,66,21)" fg:x="3685" fg:w="6"/><text x="37.7068%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.06%)</title><rect x="37.4568%" y="597" width="0.0610%" height="15" fill="rgb(222,97,12)" fg:x="3685" fg:w="6"/><text x="37.7068%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="629" width="0.0102%" height="15" fill="rgb(219,213,19)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="613" width="0.0102%" height="15" fill="rgb(252,169,30)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="597" width="0.0102%" height="15" fill="rgb(206,32,51)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="581" width="0.0102%" height="15" fill="rgb(250,172,42)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="565" width="0.0102%" height="15" fill="rgb(209,34,43)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="549" width="0.0102%" height="15" fill="rgb(223,11,35)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="533" width="0.0102%" height="15" fill="rgb(251,219,26)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="517" width="0.0102%" height="15" fill="rgb(231,119,3)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="37.6194%" y="501" width="0.0102%" height="15" fill="rgb(216,97,11)" fg:x="3701" fg:w="1"/><text x="37.8694%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.19%)</title><rect x="37.6296%" y="629" width="0.1931%" height="15" fill="rgb(223,59,9)" fg:x="3702" fg:w="19"/><text x="37.8796%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.02%)</title><rect x="37.8227%" y="629" width="0.0203%" height="15" fill="rgb(233,93,31)" fg:x="3721" fg:w="2"/><text x="38.0727%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="37.8736%" y="597" width="0.0305%" height="15" fill="rgb(239,81,33)" fg:x="3726" fg:w="3"/><text x="38.1236%" y="607.50"></text></g><g><title>csv::string_record::StringRecord::push_field (166 samples, 1.69%)</title><rect x="36.3082%" y="677" width="1.6873%" height="15" fill="rgb(213,120,34)" fg:x="3572" fg:w="166"/><text x="36.5582%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::push_field (166 samples, 1.69%)</title><rect x="36.3082%" y="661" width="1.6873%" height="15" fill="rgb(243,49,53)" fg:x="3572" fg:w="166"/><text x="36.5582%" y="671.50"></text></g><g><title>csv::byte_record::Bounds::end (47 samples, 0.48%)</title><rect x="37.5178%" y="645" width="0.4777%" height="15" fill="rgb(247,216,33)" fg:x="3691" fg:w="47"/><text x="37.7678%" y="655.50"></text></g><g><title>csv::byte_record::Bounds::ends (15 samples, 0.15%)</title><rect x="37.8431%" y="629" width="0.1525%" height="15" fill="rgb(226,26,14)" fg:x="3723" fg:w="15"/><text x="38.0931%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.12%)</title><rect x="37.8736%" y="613" width="0.1220%" height="15" fill="rgb(215,49,53)" fg:x="3726" fg:w="12"/><text x="38.1236%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.09%)</title><rect x="37.9040%" y="597" width="0.0915%" height="15" fill="rgb(245,162,40)" fg:x="3729" fg:w="9"/><text x="38.1540%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.09%)</title><rect x="37.9040%" y="581" width="0.0915%" height="15" fill="rgb(229,68,17)" fg:x="3729" fg:w="9"/><text x="38.1540%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.09%)</title><rect x="37.9040%" y="565" width="0.0915%" height="15" fill="rgb(213,182,10)" fg:x="3729" fg:w="9"/><text x="38.1540%" y="575.50"></text></g><g><title>csv::string_record::StringRecord::set_position (5 samples, 0.05%)</title><rect x="37.9955%" y="677" width="0.0508%" height="15" fill="rgb(245,125,30)" fg:x="3738" fg:w="5"/><text x="38.2455%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (5 samples, 0.05%)</title><rect x="37.9955%" y="661" width="0.0508%" height="15" fill="rgb(232,202,2)" fg:x="3738" fg:w="5"/><text x="38.2455%" y="671.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="38.4123%" y="549" width="0.0203%" height="15" fill="rgb(237,140,51)" fg:x="3779" fg:w="2"/><text x="38.6623%" y="559.50"></text></g><g><title>__GI___libc_malloc (49 samples, 0.50%)</title><rect x="38.1582%" y="565" width="0.4981%" height="15" fill="rgb(236,157,25)" fg:x="3754" fg:w="49"/><text x="38.4082%" y="575.50"></text></g><g><title>tcache_get (22 samples, 0.22%)</title><rect x="38.4326%" y="549" width="0.2236%" height="15" fill="rgb(219,209,0)" fg:x="3781" fg:w="22"/><text x="38.6826%" y="559.50"></text></g><g><title>__rdl_alloc (7 samples, 0.07%)</title><rect x="38.6562%" y="565" width="0.0712%" height="15" fill="rgb(240,116,54)" fg:x="3803" fg:w="7"/><text x="38.9062%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.07%)</title><rect x="38.6562%" y="549" width="0.0712%" height="15" fill="rgb(216,10,36)" fg:x="3803" fg:w="7"/><text x="38.9062%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (68 samples, 0.69%)</title><rect x="38.0667%" y="645" width="0.6912%" height="15" fill="rgb(222,72,44)" fg:x="3745" fg:w="68"/><text x="38.3167%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (59 samples, 0.60%)</title><rect x="38.1582%" y="629" width="0.5997%" height="15" fill="rgb(232,159,9)" fg:x="3754" fg:w="59"/><text x="38.4082%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.60%)</title><rect x="38.1582%" y="613" width="0.5997%" height="15" fill="rgb(210,39,32)" fg:x="3754" fg:w="59"/><text x="38.4082%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 0.60%)</title><rect x="38.1582%" y="597" width="0.5997%" height="15" fill="rgb(216,194,45)" fg:x="3754" fg:w="59"/><text x="38.4082%" y="607.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.60%)</title><rect x="38.1582%" y="581" width="0.5997%" height="15" fill="rgb(218,18,35)" fg:x="3754" fg:w="59"/><text x="38.4082%" y="591.50"></text></g><g><title>__rust_alloc (3 samples, 0.03%)</title><rect x="38.7274%" y="565" width="0.0305%" height="15" fill="rgb(207,83,51)" fg:x="3810" fg:w="3"/><text x="38.9774%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.7235%" y="501" width="0.0508%" height="15" fill="rgb(225,63,43)" fg:x="3908" fg:w="5"/><text x="39.9735%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.7235%" y="485" width="0.0508%" height="15" fill="rgb(207,57,36)" fg:x="3908" fg:w="5"/><text x="39.9735%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.7235%" y="469" width="0.0508%" height="15" fill="rgb(216,99,33)" fg:x="3908" fg:w="5"/><text x="39.9735%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.7235%" y="453" width="0.0508%" height="15" fill="rgb(225,42,16)" fg:x="3908" fg:w="5"/><text x="39.9735%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.7235%" y="437" width="0.0508%" height="15" fill="rgb(220,201,45)" fg:x="3908" fg:w="5"/><text x="39.9735%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="421" width="0.0407%" height="15" fill="rgb(225,33,4)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="405" width="0.0407%" height="15" fill="rgb(224,33,50)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="389" width="0.0407%" height="15" fill="rgb(246,198,51)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="373" width="0.0407%" height="15" fill="rgb(205,22,4)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="357" width="0.0407%" height="15" fill="rgb(206,3,8)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="341" width="0.0407%" height="15" fill="rgb(251,23,15)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="325" width="0.0407%" height="15" fill="rgb(252,88,28)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="309" width="0.0407%" height="15" fill="rgb(212,127,14)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="39.7337%" y="293" width="0.0407%" height="15" fill="rgb(247,145,37)" fg:x="3909" fg:w="4"/><text x="39.9837%" y="303.50"></text></g><g><title>__libc_calloc (95 samples, 0.97%)</title><rect x="38.8494%" y="533" width="0.9656%" height="15" fill="rgb(209,117,53)" fg:x="3822" fg:w="95"/><text x="39.0994%" y="543.50"></text></g><g><title>_int_malloc (59 samples, 0.60%)</title><rect x="39.2153%" y="517" width="0.5997%" height="15" fill="rgb(212,90,42)" fg:x="3858" fg:w="59"/><text x="39.4653%" y="527.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="39.7743%" y="501" width="0.0407%" height="15" fill="rgb(218,164,37)" fg:x="3913" fg:w="4"/><text x="40.0243%" y="511.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.04%)</title><rect x="39.8150%" y="533" width="0.0407%" height="15" fill="rgb(246,65,34)" fg:x="3917" fg:w="4"/><text x="40.0650%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (3 samples, 0.03%)</title><rect x="39.8252%" y="517" width="0.0305%" height="15" fill="rgb(231,100,33)" fg:x="3918" fg:w="3"/><text x="40.0752%" y="527.50"></text></g><g><title>alloc::vec::from_elem (115 samples, 1.17%)</title><rect x="38.7579%" y="645" width="1.1689%" height="15" fill="rgb(228,126,14)" fg:x="3813" fg:w="115"/><text x="39.0079%" y="655.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (115 samples, 1.17%)</title><rect x="38.7579%" y="629" width="1.1689%" height="15" fill="rgb(215,173,21)" fg:x="3813" fg:w="115"/><text x="39.0079%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (113 samples, 1.15%)</title><rect x="38.7782%" y="613" width="1.1486%" height="15" fill="rgb(210,6,40)" fg:x="3815" fg:w="113"/><text x="39.0282%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (113 samples, 1.15%)</title><rect x="38.7782%" y="597" width="1.1486%" height="15" fill="rgb(212,48,18)" fg:x="3815" fg:w="113"/><text x="39.0282%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (113 samples, 1.15%)</title><rect x="38.7782%" y="581" width="1.1486%" height="15" fill="rgb(230,214,11)" fg:x="3815" fg:w="113"/><text x="39.0282%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (113 samples, 1.15%)</title><rect x="38.7782%" y="565" width="1.1486%" height="15" fill="rgb(254,105,39)" fg:x="3815" fg:w="113"/><text x="39.0282%" y="575.50"></text></g><g><title>alloc::alloc::alloc_zeroed (106 samples, 1.08%)</title><rect x="38.8494%" y="549" width="1.0775%" height="15" fill="rgb(245,158,5)" fg:x="3822" fg:w="106"/><text x="39.0994%" y="559.50"></text></g><g><title>__rust_alloc_zeroed (7 samples, 0.07%)</title><rect x="39.8557%" y="533" width="0.0712%" height="15" fill="rgb(249,208,11)" fg:x="3921" fg:w="7"/><text x="40.1057%" y="543.50"></text></g><g><title>__libc_calloc (100 samples, 1.02%)</title><rect x="39.9370%" y="517" width="1.0165%" height="15" fill="rgb(210,39,28)" fg:x="3929" fg:w="100"/><text x="40.1870%" y="527.50"></text></g><g><title>_int_malloc (39 samples, 0.40%)</title><rect x="40.5570%" y="501" width="0.3964%" height="15" fill="rgb(211,56,53)" fg:x="3990" fg:w="39"/><text x="40.8070%" y="511.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="40.9433%" y="485" width="0.0102%" height="15" fill="rgb(226,201,30)" fg:x="4028" fg:w="1"/><text x="41.1933%" y="495.50"></text></g><g><title>__rdl_alloc_zeroed (3 samples, 0.03%)</title><rect x="40.9534%" y="517" width="0.0305%" height="15" fill="rgb(239,101,34)" fg:x="4029" fg:w="3"/><text x="41.2034%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.01%)</title><rect x="40.9738%" y="501" width="0.0102%" height="15" fill="rgb(226,209,5)" fg:x="4031" fg:w="1"/><text x="41.2238%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (105 samples, 1.07%)</title><rect x="39.9268%" y="565" width="1.0673%" height="15" fill="rgb(250,105,47)" fg:x="3928" fg:w="105"/><text x="40.1768%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (105 samples, 1.07%)</title><rect x="39.9268%" y="549" width="1.0673%" height="15" fill="rgb(230,72,3)" fg:x="3928" fg:w="105"/><text x="40.1768%" y="559.50"></text></g><g><title>alloc::alloc::alloc_zeroed (105 samples, 1.07%)</title><rect x="39.9268%" y="533" width="1.0673%" height="15" fill="rgb(232,218,39)" fg:x="3928" fg:w="105"/><text x="40.1768%" y="543.50"></text></g><g><title>__rust_alloc_zeroed (1 samples, 0.01%)</title><rect x="40.9839%" y="517" width="0.0102%" height="15" fill="rgb(248,166,6)" fg:x="4032" fg:w="1"/><text x="41.2339%" y="527.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (2,843 samples, 28.90%)</title><rect x="12.1061%" y="709" width="28.8982%" height="15" fill="rgb(247,89,20)" fg:x="1191" fg:w="2843"/><text x="12.3561%" y="719.50">csv::reader::Reader&lt;R&gt;::read_record</text></g><g><title>csv::string_record::StringRecord::trim (888 samples, 9.03%)</title><rect x="31.9780%" y="693" width="9.0262%" height="15" fill="rgb(248,130,54)" fg:x="3146" fg:w="888"/><text x="32.2280%" y="703.50">csv::string_r..</text></g><g><title>csv::string_record::StringRecord::with_capacity (291 samples, 2.96%)</title><rect x="38.0464%" y="677" width="2.9579%" height="15" fill="rgb(234,196,4)" fg:x="3743" fg:w="291"/><text x="38.2964%" y="687.50">csv..</text></g><g><title>csv::byte_record::ByteRecord::with_capacity (291 samples, 2.96%)</title><rect x="38.0464%" y="661" width="2.9579%" height="15" fill="rgb(250,143,31)" fg:x="3743" fg:w="291"/><text x="38.2964%" y="671.50">csv..</text></g><g><title>csv::byte_record::Bounds::with_capacity (106 samples, 1.08%)</title><rect x="39.9268%" y="645" width="1.0775%" height="15" fill="rgb(211,110,34)" fg:x="3928" fg:w="106"/><text x="40.1768%" y="655.50"></text></g><g><title>alloc::vec::from_elem (106 samples, 1.08%)</title><rect x="39.9268%" y="629" width="1.0775%" height="15" fill="rgb(215,124,48)" fg:x="3928" fg:w="106"/><text x="40.1768%" y="639.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (106 samples, 1.08%)</title><rect x="39.9268%" y="613" width="1.0775%" height="15" fill="rgb(216,46,13)" fg:x="3928" fg:w="106"/><text x="40.1768%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (106 samples, 1.08%)</title><rect x="39.9268%" y="597" width="1.0775%" height="15" fill="rgb(205,184,25)" fg:x="3928" fg:w="106"/><text x="40.1768%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (106 samples, 1.08%)</title><rect x="39.9268%" y="581" width="1.0775%" height="15" fill="rgb(228,1,10)" fg:x="3928" fg:w="106"/><text x="40.1768%" y="591.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.01%)</title><rect x="40.9941%" y="565" width="0.0102%" height="15" fill="rgb(213,116,27)" fg:x="4033" fg:w="1"/><text x="41.2441%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.01%)</title><rect x="40.9941%" y="549" width="0.0102%" height="15" fill="rgb(241,95,50)" fg:x="4033" fg:w="1"/><text x="41.2441%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.01%)</title><rect x="40.9941%" y="533" width="0.0102%" height="15" fill="rgb(238,48,32)" fg:x="4033" fg:w="1"/><text x="41.2441%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="40.9941%" y="517" width="0.0102%" height="15" fill="rgb(235,113,49)" fg:x="4033" fg:w="1"/><text x="41.2441%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.04%)</title><rect x="41.0856%" y="565" width="0.0407%" height="15" fill="rgb(205,127,43)" fg:x="4042" fg:w="4"/><text x="41.3356%" y="575.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.04%)</title><rect x="41.0856%" y="549" width="0.0407%" height="15" fill="rgb(250,162,2)" fg:x="4042" fg:w="4"/><text x="41.3356%" y="559.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.04%)</title><rect x="41.0856%" y="533" width="0.0407%" height="15" fill="rgb(220,13,41)" fg:x="4042" fg:w="4"/><text x="41.3356%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.04%)</title><rect x="41.0856%" y="517" width="0.0407%" height="15" fill="rgb(249,221,25)" fg:x="4042" fg:w="4"/><text x="41.3356%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.13%)</title><rect x="41.1364%" y="549" width="0.1321%" height="15" fill="rgb(215,208,19)" fg:x="4047" fg:w="13"/><text x="41.3864%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="41.3092%" y="517" width="0.0305%" height="15" fill="rgb(236,175,2)" fg:x="4064" fg:w="3"/><text x="41.5592%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (27 samples, 0.27%)</title><rect x="41.0754%" y="677" width="0.2744%" height="15" fill="rgb(241,52,2)" fg:x="4041" fg:w="27"/><text x="41.3254%" y="687.50"></text></g><g><title>csv::deserializer::deserialize_string_record::{{closure}} (26 samples, 0.26%)</title><rect x="41.0856%" y="661" width="0.2643%" height="15" fill="rgb(248,140,14)" fg:x="4042" fg:w="26"/><text x="41.3356%" y="671.50"></text></g><g><title>csv::string_record::StringRecord::iter (26 samples, 0.26%)</title><rect x="41.0856%" y="645" width="0.2643%" height="15" fill="rgb(253,22,42)" fg:x="4042" fg:w="26"/><text x="41.3356%" y="655.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (26 samples, 0.26%)</title><rect x="41.0856%" y="629" width="0.2643%" height="15" fill="rgb(234,61,47)" fg:x="4042" fg:w="26"/><text x="41.3356%" y="639.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (26 samples, 0.26%)</title><rect x="41.0856%" y="613" width="0.2643%" height="15" fill="rgb(208,226,15)" fg:x="4042" fg:w="26"/><text x="41.3356%" y="623.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (26 samples, 0.26%)</title><rect x="41.0856%" y="597" width="0.2643%" height="15" fill="rgb(217,221,4)" fg:x="4042" fg:w="26"/><text x="41.3356%" y="607.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (26 samples, 0.26%)</title><rect x="41.0856%" y="581" width="0.2643%" height="15" fill="rgb(212,174,34)" fg:x="4042" fg:w="26"/><text x="41.3356%" y="591.50"></text></g><g><title>csv::byte_record::Bounds::end (22 samples, 0.22%)</title><rect x="41.1262%" y="565" width="0.2236%" height="15" fill="rgb(253,83,4)" fg:x="4046" fg:w="22"/><text x="41.3762%" y="575.50"></text></g><g><title>csv::byte_record::Bounds::ends (8 samples, 0.08%)</title><rect x="41.2686%" y="549" width="0.0813%" height="15" fill="rgb(250,195,49)" fg:x="4060" fg:w="8"/><text x="41.5186%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.04%)</title><rect x="41.3092%" y="533" width="0.0407%" height="15" fill="rgb(241,192,25)" fg:x="4064" fg:w="4"/><text x="41.5592%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="41.3397%" y="517" width="0.0102%" height="15" fill="rgb(208,124,10)" fg:x="4067" fg:w="1"/><text x="41.5897%" y="527.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="41.3397%" y="501" width="0.0102%" height="15" fill="rgb(222,33,0)" fg:x="4067" fg:w="1"/><text x="41.5897%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="41.3397%" y="485" width="0.0102%" height="15" fill="rgb(234,209,28)" fg:x="4067" fg:w="1"/><text x="41.5897%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (59 samples, 0.60%)</title><rect x="41.3499%" y="677" width="0.5997%" height="15" fill="rgb(224,11,23)" fg:x="4068" fg:w="59"/><text x="41.5999%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="41.9597%" y="597" width="0.0102%" height="15" fill="rgb(232,99,1)" fg:x="4128" fg:w="1"/><text x="42.2097%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="41.9597%" y="581" width="0.0102%" height="15" fill="rgb(237,95,45)" fg:x="4128" fg:w="1"/><text x="42.2097%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.05%)</title><rect x="41.9699%" y="581" width="0.0508%" height="15" fill="rgb(208,109,11)" fg:x="4129" fg:w="5"/><text x="42.2199%" y="591.50"></text></g><g><title>csv::string_record::StringRecord::iter (11 samples, 0.11%)</title><rect x="41.9496%" y="677" width="0.1118%" height="15" fill="rgb(216,190,48)" fg:x="4127" fg:w="11"/><text x="42.1996%" y="687.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (11 samples, 0.11%)</title><rect x="41.9496%" y="661" width="0.1118%" height="15" fill="rgb(251,171,36)" fg:x="4127" fg:w="11"/><text x="42.1996%" y="671.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (11 samples, 0.11%)</title><rect x="41.9496%" y="645" width="0.1118%" height="15" fill="rgb(230,62,22)" fg:x="4127" fg:w="11"/><text x="42.1996%" y="655.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (11 samples, 0.11%)</title><rect x="41.9496%" y="629" width="0.1118%" height="15" fill="rgb(225,114,35)" fg:x="4127" fg:w="11"/><text x="42.1996%" y="639.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (11 samples, 0.11%)</title><rect x="41.9496%" y="613" width="0.1118%" height="15" fill="rgb(215,118,42)" fg:x="4127" fg:w="11"/><text x="42.1996%" y="623.50"></text></g><g><title>csv::byte_record::Bounds::end (9 samples, 0.09%)</title><rect x="41.9699%" y="597" width="0.0915%" height="15" fill="rgb(243,119,21)" fg:x="4129" fg:w="9"/><text x="42.2199%" y="607.50"></text></g><g><title>csv::byte_record::Bounds::ends (4 samples, 0.04%)</title><rect x="42.0207%" y="581" width="0.0407%" height="15" fill="rgb(252,177,53)" fg:x="4134" fg:w="4"/><text x="42.2707%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (80 samples, 0.81%)</title><rect x="43.2608%" y="597" width="0.8132%" height="15" fill="rgb(237,209,29)" fg:x="4256" fg:w="80"/><text x="43.5108%" y="607.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (80 samples, 0.81%)</title><rect x="43.2608%" y="581" width="0.8132%" height="15" fill="rgb(212,65,23)" fg:x="4256" fg:w="80"/><text x="43.5108%" y="591.50"></text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (80 samples, 0.81%)</title><rect x="43.2608%" y="565" width="0.8132%" height="15" fill="rgb(230,222,46)" fg:x="4256" fg:w="80"/><text x="43.5108%" y="575.50"></text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (80 samples, 0.81%)</title><rect x="43.2608%" y="549" width="0.8132%" height="15" fill="rgb(215,135,32)" fg:x="4256" fg:w="80"/><text x="43.5108%" y="559.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_bytes (80 samples, 0.81%)</title><rect x="43.2608%" y="533" width="0.8132%" height="15" fill="rgb(246,101,22)" fg:x="4256" fg:w="80"/><text x="43.5108%" y="543.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (79 samples, 0.80%)</title><rect x="43.2710%" y="517" width="0.8030%" height="15" fill="rgb(206,107,13)" fg:x="4257" fg:w="79"/><text x="43.5210%" y="527.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::has_headers (7 samples, 0.07%)</title><rect x="44.0740%" y="597" width="0.0712%" height="15" fill="rgb(250,100,44)" fg:x="4336" fg:w="7"/><text x="44.3240%" y="607.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::has_headers (7 samples, 0.07%)</title><rect x="44.0740%" y="581" width="0.0712%" height="15" fill="rgb(231,147,38)" fg:x="4336" fg:w="7"/><text x="44.3240%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (7 samples, 0.07%)</title><rect x="44.0740%" y="565" width="0.0712%" height="15" fill="rgb(229,8,40)" fg:x="4336" fg:w="7"/><text x="44.3240%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.07%)</title><rect x="44.8465%" y="485" width="0.0712%" height="15" fill="rgb(221,135,30)" fg:x="4412" fg:w="7"/><text x="45.0965%" y="495.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (102 samples, 1.04%)</title><rect x="44.1452%" y="597" width="1.0368%" height="15" fill="rgb(249,193,18)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="607.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (102 samples, 1.04%)</title><rect x="44.1452%" y="581" width="1.0368%" height="15" fill="rgb(209,133,39)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="591.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (102 samples, 1.04%)</title><rect x="44.1452%" y="565" width="1.0368%" height="15" fill="rgb(232,100,14)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (102 samples, 1.04%)</title><rect x="44.1452%" y="549" width="1.0368%" height="15" fill="rgb(224,185,1)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="559.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::{{closure}} (102 samples, 1.04%)</title><rect x="44.1452%" y="533" width="1.0368%" height="15" fill="rgb(223,139,8)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="543.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 1.04%)</title><rect x="44.1452%" y="517" width="1.0368%" height="15" fill="rgb(232,213,38)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="527.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 1.04%)</title><rect x="44.1452%" y="501" width="1.0368%" height="15" fill="rgb(207,94,22)" fg:x="4343" fg:w="102"/><text x="44.3952%" y="511.50"></text></g><g><title>csv::byte_record::Bounds::ends (26 samples, 0.26%)</title><rect x="44.9177%" y="485" width="0.2643%" height="15" fill="rgb(219,183,54)" fg:x="4419" fg:w="26"/><text x="45.1677%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.12%)</title><rect x="45.0600%" y="469" width="0.1220%" height="15" fill="rgb(216,185,54)" fg:x="4433" fg:w="12"/><text x="45.3100%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.12%)</title><rect x="45.0600%" y="453" width="0.1220%" height="15" fill="rgb(254,217,39)" fg:x="4433" fg:w="12"/><text x="45.3100%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.12%)</title><rect x="45.0600%" y="437" width="0.1220%" height="15" fill="rgb(240,178,23)" fg:x="4433" fg:w="12"/><text x="45.3100%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.12%)</title><rect x="45.0600%" y="421" width="0.1220%" height="15" fill="rgb(218,11,47)" fg:x="4433" fg:w="12"/><text x="45.3100%" y="431.50"></text></g><g><title>serde::de::MapAccess::next_key (201 samples, 2.04%)</title><rect x="43.2608%" y="629" width="2.0431%" height="15" fill="rgb(218,51,51)" fg:x="4256" fg:w="201"/><text x="43.5108%" y="639.50">s..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (201 samples, 2.04%)</title><rect x="43.2608%" y="613" width="2.0431%" height="15" fill="rgb(238,126,27)" fg:x="4256" fg:w="201"/><text x="43.5108%" y="623.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (12 samples, 0.12%)</title><rect x="45.1819%" y="597" width="0.1220%" height="15" fill="rgb(249,202,22)" fg:x="4445" fg:w="12"/><text x="45.4319%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.05%)</title><rect x="45.4767%" y="501" width="0.0508%" height="15" fill="rgb(254,195,49)" fg:x="4474" fg:w="5"/><text x="45.7267%" y="511.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (5 samples, 0.05%)</title><rect x="45.4767%" y="485" width="0.0508%" height="15" fill="rgb(208,123,14)" fg:x="4474" fg:w="5"/><text x="45.7267%" y="495.50"></text></g><g><title>&lt;serde::de::value::StrDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (5 samples, 0.05%)</title><rect x="45.4767%" y="469" width="0.0508%" height="15" fill="rgb(224,200,8)" fg:x="4474" fg:w="5"/><text x="45.7267%" y="479.50"></text></g><g><title>&lt;serde::de::value::StrDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.05%)</title><rect x="45.4767%" y="453" width="0.0508%" height="15" fill="rgb(217,61,36)" fg:x="4474" fg:w="5"/><text x="45.7267%" y="463.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (5 samples, 0.05%)</title><rect x="45.4767%" y="437" width="0.0508%" height="15" fill="rgb(206,35,45)" fg:x="4474" fg:w="5"/><text x="45.7267%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.03%)</title><rect x="45.4971%" y="421" width="0.0305%" height="15" fill="rgb(217,65,33)" fg:x="4476" fg:w="3"/><text x="45.7471%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.03%)</title><rect x="45.4971%" y="405" width="0.0305%" height="15" fill="rgb(222,158,48)" fg:x="4476" fg:w="3"/><text x="45.7471%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.03%)</title><rect x="45.4971%" y="389" width="0.0305%" height="15" fill="rgb(254,2,54)" fg:x="4476" fg:w="3"/><text x="45.7471%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.03%)</title><rect x="45.4971%" y="373" width="0.0305%" height="15" fill="rgb(250,143,38)" fg:x="4476" fg:w="3"/><text x="45.7471%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="45.5885%" y="421" width="0.0102%" height="15" fill="rgb(248,25,0)" fg:x="4485" fg:w="1"/><text x="45.8385%" y="431.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="45.5377%" y="453" width="0.0712%" height="15" fill="rgb(206,152,27)" fg:x="4480" fg:w="7"/><text x="45.7877%" y="463.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="45.5377%" y="437" width="0.0712%" height="15" fill="rgb(240,77,30)" fg:x="4480" fg:w="7"/><text x="45.7877%" y="447.50"></text></g><g><title>csv::byte_record::Bounds::ends (1 samples, 0.01%)</title><rect x="45.5987%" y="421" width="0.0102%" height="15" fill="rgb(231,5,3)" fg:x="4486" fg:w="1"/><text x="45.8487%" y="431.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (10 samples, 0.10%)</title><rect x="45.5275%" y="501" width="0.1016%" height="15" fill="rgb(207,226,32)" fg:x="4479" fg:w="10"/><text x="45.7775%" y="511.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (10 samples, 0.10%)</title><rect x="45.5275%" y="485" width="0.1016%" height="15" fill="rgb(222,207,47)" fg:x="4479" fg:w="10"/><text x="45.7775%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="45.5377%" y="469" width="0.0915%" height="15" fill="rgb(229,115,45)" fg:x="4480" fg:w="9"/><text x="45.7877%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.02%)</title><rect x="45.6089%" y="453" width="0.0203%" height="15" fill="rgb(224,191,6)" fg:x="4487" fg:w="2"/><text x="45.8589%" y="463.50"></text></g><g><title>core::mem::take (2 samples, 0.02%)</title><rect x="45.6089%" y="437" width="0.0203%" height="15" fill="rgb(230,227,24)" fg:x="4487" fg:w="2"/><text x="45.8589%" y="447.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="45.6089%" y="421" width="0.0203%" height="15" fill="rgb(228,80,19)" fg:x="4487" fg:w="2"/><text x="45.8589%" y="431.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="45.6089%" y="405" width="0.0203%" height="15" fill="rgb(247,229,0)" fg:x="4487" fg:w="2"/><text x="45.8589%" y="415.50"></text></g><g><title>resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize (45 samples, 0.46%)</title><rect x="45.3039%" y="581" width="0.4574%" height="15" fill="rgb(237,194,15)" fg:x="4457" fg:w="45"/><text x="45.5539%" y="591.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_enum (45 samples, 0.46%)</title><rect x="45.3039%" y="565" width="0.4574%" height="15" fill="rgb(219,203,20)" fg:x="4457" fg:w="45"/><text x="45.5539%" y="575.50"></text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (45 samples, 0.46%)</title><rect x="45.3039%" y="549" width="0.4574%" height="15" fill="rgb(234,128,8)" fg:x="4457" fg:w="45"/><text x="45.5539%" y="559.50"></text></g><g><title>serde::de::EnumAccess::variant (29 samples, 0.29%)</title><rect x="45.4666%" y="533" width="0.2948%" height="15" fill="rgb(248,202,8)" fg:x="4473" fg:w="29"/><text x="45.7166%" y="543.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (29 samples, 0.29%)</title><rect x="45.4666%" y="517" width="0.2948%" height="15" fill="rgb(206,104,37)" fg:x="4473" fg:w="29"/><text x="45.7166%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.13%)</title><rect x="45.6292%" y="501" width="0.1321%" height="15" fill="rgb(223,8,27)" fg:x="4489" fg:w="13"/><text x="45.8792%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.03%)</title><rect x="45.7817%" y="501" width="0.0305%" height="15" fill="rgb(216,217,28)" fg:x="4504" fg:w="3"/><text x="46.0317%" y="511.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::peek_field (18 samples, 0.18%)</title><rect x="45.7817%" y="549" width="0.1830%" height="15" fill="rgb(249,199,1)" fg:x="4504" fg:w="18"/><text x="46.0317%" y="559.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::peek_field (18 samples, 0.18%)</title><rect x="45.7817%" y="533" width="0.1830%" height="15" fill="rgb(240,85,17)" fg:x="4504" fg:w="18"/><text x="46.0317%" y="543.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (18 samples, 0.18%)</title><rect x="45.7817%" y="517" width="0.1830%" height="15" fill="rgb(206,108,45)" fg:x="4504" fg:w="18"/><text x="46.0317%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (15 samples, 0.15%)</title><rect x="45.8122%" y="501" width="0.1525%" height="15" fill="rgb(245,210,41)" fg:x="4507" fg:w="15"/><text x="46.0622%" y="511.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (10 samples, 0.10%)</title><rect x="45.8630%" y="485" width="0.1016%" height="15" fill="rgb(206,13,37)" fg:x="4512" fg:w="10"/><text x="46.1130%" y="495.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.10%)</title><rect x="45.8630%" y="469" width="0.1016%" height="15" fill="rgb(250,61,18)" fg:x="4512" fg:w="10"/><text x="46.1130%" y="479.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.10%)</title><rect x="45.8630%" y="453" width="0.1016%" height="15" fill="rgb(235,172,48)" fg:x="4512" fg:w="10"/><text x="46.1130%" y="463.50"></text></g><g><title>csv::byte_record::Bounds::ends (5 samples, 0.05%)</title><rect x="45.9138%" y="437" width="0.0508%" height="15" fill="rgb(249,201,17)" fg:x="4517" fg:w="5"/><text x="46.1638%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.05%)</title><rect x="45.9138%" y="421" width="0.0508%" height="15" fill="rgb(219,208,6)" fg:x="4517" fg:w="5"/><text x="46.1638%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.05%)</title><rect x="45.9138%" y="405" width="0.0508%" height="15" fill="rgb(248,31,23)" fg:x="4517" fg:w="5"/><text x="46.1638%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (8 samples, 0.08%)</title><rect x="45.9646%" y="533" width="0.0813%" height="15" fill="rgb(245,15,42)" fg:x="4522" fg:w="8"/><text x="46.2146%" y="543.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (7 samples, 0.07%)</title><rect x="46.0561%" y="501" width="0.0712%" height="15" fill="rgb(222,217,39)" fg:x="4531" fg:w="7"/><text x="46.3061%" y="511.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (7 samples, 0.07%)</title><rect x="46.0561%" y="485" width="0.0712%" height="15" fill="rgb(210,219,27)" fg:x="4531" fg:w="7"/><text x="46.3061%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="46.0968%" y="469" width="0.0305%" height="15" fill="rgb(252,166,36)" fg:x="4535" fg:w="3"/><text x="46.3468%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.03%)</title><rect x="46.0968%" y="453" width="0.0305%" height="15" fill="rgb(245,132,34)" fg:x="4535" fg:w="3"/><text x="46.3468%" y="463.50"></text></g><g><title>core::mem::take (3 samples, 0.03%)</title><rect x="46.0968%" y="437" width="0.0305%" height="15" fill="rgb(236,54,3)" fg:x="4535" fg:w="3"/><text x="46.3468%" y="447.50"></text></g><g><title>core::mem::replace (3 samples, 0.03%)</title><rect x="46.0968%" y="421" width="0.0305%" height="15" fill="rgb(241,173,43)" fg:x="4535" fg:w="3"/><text x="46.3468%" y="431.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="46.0968%" y="405" width="0.0305%" height="15" fill="rgb(215,190,9)" fg:x="4535" fg:w="3"/><text x="46.3468%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="48.9429%" y="405" width="0.0407%" height="15" fill="rgb(242,101,16)" fg:x="4815" fg:w="4"/><text x="49.1929%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="48.9429%" y="389" width="0.0407%" height="15" fill="rgb(223,190,21)" fg:x="4815" fg:w="4"/><text x="49.1929%" y="399.50"></text></g><g><title>arrayvec::ArrayVec&lt;A&gt;::new (3 samples, 0.03%)</title><rect x="48.9835%" y="405" width="0.0305%" height="15" fill="rgb(215,228,25)" fg:x="4819" fg:w="3"/><text x="49.2335%" y="415.50"></text></g><g><title>arrayvec::ArrayVec&lt;A&gt;::len (3 samples, 0.03%)</title><rect x="49.0242%" y="373" width="0.0305%" height="15" fill="rgb(225,36,22)" fg:x="4823" fg:w="3"/><text x="49.2742%" y="383.50"></text></g><g><title>&lt;u8 as arrayvec::array::Index&gt;::to_usize (3 samples, 0.03%)</title><rect x="49.0242%" y="357" width="0.0305%" height="15" fill="rgb(251,106,46)" fg:x="4823" fg:w="3"/><text x="49.2742%" y="367.50"></text></g><g><title>arrayvec::ArrayVec&lt;A&gt;::set_len (7 samples, 0.07%)</title><rect x="49.1055%" y="357" width="0.0712%" height="15" fill="rgb(208,90,1)" fg:x="4831" fg:w="7"/><text x="49.3555%" y="367.50"></text></g><g><title>arrayvec::ArrayVec&lt;A&gt;::push (42 samples, 0.43%)</title><rect x="49.0140%" y="405" width="0.4269%" height="15" fill="rgb(243,10,4)" fg:x="4822" fg:w="42"/><text x="49.2640%" y="415.50"></text></g><g><title>arrayvec::ArrayVec&lt;A&gt;::try_push (42 samples, 0.43%)</title><rect x="49.0140%" y="389" width="0.4269%" height="15" fill="rgb(212,137,27)" fg:x="4822" fg:w="42"/><text x="49.2640%" y="399.50"></text></g><g><title>arrayvec::ArrayVec&lt;A&gt;::push_unchecked (38 samples, 0.39%)</title><rect x="49.0547%" y="373" width="0.3863%" height="15" fill="rgb(231,220,49)" fg:x="4826" fg:w="38"/><text x="49.3047%" y="383.50"></text></g><g><title>core::ptr::write (26 samples, 0.26%)</title><rect x="49.1767%" y="357" width="0.2643%" height="15" fill="rgb(237,96,20)" fg:x="4838" fg:w="26"/><text x="49.4267%" y="367.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u32&gt;::from (12 samples, 0.12%)</title><rect x="49.4409%" y="405" width="0.1220%" height="15" fill="rgb(239,229,30)" fg:x="4864" fg:w="12"/><text x="49.6909%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (3 samples, 0.03%)</title><rect x="49.5629%" y="405" width="0.0305%" height="15" fill="rgb(219,65,33)" fg:x="4876" fg:w="3"/><text x="49.8129%" y="415.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (26 samples, 0.26%)</title><rect x="49.5934%" y="405" width="0.2643%" height="15" fill="rgb(243,134,7)" fg:x="4879" fg:w="26"/><text x="49.8434%" y="415.50"></text></g><g><title>rust_decimal::decimal::flags (3 samples, 0.03%)</title><rect x="49.8272%" y="389" width="0.0305%" height="15" fill="rgb(216,177,54)" fg:x="4902" fg:w="3"/><text x="50.0772%" y="399.50"></text></g><g><title>rust_decimal::ops::array::add_by_internal (181 samples, 1.84%)</title><rect x="49.8577%" y="405" width="1.8398%" height="15" fill="rgb(211,160,20)" fg:x="4905" fg:w="181"/><text x="50.1077%" y="415.50">r..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.04%)</title><rect x="51.6568%" y="389" width="0.0407%" height="15" fill="rgb(239,85,39)" fg:x="5082" fg:w="4"/><text x="51.9068%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.04%)</title><rect x="51.6568%" y="373" width="0.0407%" height="15" fill="rgb(232,125,22)" fg:x="5082" fg:w="4"/><text x="51.9068%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="357" width="0.0102%" height="15" fill="rgb(244,57,34)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="341" width="0.0102%" height="15" fill="rgb(214,203,32)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="325" width="0.0102%" height="15" fill="rgb(207,58,43)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="309" width="0.0102%" height="15" fill="rgb(215,193,15)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="293" width="0.0102%" height="15" fill="rgb(232,15,44)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="277" width="0.0102%" height="15" fill="rgb(212,3,48)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="261" width="0.0102%" height="15" fill="rgb(218,128,7)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="245" width="0.0102%" height="15" fill="rgb(226,216,39)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="51.6873%" y="229" width="0.0102%" height="15" fill="rgb(243,47,51)" fg:x="5085" fg:w="1"/><text x="51.9373%" y="239.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::str::traits::FromStr&gt;::from_str (625 samples, 6.35%)</title><rect x="46.1679%" y="437" width="6.3529%" height="15" fill="rgb(241,183,40)" fg:x="4542" fg:w="625"/><text x="46.4179%" y="447.50">&lt;rust_de..</text></g><g><title>rust_decimal::str::parse_str_radix_10 (621 samples, 6.31%)</title><rect x="46.2086%" y="421" width="6.3123%" height="15" fill="rgb(231,217,32)" fg:x="4546" fg:w="621"/><text x="46.4586%" y="431.50">rust_dec..</text></g><g><title>rust_decimal::ops::array::mul_by_10 (81 samples, 0.82%)</title><rect x="51.6975%" y="405" width="0.8233%" height="15" fill="rgb(229,61,38)" fg:x="5086" fg:w="81"/><text x="51.9475%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.13%)</title><rect x="52.5208%" y="437" width="0.1321%" height="15" fill="rgb(225,210,5)" fg:x="5167" fg:w="13"/><text x="52.7708%" y="447.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (681 samples, 6.92%)</title><rect x="45.9646%" y="549" width="6.9221%" height="15" fill="rgb(231,79,45)" fg:x="4522" fg:w="681"/><text x="46.2146%" y="559.50">&lt;serde::d..</text></g><g><title>rust_decimal::serde::&lt;impl serde::de::Deserialize for rust_decimal::decimal::Decimal&gt;::deserialize (673 samples, 6.84%)</title><rect x="46.0459%" y="533" width="6.8408%" height="15" fill="rgb(224,100,7)" fg:x="4530" fg:w="673"/><text x="46.2959%" y="543.50">rust_deci..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_str (673 samples, 6.84%)</title><rect x="46.0459%" y="517" width="6.8408%" height="15" fill="rgb(241,198,18)" fg:x="4530" fg:w="673"/><text x="46.2959%" y="527.50">&lt;&amp;mut csv..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (665 samples, 6.76%)</title><rect x="46.1273%" y="501" width="6.7595%" height="15" fill="rgb(252,97,53)" fg:x="4538" fg:w="665"/><text x="46.3773%" y="511.50">core::res..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_str::{{closure}} (665 samples, 6.76%)</title><rect x="46.1273%" y="485" width="6.7595%" height="15" fill="rgb(220,88,7)" fg:x="4538" fg:w="665"/><text x="46.3773%" y="495.50">&lt;&amp;mut csv..</text></g><g><title>serde::de::Visitor::visit_borrowed_str (665 samples, 6.76%)</title><rect x="46.1273%" y="469" width="6.7595%" height="15" fill="rgb(213,176,14)" fg:x="4538" fg:w="665"/><text x="46.3773%" y="479.50">serde::de..</text></g><g><title>&lt;rust_decimal::serde::DecimalVisitor as serde::de::Visitor&gt;::visit_str (662 samples, 6.73%)</title><rect x="46.1578%" y="453" width="6.7290%" height="15" fill="rgb(246,73,7)" fg:x="4541" fg:w="662"/><text x="46.4078%" y="463.50">&lt;rust_dec..</text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (23 samples, 0.23%)</title><rect x="52.6530%" y="437" width="0.2338%" height="15" fill="rgb(245,64,36)" fg:x="5180" fg:w="23"/><text x="52.9030%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (703 samples, 7.15%)</title><rect x="45.7613%" y="581" width="7.1458%" height="15" fill="rgb(245,80,10)" fg:x="4502" fg:w="703"/><text x="46.0113%" y="591.50">serde::de:..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (701 samples, 7.13%)</title><rect x="45.7817%" y="565" width="7.1254%" height="15" fill="rgb(232,107,50)" fg:x="4504" fg:w="701"/><text x="46.0317%" y="575.50">&lt;&amp;mut csv:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (2 samples, 0.02%)</title><rect x="52.8868%" y="549" width="0.0203%" height="15" fill="rgb(253,3,0)" fg:x="5203" fg:w="2"/><text x="53.1368%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.04%)</title><rect x="53.0697%" y="469" width="0.0407%" height="15" fill="rgb(212,99,53)" fg:x="5221" fg:w="4"/><text x="53.3197%" y="479.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.14%)</title><rect x="52.9884%" y="501" width="0.1423%" height="15" fill="rgb(249,111,54)" fg:x="5213" fg:w="14"/><text x="53.2384%" y="511.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.14%)</title><rect x="52.9884%" y="485" width="0.1423%" height="15" fill="rgb(249,55,30)" fg:x="5213" fg:w="14"/><text x="53.2384%" y="495.50"></text></g><g><title>csv::byte_record::Bounds::ends (2 samples, 0.02%)</title><rect x="53.1104%" y="469" width="0.0203%" height="15" fill="rgb(237,47,42)" fg:x="5225" fg:w="2"/><text x="53.3604%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="53.1104%" y="453" width="0.0203%" height="15" fill="rgb(211,20,18)" fg:x="5225" fg:w="2"/><text x="53.3604%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="53.1104%" y="437" width="0.0203%" height="15" fill="rgb(231,203,46)" fg:x="5225" fg:w="2"/><text x="53.3604%" y="447.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (26 samples, 0.26%)</title><rect x="52.9071%" y="549" width="0.2643%" height="15" fill="rgb(237,142,3)" fg:x="5205" fg:w="26"/><text x="53.1571%" y="559.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (26 samples, 0.26%)</title><rect x="52.9071%" y="533" width="0.2643%" height="15" fill="rgb(241,107,1)" fg:x="5205" fg:w="26"/><text x="53.1571%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.24%)</title><rect x="52.9274%" y="517" width="0.2440%" height="15" fill="rgb(229,83,13)" fg:x="5207" fg:w="24"/><text x="53.1774%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (4 samples, 0.04%)</title><rect x="53.1307%" y="501" width="0.0407%" height="15" fill="rgb(241,91,40)" fg:x="5227" fg:w="4"/><text x="53.3807%" y="511.50"></text></g><g><title>core::mem::take (4 samples, 0.04%)</title><rect x="53.1307%" y="485" width="0.0407%" height="15" fill="rgb(225,3,45)" fg:x="5227" fg:w="4"/><text x="53.3807%" y="495.50"></text></g><g><title>core::mem::replace (4 samples, 0.04%)</title><rect x="53.1307%" y="469" width="0.0407%" height="15" fill="rgb(244,223,14)" fg:x="5227" fg:w="4"/><text x="53.3807%" y="479.50"></text></g><g><title>core::ptr::read (4 samples, 0.04%)</title><rect x="53.1307%" y="453" width="0.0407%" height="15" fill="rgb(224,124,37)" fg:x="5227" fg:w="4"/><text x="53.3807%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u16 (4 samples, 0.04%)</title><rect x="53.1714%" y="549" width="0.0407%" height="15" fill="rgb(251,171,30)" fg:x="5231" fg:w="4"/><text x="53.4214%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="53.3442%" y="501" width="0.0305%" height="15" fill="rgb(236,46,54)" fg:x="5248" fg:w="3"/><text x="53.5942%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (47 samples, 0.48%)</title><rect x="52.9071%" y="581" width="0.4777%" height="15" fill="rgb(245,213,5)" fg:x="5205" fg:w="47"/><text x="53.1571%" y="591.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u16 (47 samples, 0.48%)</title><rect x="52.9071%" y="565" width="0.4777%" height="15" fill="rgb(230,144,27)" fg:x="5205" fg:w="47"/><text x="53.1571%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (17 samples, 0.17%)</title><rect x="53.2120%" y="549" width="0.1728%" height="15" fill="rgb(220,86,6)" fg:x="5235" fg:w="17"/><text x="53.4620%" y="559.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u16&gt;::from_str (17 samples, 0.17%)</title><rect x="53.2120%" y="533" width="0.1728%" height="15" fill="rgb(240,20,13)" fg:x="5235" fg:w="17"/><text x="53.4620%" y="543.50"></text></g><g><title>core::num::from_str_radix (17 samples, 0.17%)</title><rect x="53.2120%" y="517" width="0.1728%" height="15" fill="rgb(217,89,34)" fg:x="5235" fg:w="17"/><text x="53.4620%" y="527.50"></text></g><g><title>&lt;u16 as core::num::FromStrRadixHelper&gt;::checked_mul (1 samples, 0.01%)</title><rect x="53.3747%" y="501" width="0.0102%" height="15" fill="rgb(229,13,5)" fg:x="5251" fg:w="1"/><text x="53.6247%" y="511.50"></text></g><g><title>core::num::&lt;impl u16&gt;::checked_mul (1 samples, 0.01%)</title><rect x="53.3747%" y="485" width="0.0102%" height="15" fill="rgb(244,67,35)" fg:x="5251" fg:w="1"/><text x="53.6247%" y="495.50"></text></g><g><title>core::num::&lt;impl u16&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="53.3747%" y="469" width="0.0102%" height="15" fill="rgb(221,40,2)" fg:x="5251" fg:w="1"/><text x="53.6247%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.05%)</title><rect x="53.5881%" y="469" width="0.0508%" height="15" fill="rgb(237,157,21)" fg:x="5272" fg:w="5"/><text x="53.8381%" y="479.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.18%)</title><rect x="53.4763%" y="501" width="0.1830%" height="15" fill="rgb(222,94,11)" fg:x="5261" fg:w="18"/><text x="53.7263%" y="511.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.18%)</title><rect x="53.4763%" y="485" width="0.1830%" height="15" fill="rgb(249,113,6)" fg:x="5261" fg:w="18"/><text x="53.7263%" y="495.50"></text></g><g><title>csv::byte_record::Bounds::ends (2 samples, 0.02%)</title><rect x="53.6390%" y="469" width="0.0203%" height="15" fill="rgb(238,137,36)" fg:x="5277" fg:w="2"/><text x="53.8890%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="53.6390%" y="453" width="0.0203%" height="15" fill="rgb(210,102,26)" fg:x="5277" fg:w="2"/><text x="53.8890%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="53.6390%" y="437" width="0.0203%" height="15" fill="rgb(218,30,30)" fg:x="5277" fg:w="2"/><text x="53.8890%" y="447.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (28 samples, 0.28%)</title><rect x="53.3848%" y="549" width="0.2846%" height="15" fill="rgb(214,67,26)" fg:x="5252" fg:w="28"/><text x="53.6348%" y="559.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (28 samples, 0.28%)</title><rect x="53.3848%" y="533" width="0.2846%" height="15" fill="rgb(251,9,53)" fg:x="5252" fg:w="28"/><text x="53.6348%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.23%)</title><rect x="53.4357%" y="517" width="0.2338%" height="15" fill="rgb(228,204,25)" fg:x="5257" fg:w="23"/><text x="53.6857%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.01%)</title><rect x="53.6593%" y="501" width="0.0102%" height="15" fill="rgb(207,153,8)" fg:x="5279" fg:w="1"/><text x="53.9093%" y="511.50"></text></g><g><title>core::mem::take (1 samples, 0.01%)</title><rect x="53.6593%" y="485" width="0.0102%" height="15" fill="rgb(242,9,16)" fg:x="5279" fg:w="1"/><text x="53.9093%" y="495.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="53.6593%" y="469" width="0.0102%" height="15" fill="rgb(217,211,10)" fg:x="5279" fg:w="1"/><text x="53.9093%" y="479.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="53.6593%" y="453" width="0.0102%" height="15" fill="rgb(219,228,52)" fg:x="5279" fg:w="1"/><text x="53.9093%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u32 (2 samples, 0.02%)</title><rect x="53.6694%" y="549" width="0.0203%" height="15" fill="rgb(231,92,29)" fg:x="5280" fg:w="2"/><text x="53.9194%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="53.9845%" y="501" width="0.0508%" height="15" fill="rgb(232,8,23)" fg:x="5311" fg:w="5"/><text x="54.2345%" y="511.50"></text></g><g><title>&lt;u32 as core::num::FromStrRadixHelper&gt;::checked_mul (36 samples, 0.37%)</title><rect x="54.0354%" y="501" width="0.3659%" height="15" fill="rgb(216,211,34)" fg:x="5316" fg:w="36"/><text x="54.2854%" y="511.50"></text></g><g><title>core::num::&lt;impl u32&gt;::checked_mul (36 samples, 0.37%)</title><rect x="54.0354%" y="485" width="0.3659%" height="15" fill="rgb(236,151,0)" fg:x="5316" fg:w="36"/><text x="54.2854%" y="495.50"></text></g><g><title>core::num::&lt;impl u32&gt;::overflowing_mul (36 samples, 0.37%)</title><rect x="54.0354%" y="469" width="0.3659%" height="15" fill="rgb(209,168,3)" fg:x="5316" fg:w="36"/><text x="54.2854%" y="479.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (13 samples, 0.13%)</title><rect x="54.4013%" y="501" width="0.1321%" height="15" fill="rgb(208,129,28)" fg:x="5352" fg:w="13"/><text x="54.6513%" y="511.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (7 samples, 0.07%)</title><rect x="54.4623%" y="485" width="0.0712%" height="15" fill="rgb(229,78,22)" fg:x="5358" fg:w="7"/><text x="54.7123%" y="495.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,240 samples, 43.10%)</title><rect x="11.4759%" y="725" width="43.0982%" height="15" fill="rgb(228,187,13)" fg:x="1129" fg:w="4240"/><text x="11.7259%" y="735.50">&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterat..</text></g><g><title>csv::string_record::StringRecord::deserialize (1,335 samples, 13.57%)</title><rect x="41.0043%" y="709" width="13.5698%" height="15" fill="rgb(240,119,24)" fg:x="4034" fg:w="1335"/><text x="41.2543%" y="719.50">csv::string_record::..</text></g><g><title>csv::deserializer::deserialize_string_record (1,335 samples, 13.57%)</title><rect x="41.0043%" y="693" width="13.5698%" height="15" fill="rgb(209,194,42)" fg:x="4034" fg:w="1335"/><text x="41.2543%" y="703.50">csv::deserializer::d..</text></g><g><title>resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize (1,231 samples, 12.51%)</title><rect x="42.0614%" y="677" width="12.5127%" height="15" fill="rgb(247,200,46)" fg:x="4138" fg:w="1231"/><text x="42.3114%" y="687.50">resolution::_::&lt;imp..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,231 samples, 12.51%)</title><rect x="42.0614%" y="661" width="12.5127%" height="15" fill="rgb(218,76,16)" fg:x="4138" fg:w="1231"/><text x="42.3114%" y="671.50">&lt;&amp;mut csv::deserial..</text></g><g><title>&lt;resolution::_::&lt;impl serde::de::Deserialize for resolution::CsvRecord&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,220 samples, 12.40%)</title><rect x="42.1732%" y="645" width="12.4009%" height="15" fill="rgb(225,21,48)" fg:x="4149" fg:w="1220"/><text x="42.4232%" y="655.50">&lt;resolution::_::&lt;im..</text></g><g><title>serde::de::MapAccess::next_value (912 samples, 9.27%)</title><rect x="45.3039%" y="629" width="9.2702%" height="15" fill="rgb(239,223,50)" fg:x="4457" fg:w="912"/><text x="45.5539%" y="639.50">serde::de::Ma..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (912 samples, 9.27%)</title><rect x="45.3039%" y="613" width="9.2702%" height="15" fill="rgb(244,45,21)" fg:x="4457" fg:w="912"/><text x="45.5539%" y="623.50">&lt;&amp;mut csv::de..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (912 samples, 9.27%)</title><rect x="45.3039%" y="597" width="9.2702%" height="15" fill="rgb(232,33,43)" fg:x="4457" fg:w="912"/><text x="45.5539%" y="607.50">&lt;core::marker..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (117 samples, 1.19%)</title><rect x="53.3848%" y="581" width="1.1893%" height="15" fill="rgb(209,8,3)" fg:x="5252" fg:w="117"/><text x="53.6348%" y="591.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u32 (117 samples, 1.19%)</title><rect x="53.3848%" y="565" width="1.1893%" height="15" fill="rgb(214,25,53)" fg:x="5252" fg:w="117"/><text x="53.6348%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (87 samples, 0.88%)</title><rect x="53.6898%" y="549" width="0.8843%" height="15" fill="rgb(254,186,54)" fg:x="5282" fg:w="87"/><text x="53.9398%" y="559.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (87 samples, 0.88%)</title><rect x="53.6898%" y="533" width="0.8843%" height="15" fill="rgb(208,174,49)" fg:x="5282" fg:w="87"/><text x="53.9398%" y="543.50"></text></g><g><title>core::num::from_str_radix (83 samples, 0.84%)</title><rect x="53.7304%" y="517" width="0.8437%" height="15" fill="rgb(233,191,51)" fg:x="5286" fg:w="83"/><text x="53.9804%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (4 samples, 0.04%)</title><rect x="54.5334%" y="501" width="0.0407%" height="15" fill="rgb(222,134,10)" fg:x="5365" fg:w="4"/><text x="54.7834%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (1 samples, 0.01%)</title><rect x="54.5741%" y="725" width="0.0102%" height="15" fill="rgb(230,226,20)" fg:x="5369" fg:w="1"/><text x="54.8241%" y="735.50"></text></g><g><title>__GI___libc_free (16 samples, 0.16%)</title><rect x="54.5843%" y="613" width="0.1626%" height="15" fill="rgb(251,111,25)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="623.50"></text></g><g><title>__GI_munmap (16 samples, 0.16%)</title><rect x="54.5843%" y="597" width="0.1626%" height="15" fill="rgb(224,40,46)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="607.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="581" width="0.1626%" height="15" fill="rgb(236,108,47)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="591.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="565" width="0.1626%" height="15" fill="rgb(234,93,0)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="575.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="549" width="0.1626%" height="15" fill="rgb(224,213,32)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="533" width="0.1626%" height="15" fill="rgb(251,11,48)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="543.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="517" width="0.1626%" height="15" fill="rgb(236,173,5)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="527.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="501" width="0.1626%" height="15" fill="rgb(230,95,12)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="511.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="485" width="0.1626%" height="15" fill="rgb(232,209,1)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="495.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="469" width="0.1626%" height="15" fill="rgb(232,6,1)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="479.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="453" width="0.1626%" height="15" fill="rgb(210,224,50)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="54.5843%" y="437" width="0.1626%" height="15" fill="rgb(228,127,35)" fg:x="5370" fg:w="16"/><text x="54.8343%" y="447.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="54.6453%" y="421" width="0.1016%" height="15" fill="rgb(245,102,45)" fg:x="5376" fg:w="10"/><text x="54.8953%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="54.6453%" y="405" width="0.1016%" height="15" fill="rgb(214,1,49)" fg:x="5376" fg:w="10"/><text x="54.8953%" y="415.50"></text></g><g><title>[unknown] (9 samples, 0.09%)</title><rect x="54.6554%" y="389" width="0.0915%" height="15" fill="rgb(226,163,40)" fg:x="5377" fg:w="9"/><text x="54.9054%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="54.6859%" y="373" width="0.0610%" height="15" fill="rgb(239,212,28)" fg:x="5380" fg:w="6"/><text x="54.9359%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="54.7062%" y="357" width="0.0407%" height="15" fill="rgb(220,20,13)" fg:x="5382" fg:w="4"/><text x="54.9562%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="54.7266%" y="341" width="0.0203%" height="15" fill="rgb(210,164,35)" fg:x="5384" fg:w="2"/><text x="54.9766%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="54.7672%" y="469" width="0.0102%" height="15" fill="rgb(248,109,41)" fg:x="5388" fg:w="1"/><text x="55.0172%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="54.7672%" y="453" width="0.0102%" height="15" fill="rgb(238,23,50)" fg:x="5388" fg:w="1"/><text x="55.0172%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="54.7672%" y="437" width="0.0102%" height="15" fill="rgb(211,48,49)" fg:x="5388" fg:w="1"/><text x="55.0172%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.04%)</title><rect x="54.7774%" y="469" width="0.0407%" height="15" fill="rgb(223,36,21)" fg:x="5389" fg:w="4"/><text x="55.0274%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4 samples, 0.04%)</title><rect x="54.8181%" y="469" width="0.0407%" height="15" fill="rgb(207,123,46)" fg:x="5393" fg:w="4"/><text x="55.0681%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.11%)</title><rect x="54.7571%" y="501" width="0.1118%" height="15" fill="rgb(240,218,32)" fg:x="5387" fg:w="11"/><text x="55.0071%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.11%)</title><rect x="54.7571%" y="485" width="0.1118%" height="15" fill="rgb(252,5,43)" fg:x="5387" fg:w="11"/><text x="55.0071%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.01%)</title><rect x="54.8587%" y="469" width="0.0102%" height="15" fill="rgb(252,84,19)" fg:x="5397" fg:w="1"/><text x="55.1087%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.01%)</title><rect x="54.8587%" y="453" width="0.0102%" height="15" fill="rgb(243,152,39)" fg:x="5397" fg:w="1"/><text x="55.1087%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (383 samples, 3.89%)</title><rect x="54.8689%" y="437" width="3.8931%" height="15" fill="rgb(234,160,15)" fg:x="5398" fg:w="383"/><text x="55.1189%" y="447.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;[resolution::transaction::Transaction]&gt; (362 samples, 3.68%)</title><rect x="55.0823%" y="421" width="3.6796%" height="15" fill="rgb(237,34,20)" fg:x="5419" fg:w="362"/><text x="55.3323%" y="431.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;resolution::transaction::Transaction&gt; (360 samples, 3.66%)</title><rect x="55.1027%" y="405" width="3.6593%" height="15" fill="rgb(229,97,13)" fg:x="5421" fg:w="360"/><text x="55.3527%" y="415.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (360 samples, 3.66%)</title><rect x="55.1027%" y="389" width="3.6593%" height="15" fill="rgb(234,71,50)" fg:x="5421" fg:w="360"/><text x="55.3527%" y="399.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (360 samples, 3.66%)</title><rect x="55.1027%" y="373" width="3.6593%" height="15" fill="rgb(253,155,4)" fg:x="5421" fg:w="360"/><text x="55.3527%" y="383.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (360 samples, 3.66%)</title><rect x="55.1027%" y="357" width="3.6593%" height="15" fill="rgb(222,185,37)" fg:x="5421" fg:w="360"/><text x="55.3527%" y="367.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (360 samples, 3.66%)</title><rect x="55.1027%" y="341" width="3.6593%" height="15" fill="rgb(251,177,13)" fg:x="5421" fg:w="360"/><text x="55.3527%" y="351.50">&lt;all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.04%)</title><rect x="58.7213%" y="325" width="0.0407%" height="15" fill="rgb(250,179,40)" fg:x="5777" fg:w="4"/><text x="58.9713%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="58.7518%" y="309" width="0.0102%" height="15" fill="rgb(242,44,2)" fg:x="5780" fg:w="1"/><text x="59.0018%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="58.7518%" y="293" width="0.0102%" height="15" fill="rgb(216,177,13)" fg:x="5780" fg:w="1"/><text x="59.0018%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="58.7518%" y="277" width="0.0102%" height="15" fill="rgb(216,106,43)" fg:x="5780" fg:w="1"/><text x="59.0018%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="58.7518%" y="261" width="0.0102%" height="15" fill="rgb(216,183,2)" fg:x="5780" fg:w="1"/><text x="59.0018%" y="271.50"></text></g><g><title>systrim (3 samples, 0.03%)</title><rect x="66.0703%" y="341" width="0.0305%" height="15" fill="rgb(249,75,3)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="351.50"></text></g><g><title>__GI___default_morecore (3 samples, 0.03%)</title><rect x="66.0703%" y="325" width="0.0305%" height="15" fill="rgb(219,67,39)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="335.50"></text></g><g><title>__GI___sbrk (3 samples, 0.03%)</title><rect x="66.0703%" y="309" width="0.0305%" height="15" fill="rgb(253,228,2)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="319.50"></text></g><g><title>__GI___sbrk (3 samples, 0.03%)</title><rect x="66.0703%" y="293" width="0.0305%" height="15" fill="rgb(235,138,27)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="303.50"></text></g><g><title>__brk (3 samples, 0.03%)</title><rect x="66.0703%" y="277" width="0.0305%" height="15" fill="rgb(236,97,51)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="261" width="0.0305%" height="15" fill="rgb(240,80,30)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="245" width="0.0305%" height="15" fill="rgb(230,178,19)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="229" width="0.0305%" height="15" fill="rgb(210,190,27)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="213" width="0.0305%" height="15" fill="rgb(222,107,31)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="197" width="0.0305%" height="15" fill="rgb(216,127,34)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="181" width="0.0305%" height="15" fill="rgb(234,116,52)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="165" width="0.0305%" height="15" fill="rgb(222,124,15)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="149" width="0.0305%" height="15" fill="rgb(231,179,28)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="133" width="0.0305%" height="15" fill="rgb(226,93,45)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="117" width="0.0305%" height="15" fill="rgb(215,8,51)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="101" width="0.0305%" height="15" fill="rgb(223,106,5)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="85" width="0.0305%" height="15" fill="rgb(250,191,5)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="69" width="0.0305%" height="15" fill="rgb(242,132,44)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="66.0703%" y="53" width="0.0305%" height="15" fill="rgb(251,152,29)" fg:x="6500" fg:w="3"/><text x="66.3203%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0805%" y="37" width="0.0203%" height="15" fill="rgb(218,179,5)" fg:x="6501" fg:w="2"/><text x="66.3305%" y="47.50"></text></g><g><title>__GI___libc_free (1,607 samples, 16.33%)</title><rect x="58.7619%" y="373" width="16.3346%" height="15" fill="rgb(227,67,19)" fg:x="5781" fg:w="1607"/><text x="59.0119%" y="383.50">__GI___libc_free</text></g><g><title>_int_free (1,572 samples, 15.98%)</title><rect x="59.1177%" y="357" width="15.9789%" height="15" fill="rgb(233,119,31)" fg:x="5816" fg:w="1572"/><text x="59.3677%" y="367.50">_int_free</text></g><g><title>unlink_chunk (885 samples, 9.00%)</title><rect x="66.1008%" y="341" width="8.9957%" height="15" fill="rgb(241,120,22)" fg:x="6503" fg:w="885"/><text x="66.3508%" y="351.50">unlink_chunk</text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="75.0966%" y="373" width="0.0203%" height="15" fill="rgb(224,102,30)" fg:x="7388" fg:w="2"/><text x="75.3466%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="75.0966%" y="357" width="0.0203%" height="15" fill="rgb(210,164,37)" fg:x="7388" fg:w="2"/><text x="75.3466%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,611 samples, 16.38%)</title><rect x="58.7619%" y="405" width="16.3753%" height="15" fill="rgb(226,191,16)" fg:x="5781" fg:w="1611"/><text x="59.0119%" y="415.50">&lt;alloc::alloc::Global as ..</text></g><g><title>alloc::alloc::dealloc (1,611 samples, 16.38%)</title><rect x="58.7619%" y="389" width="16.3753%" height="15" fill="rgb(214,40,45)" fg:x="5781" fg:w="1611"/><text x="59.0119%" y="399.50">alloc::alloc::dealloc</text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="75.1169%" y="373" width="0.0203%" height="15" fill="rgb(244,29,26)" fg:x="7390" fg:w="2"/><text x="75.3669%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,resolution::account::Account&gt;&gt; (2,029 samples, 20.62%)</title><rect x="54.5843%" y="725" width="20.6241%" height="15" fill="rgb(216,16,5)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="735.50">core::ptr::drop_in_place&lt;std::co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,resolution::account::Account,std::collections::hash::map::RandomState&gt;&gt; (2,029 samples, 20.62%)</title><rect x="54.5843%" y="709" width="20.6241%" height="15" fill="rgb(249,76,35)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="719.50">core::ptr::drop_in_place&lt;hashbro..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,resolution::account::Account)&gt;&gt; (2,029 samples, 20.62%)</title><rect x="54.5843%" y="693" width="20.6241%" height="15" fill="rgb(207,11,44)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="703.50">core::ptr::drop_in_place&lt;hashbro..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,029 samples, 20.62%)</title><rect x="54.5843%" y="677" width="20.6241%" height="15" fill="rgb(228,190,49)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="687.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; a..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2,029 samples, 20.62%)</title><rect x="54.5843%" y="661" width="20.6241%" height="15" fill="rgb(214,173,12)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="671.50">hashbrown::raw::RawTable&lt;T,A&gt;::d..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2,029 samples, 20.62%)</title><rect x="54.5843%" y="645" width="20.6241%" height="15" fill="rgb(218,26,35)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="655.50">hashbrown::raw::Bucket&lt;T&gt;::drop</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2,029 samples, 20.62%)</title><rect x="54.5843%" y="629" width="20.6241%" height="15" fill="rgb(220,200,19)" fg:x="5370" fg:w="2029"/><text x="54.8343%" y="639.50">core::ptr::mut_ptr::&lt;impl *mut T..</text></g><g><title>core::ptr::drop_in_place&lt;(u16,resolution::account::Account)&gt; (2,013 samples, 20.46%)</title><rect x="54.7469%" y="613" width="20.4615%" height="15" fill="rgb(239,95,49)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="623.50">core::ptr::drop_in_place&lt;(u16,re..</text></g><g><title>core::ptr::drop_in_place&lt;resolution::account::Account&gt; (2,013 samples, 20.46%)</title><rect x="54.7469%" y="597" width="20.4615%" height="15" fill="rgb(235,85,53)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="607.50">core::ptr::drop_in_place&lt;resolut..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;&gt;&gt; (2,013 samples, 20.46%)</title><rect x="54.7469%" y="581" width="20.4615%" height="15" fill="rgb(233,133,31)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="591.50">core::ptr::drop_in_place&lt;std::co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;,std::collections::hash::map::RandomState&gt;&gt; (2,013 samples, 20.46%)</title><rect x="54.7469%" y="565" width="20.4615%" height="15" fill="rgb(218,25,20)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="575.50">core::ptr::drop_in_place&lt;hashbro..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;)&gt;&gt; (2,013 samples, 20.46%)</title><rect x="54.7469%" y="549" width="20.4615%" height="15" fill="rgb(252,210,38)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="559.50">core::ptr::drop_in_place&lt;hashbro..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,013 samples, 20.46%)</title><rect x="54.7469%" y="533" width="20.4615%" height="15" fill="rgb(242,134,21)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="543.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; a..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2,013 samples, 20.46%)</title><rect x="54.7469%" y="517" width="20.4615%" height="15" fill="rgb(213,28,48)" fg:x="5386" fg:w="2013"/><text x="54.9969%" y="527.50">hashbrown::raw::RawTable&lt;T,A&gt;::d..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2,001 samples, 20.34%)</title><rect x="54.8689%" y="501" width="20.3395%" height="15" fill="rgb(250,196,2)" fg:x="5398" fg:w="2001"/><text x="55.1189%" y="511.50">hashbrown::raw::Bucket&lt;T&gt;::drop</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2,001 samples, 20.34%)</title><rect x="54.8689%" y="485" width="20.3395%" height="15" fill="rgb(227,5,17)" fg:x="5398" fg:w="2001"/><text x="55.1189%" y="495.50">core::ptr::mut_ptr::&lt;impl *mut T..</text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;)&gt; (2,001 samples, 20.34%)</title><rect x="54.8689%" y="469" width="20.3395%" height="15" fill="rgb(221,226,24)" fg:x="5398" fg:w="2001"/><text x="55.1189%" y="479.50">core::ptr::drop_in_place&lt;(u32,al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;resolution::transaction::Transaction&gt;&gt; (2,001 samples, 20.34%)</title><rect x="54.8689%" y="453" width="20.3395%" height="15" fill="rgb(211,5,48)" fg:x="5398" fg:w="2001"/><text x="55.1189%" y="463.50">core::ptr::drop_in_place&lt;alloc::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;resolution::transaction::Transaction&gt;&gt; (1,618 samples, 16.45%)</title><rect x="58.7619%" y="437" width="16.4464%" height="15" fill="rgb(219,150,6)" fg:x="5781" fg:w="1618"/><text x="59.0119%" y="447.50">core::ptr::drop_in_place&lt;..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,618 samples, 16.45%)</title><rect x="58.7619%" y="421" width="16.4464%" height="15" fill="rgb(251,46,16)" fg:x="5781" fg:w="1618"/><text x="59.0119%" y="431.50">&lt;alloc::raw_vec::RawVec&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.07%)</title><rect x="75.1372%" y="405" width="0.0712%" height="15" fill="rgb(220,204,40)" fg:x="7392" fg:w="7"/><text x="75.3872%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (7 samples, 0.07%)</title><rect x="75.2084%" y="725" width="0.0712%" height="15" fill="rgb(211,85,2)" fg:x="7399" fg:w="7"/><text x="75.4584%" y="735.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (1 samples, 0.01%)</title><rect x="76.0520%" y="629" width="0.0102%" height="15" fill="rgb(229,17,7)" fg:x="7482" fg:w="1"/><text x="76.3020%" y="639.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="76.0927%" y="613" width="0.0102%" height="15" fill="rgb(239,72,28)" fg:x="7486" fg:w="1"/><text x="76.3427%" y="623.50"></text></g><g><title>rust_decimal::ops::add::aligned_add (10 samples, 0.10%)</title><rect x="76.0622%" y="629" width="0.1016%" height="15" fill="rgb(230,47,54)" fg:x="7483" fg:w="10"/><text x="76.3122%" y="639.50"></text></g><g><title>rust_decimal::ops::common::Dec64::to_decimal (6 samples, 0.06%)</title><rect x="76.1029%" y="613" width="0.0610%" height="15" fill="rgb(214,50,8)" fg:x="7487" fg:w="6"/><text x="76.3529%" y="623.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (6 samples, 0.06%)</title><rect x="76.1029%" y="597" width="0.0610%" height="15" fill="rgb(216,198,43)" fg:x="7487" fg:w="6"/><text x="76.3529%" y="607.50"></text></g><g><title>rust_decimal::decimal::flags (1 samples, 0.01%)</title><rect x="76.1537%" y="581" width="0.0102%" height="15" fill="rgb(234,20,35)" fg:x="7492" fg:w="1"/><text x="76.4037%" y="591.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::AddAssign&gt;::add_assign (28 samples, 0.28%)</title><rect x="75.9301%" y="709" width="0.2846%" height="15" fill="rgb(254,45,19)" fg:x="7470" fg:w="28"/><text x="76.1801%" y="719.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::Add&gt;::add (27 samples, 0.27%)</title><rect x="75.9402%" y="693" width="0.2744%" height="15" fill="rgb(219,14,44)" fg:x="7471" fg:w="27"/><text x="76.1902%" y="703.50"></text></g><g><title>&lt;&amp;rust_decimal::decimal::Decimal as core::ops::arith::Add&lt;&amp;rust_decimal::decimal::Decimal&gt;&gt;::add (27 samples, 0.27%)</title><rect x="75.9402%" y="677" width="0.2744%" height="15" fill="rgb(217,220,26)" fg:x="7471" fg:w="27"/><text x="76.1902%" y="687.50"></text></g><g><title>rust_decimal::ops::add::add_impl (24 samples, 0.24%)</title><rect x="75.9707%" y="661" width="0.2440%" height="15" fill="rgb(213,158,28)" fg:x="7474" fg:w="24"/><text x="76.2207%" y="671.50"></text></g><g><title>rust_decimal::ops::add::add_sub_internal (24 samples, 0.24%)</title><rect x="75.9707%" y="645" width="0.2440%" height="15" fill="rgb(252,51,52)" fg:x="7474" fg:w="24"/><text x="76.2207%" y="655.50"></text></g><g><title>rust_decimal::ops::common::Dec64::new (5 samples, 0.05%)</title><rect x="76.1639%" y="629" width="0.0508%" height="15" fill="rgb(246,89,16)" fg:x="7493" fg:w="5"/><text x="76.4139%" y="639.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (2 samples, 0.02%)</title><rect x="76.2960%" y="629" width="0.0203%" height="15" fill="rgb(216,158,49)" fg:x="7506" fg:w="2"/><text x="76.5460%" y="639.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1 samples, 0.01%)</title><rect x="76.3671%" y="613" width="0.0102%" height="15" fill="rgb(236,107,19)" fg:x="7513" fg:w="1"/><text x="76.6171%" y="623.50"></text></g><g><title>rust_decimal::ops::add::aligned_add (14 samples, 0.14%)</title><rect x="76.3163%" y="629" width="0.1423%" height="15" fill="rgb(228,185,30)" fg:x="7508" fg:w="14"/><text x="76.5663%" y="639.50"></text></g><g><title>rust_decimal::ops::common::Dec64::to_decimal (8 samples, 0.08%)</title><rect x="76.3773%" y="613" width="0.0813%" height="15" fill="rgb(246,134,8)" fg:x="7514" fg:w="8"/><text x="76.6273%" y="623.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (6 samples, 0.06%)</title><rect x="76.3976%" y="597" width="0.0610%" height="15" fill="rgb(214,143,50)" fg:x="7516" fg:w="6"/><text x="76.6476%" y="607.50"></text></g><g><title>rust_decimal::decimal::flags (1 samples, 0.01%)</title><rect x="76.4485%" y="581" width="0.0102%" height="15" fill="rgb(228,75,8)" fg:x="7521" fg:w="1"/><text x="76.6985%" y="591.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::SubAssign&gt;::sub_assign (31 samples, 0.32%)</title><rect x="76.2147%" y="709" width="0.3151%" height="15" fill="rgb(207,175,4)" fg:x="7498" fg:w="31"/><text x="76.4647%" y="719.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::Sub&gt;::sub (28 samples, 0.28%)</title><rect x="76.2452%" y="693" width="0.2846%" height="15" fill="rgb(205,108,24)" fg:x="7501" fg:w="28"/><text x="76.4952%" y="703.50"></text></g><g><title>&lt;&amp;rust_decimal::decimal::Decimal as core::ops::arith::Sub&lt;&amp;rust_decimal::decimal::Decimal&gt;&gt;::sub (28 samples, 0.28%)</title><rect x="76.2452%" y="677" width="0.2846%" height="15" fill="rgb(244,120,49)" fg:x="7501" fg:w="28"/><text x="76.4952%" y="687.50"></text></g><g><title>rust_decimal::ops::add::sub_impl (26 samples, 0.26%)</title><rect x="76.2655%" y="661" width="0.2643%" height="15" fill="rgb(223,47,38)" fg:x="7503" fg:w="26"/><text x="76.5155%" y="671.50"></text></g><g><title>rust_decimal::ops::add::add_sub_internal (26 samples, 0.26%)</title><rect x="76.2655%" y="645" width="0.2643%" height="15" fill="rgb(229,179,11)" fg:x="7503" fg:w="26"/><text x="76.5155%" y="655.50"></text></g><g><title>rust_decimal::ops::common::Dec64::new (7 samples, 0.07%)</title><rect x="76.4586%" y="629" width="0.0712%" height="15" fill="rgb(231,122,1)" fg:x="7522" fg:w="7"/><text x="76.7086%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.01%)</title><rect x="76.6721%" y="629" width="0.0102%" height="15" fill="rgb(245,119,9)" fg:x="7543" fg:w="1"/><text x="76.9221%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (2 samples, 0.02%)</title><rect x="76.6823%" y="629" width="0.0203%" height="15" fill="rgb(241,163,25)" fg:x="7544" fg:w="2"/><text x="76.9323%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (2 samples, 0.02%)</title><rect x="76.6823%" y="613" width="0.0203%" height="15" fill="rgb(217,214,3)" fg:x="7544" fg:w="2"/><text x="76.9323%" y="623.50"></text></g><g><title>[unknown] (359 samples, 3.65%)</title><rect x="78.0850%" y="581" width="3.6491%" height="15" fill="rgb(240,86,28)" fg:x="7682" fg:w="359"/><text x="78.3350%" y="591.50">[unk..</text></g><g><title>[unknown] (313 samples, 3.18%)</title><rect x="78.5526%" y="565" width="3.1815%" height="15" fill="rgb(215,47,9)" fg:x="7728" fg:w="313"/><text x="78.8026%" y="575.50">[un..</text></g><g><title>[unknown] (309 samples, 3.14%)</title><rect x="78.5932%" y="549" width="3.1409%" height="15" fill="rgb(252,25,45)" fg:x="7732" fg:w="309"/><text x="78.8432%" y="559.50">[un..</text></g><g><title>[unknown] (305 samples, 3.10%)</title><rect x="78.6339%" y="533" width="3.1002%" height="15" fill="rgb(251,164,9)" fg:x="7736" fg:w="305"/><text x="78.8839%" y="543.50">[un..</text></g><g><title>[unknown] (210 samples, 2.13%)</title><rect x="79.5995%" y="517" width="2.1346%" height="15" fill="rgb(233,194,0)" fg:x="7831" fg:w="210"/><text x="79.8495%" y="527.50">[..</text></g><g><title>[unknown] (188 samples, 1.91%)</title><rect x="79.8231%" y="501" width="1.9110%" height="15" fill="rgb(249,111,24)" fg:x="7853" fg:w="188"/><text x="80.0731%" y="511.50">[..</text></g><g><title>[unknown] (185 samples, 1.88%)</title><rect x="79.8536%" y="485" width="1.8805%" height="15" fill="rgb(250,223,3)" fg:x="7856" fg:w="185"/><text x="80.1036%" y="495.50">[..</text></g><g><title>[unknown] (175 samples, 1.78%)</title><rect x="79.9553%" y="469" width="1.7788%" height="15" fill="rgb(236,178,37)" fg:x="7866" fg:w="175"/><text x="80.2053%" y="479.50">[..</text></g><g><title>[unknown] (142 samples, 1.44%)</title><rect x="80.2907%" y="453" width="1.4434%" height="15" fill="rgb(241,158,50)" fg:x="7899" fg:w="142"/><text x="80.5407%" y="463.50"></text></g><g><title>[unknown] (119 samples, 1.21%)</title><rect x="80.5245%" y="437" width="1.2096%" height="15" fill="rgb(213,121,41)" fg:x="7922" fg:w="119"/><text x="80.7745%" y="447.50"></text></g><g><title>[unknown] (102 samples, 1.04%)</title><rect x="80.6973%" y="421" width="1.0368%" height="15" fill="rgb(240,92,3)" fg:x="7939" fg:w="102"/><text x="80.9473%" y="431.50"></text></g><g><title>[unknown] (30 samples, 0.30%)</title><rect x="81.4292%" y="405" width="0.3049%" height="15" fill="rgb(205,123,3)" fg:x="8011" fg:w="30"/><text x="81.6792%" y="415.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="81.5715%" y="389" width="0.1626%" height="15" fill="rgb(205,97,47)" fg:x="8025" fg:w="16"/><text x="81.8215%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="81.7239%" y="373" width="0.0102%" height="15" fill="rgb(247,152,14)" fg:x="8040" fg:w="1"/><text x="81.9739%" y="383.50"></text></g><g><title>alloc_perturb (2 samples, 0.02%)</title><rect x="81.7341%" y="581" width="0.0203%" height="15" fill="rgb(248,195,53)" fg:x="8041" fg:w="2"/><text x="81.9841%" y="591.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="81.7544%" y="581" width="0.0407%" height="15" fill="rgb(226,201,16)" fg:x="8043" fg:w="4"/><text x="82.0044%" y="591.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="81.7951%" y="581" width="0.0203%" height="15" fill="rgb(205,98,0)" fg:x="8047" fg:w="2"/><text x="82.0451%" y="591.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="81.8256%" y="565" width="0.1626%" height="15" fill="rgb(214,191,48)" fg:x="8050" fg:w="16"/><text x="82.0756%" y="575.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="81.8256%" y="549" width="0.1626%" height="15" fill="rgb(237,112,39)" fg:x="8050" fg:w="16"/><text x="82.0756%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="81.8256%" y="533" width="0.1626%" height="15" fill="rgb(247,203,27)" fg:x="8050" fg:w="16"/><text x="82.0756%" y="543.50"></text></g><g><title>[unknown] (16 samples, 0.16%)</title><rect x="81.8256%" y="517" width="0.1626%" height="15" fill="rgb(235,124,28)" fg:x="8050" fg:w="16"/><text x="82.0756%" y="527.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="81.8764%" y="501" width="0.1118%" height="15" fill="rgb(208,207,46)" fg:x="8055" fg:w="11"/><text x="82.1264%" y="511.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="81.8764%" y="485" width="0.1118%" height="15" fill="rgb(234,176,4)" fg:x="8055" fg:w="11"/><text x="82.1264%" y="495.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="81.8866%" y="469" width="0.1016%" height="15" fill="rgb(230,133,28)" fg:x="8056" fg:w="10"/><text x="82.1366%" y="479.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="81.8866%" y="453" width="0.1016%" height="15" fill="rgb(211,137,40)" fg:x="8056" fg:w="10"/><text x="82.1366%" y="463.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="81.9069%" y="437" width="0.0813%" height="15" fill="rgb(254,35,13)" fg:x="8058" fg:w="8"/><text x="82.1569%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="81.9374%" y="421" width="0.0508%" height="15" fill="rgb(225,49,51)" fg:x="8061" fg:w="5"/><text x="82.1874%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="81.9476%" y="405" width="0.0407%" height="15" fill="rgb(251,10,15)" fg:x="8062" fg:w="4"/><text x="82.1976%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="81.9780%" y="389" width="0.0102%" height="15" fill="rgb(228,207,15)" fg:x="8065" fg:w="1"/><text x="82.2280%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="81.9780%" y="373" width="0.0102%" height="15" fill="rgb(241,99,19)" fg:x="8065" fg:w="1"/><text x="82.2280%" y="383.50"></text></g><g><title>_int_malloc (506 samples, 5.14%)</title><rect x="76.9974%" y="597" width="5.1433%" height="15" fill="rgb(207,104,49)" fg:x="7575" fg:w="506"/><text x="77.2474%" y="607.50">_int_m..</text></g><g><title>sysmalloc (32 samples, 0.33%)</title><rect x="81.8154%" y="581" width="0.3253%" height="15" fill="rgb(234,99,18)" fg:x="8049" fg:w="32"/><text x="82.0654%" y="591.50"></text></g><g><title>__GI___default_morecore (15 samples, 0.15%)</title><rect x="81.9882%" y="565" width="0.1525%" height="15" fill="rgb(213,191,49)" fg:x="8066" fg:w="15"/><text x="82.2382%" y="575.50"></text></g><g><title>__GI___sbrk (15 samples, 0.15%)</title><rect x="81.9882%" y="549" width="0.1525%" height="15" fill="rgb(210,226,19)" fg:x="8066" fg:w="15"/><text x="82.2382%" y="559.50"></text></g><g><title>__GI___sbrk (15 samples, 0.15%)</title><rect x="81.9882%" y="533" width="0.1525%" height="15" fill="rgb(229,97,18)" fg:x="8066" fg:w="15"/><text x="82.2382%" y="543.50"></text></g><g><title>__brk (14 samples, 0.14%)</title><rect x="81.9984%" y="517" width="0.1423%" height="15" fill="rgb(211,167,15)" fg:x="8067" fg:w="14"/><text x="82.2484%" y="527.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="81.9984%" y="501" width="0.1423%" height="15" fill="rgb(210,169,34)" fg:x="8067" fg:w="14"/><text x="82.2484%" y="511.50"></text></g><g><title>[unknown] (13 samples, 0.13%)</title><rect x="82.0085%" y="485" width="0.1321%" height="15" fill="rgb(241,121,31)" fg:x="8068" fg:w="13"/><text x="82.2585%" y="495.50"></text></g><g><title>[unknown] (13 samples, 0.13%)</title><rect x="82.0085%" y="469" width="0.1321%" height="15" fill="rgb(232,40,11)" fg:x="8068" fg:w="13"/><text x="82.2585%" y="479.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="82.0594%" y="453" width="0.0813%" height="15" fill="rgb(205,86,26)" fg:x="8073" fg:w="8"/><text x="82.3094%" y="463.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="82.0594%" y="437" width="0.0813%" height="15" fill="rgb(231,126,28)" fg:x="8073" fg:w="8"/><text x="82.3094%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="82.0797%" y="421" width="0.0610%" height="15" fill="rgb(219,221,18)" fg:x="8075" fg:w="6"/><text x="82.3297%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="82.0899%" y="405" width="0.0508%" height="15" fill="rgb(211,40,0)" fg:x="8076" fg:w="5"/><text x="82.3399%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="82.1203%" y="389" width="0.0203%" height="15" fill="rgb(239,85,43)" fg:x="8079" fg:w="2"/><text x="82.3703%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="82.1203%" y="373" width="0.0203%" height="15" fill="rgb(231,55,21)" fg:x="8079" fg:w="2"/><text x="82.3703%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="82.1305%" y="357" width="0.0102%" height="15" fill="rgb(225,184,43)" fg:x="8080" fg:w="1"/><text x="82.3805%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="82.1305%" y="341" width="0.0102%" height="15" fill="rgb(251,158,41)" fg:x="8080" fg:w="1"/><text x="82.3805%" y="351.50"></text></g><g><title>__GI___libc_malloc (528 samples, 5.37%)</title><rect x="76.7839%" y="613" width="5.3669%" height="15" fill="rgb(234,159,37)" fg:x="7554" fg:w="528"/><text x="77.0339%" y="623.50">__GI___..</text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="82.1407%" y="597" width="0.0102%" height="15" fill="rgb(216,204,22)" fg:x="8081" fg:w="1"/><text x="82.3907%" y="607.50"></text></g><g><title>__rdl_alloc (6 samples, 0.06%)</title><rect x="82.1508%" y="613" width="0.0610%" height="15" fill="rgb(214,17,3)" fg:x="8082" fg:w="6"/><text x="82.4008%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.06%)</title><rect x="82.1508%" y="597" width="0.0610%" height="15" fill="rgb(212,111,17)" fg:x="8082" fg:w="6"/><text x="82.4008%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (543 samples, 5.52%)</title><rect x="76.7026%" y="629" width="5.5194%" height="15" fill="rgb(221,157,24)" fg:x="7546" fg:w="543"/><text x="76.9526%" y="639.50">alloc::..</text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="82.2118%" y="613" width="0.0102%" height="15" fill="rgb(252,16,13)" fg:x="8088" fg:w="1"/><text x="82.4618%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array (13 samples, 0.13%)</title><rect x="82.2220%" y="629" width="0.1321%" height="15" fill="rgb(221,62,2)" fg:x="8089" fg:w="13"/><text x="82.4720%" y="639.50"></text></g><g><title>core::alloc::layout::Layout::repeat (13 samples, 0.13%)</title><rect x="82.2220%" y="613" width="0.1321%" height="15" fill="rgb(247,87,22)" fg:x="8089" fg:w="13"/><text x="82.4720%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (11 samples, 0.11%)</title><rect x="82.2423%" y="597" width="0.1118%" height="15" fill="rgb(215,73,9)" fg:x="8091" fg:w="11"/><text x="82.4923%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (11 samples, 0.11%)</title><rect x="82.2423%" y="581" width="0.1118%" height="15" fill="rgb(207,175,33)" fg:x="8091" fg:w="11"/><text x="82.4923%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (571 samples, 5.80%)</title><rect x="76.6009%" y="645" width="5.8040%" height="15" fill="rgb(243,129,54)" fg:x="7536" fg:w="571"/><text x="76.8509%" y="655.50">alloc::..</text></g><g><title>core::cmp::max (5 samples, 0.05%)</title><rect x="82.3541%" y="629" width="0.0508%" height="15" fill="rgb(227,119,45)" fg:x="8102" fg:w="5"/><text x="82.6041%" y="639.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.05%)</title><rect x="82.3541%" y="613" width="0.0508%" height="15" fill="rgb(205,109,36)" fg:x="8102" fg:w="5"/><text x="82.6041%" y="623.50"></text></g><g><title>core::cmp::max_by (5 samples, 0.05%)</title><rect x="82.3541%" y="597" width="0.0508%" height="15" fill="rgb(205,6,39)" fg:x="8102" fg:w="5"/><text x="82.6041%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (579 samples, 5.89%)</title><rect x="76.5501%" y="693" width="5.8853%" height="15" fill="rgb(221,32,16)" fg:x="7531" fg:w="579"/><text x="76.8001%" y="703.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (575 samples, 5.84%)</title><rect x="76.5908%" y="677" width="5.8447%" height="15" fill="rgb(228,144,50)" fg:x="7535" fg:w="575"/><text x="76.8408%" y="687.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (575 samples, 5.84%)</title><rect x="76.5908%" y="661" width="5.8447%" height="15" fill="rgb(229,201,53)" fg:x="7535" fg:w="575"/><text x="76.8408%" y="671.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.03%)</title><rect x="82.4050%" y="645" width="0.0305%" height="15" fill="rgb(249,153,27)" fg:x="8107" fg:w="3"/><text x="82.6550%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="82.4050%" y="629" width="0.0305%" height="15" fill="rgb(227,106,25)" fg:x="8107" fg:w="3"/><text x="82.6550%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="82.4355%" y="693" width="0.0102%" height="15" fill="rgb(230,65,29)" fg:x="8110" fg:w="1"/><text x="82.6855%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="82.4355%" y="677" width="0.0102%" height="15" fill="rgb(221,57,46)" fg:x="8110" fg:w="1"/><text x="82.6855%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (591 samples, 6.01%)</title><rect x="76.5298%" y="709" width="6.0073%" height="15" fill="rgb(229,161,17)" fg:x="7529" fg:w="591"/><text x="76.7798%" y="719.50">alloc::v..</text></g><g><title>core::ptr::write (9 samples, 0.09%)</title><rect x="82.4456%" y="693" width="0.0915%" height="15" fill="rgb(222,213,11)" fg:x="8111" fg:w="9"/><text x="82.6956%" y="703.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::cmp::Ord&gt;::cmp (1 samples, 0.01%)</title><rect x="82.5473%" y="677" width="0.0102%" height="15" fill="rgb(235,35,13)" fg:x="8121" fg:w="1"/><text x="82.7973%" y="687.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (3 samples, 0.03%)</title><rect x="82.5778%" y="661" width="0.0305%" height="15" fill="rgb(233,158,34)" fg:x="8124" fg:w="3"/><text x="82.8278%" y="671.50"></text></g><g><title>rust_decimal::ops::cmp::cmp_internal (5 samples, 0.05%)</title><rect x="82.6083%" y="661" width="0.0508%" height="15" fill="rgb(215,151,48)" fg:x="8127" fg:w="5"/><text x="82.8583%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::gt (23 samples, 0.23%)</title><rect x="82.5371%" y="709" width="0.2338%" height="15" fill="rgb(229,84,14)" fg:x="8120" fg:w="23"/><text x="82.7871%" y="719.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::cmp::PartialOrd&gt;::partial_cmp (23 samples, 0.23%)</title><rect x="82.5371%" y="693" width="0.2338%" height="15" fill="rgb(229,68,14)" fg:x="8120" fg:w="23"/><text x="82.7871%" y="703.50"></text></g><g><title>rust_decimal::ops::cmp::cmp_impl (21 samples, 0.21%)</title><rect x="82.5574%" y="677" width="0.2135%" height="15" fill="rgb(243,106,26)" fg:x="8122" fg:w="21"/><text x="82.8074%" y="687.50"></text></g><g><title>rust_decimal::ops::common::Dec64::new (11 samples, 0.11%)</title><rect x="82.6591%" y="661" width="0.1118%" height="15" fill="rgb(206,45,38)" fg:x="8132" fg:w="11"/><text x="82.9091%" y="671.50"></text></g><g><title>resolution::account::Account::get_action (37 samples, 0.38%)</title><rect x="82.7709%" y="709" width="0.3761%" height="15" fill="rgb(226,6,15)" fg:x="8143" fg:w="37"/><text x="83.0209%" y="719.50"></text></g><g><title>resolution::transaction::Transaction::action (24 samples, 0.24%)</title><rect x="82.9030%" y="693" width="0.2440%" height="15" fill="rgb(232,22,54)" fg:x="8156" fg:w="24"/><text x="83.1530%" y="703.50"></text></g><g><title>resolution::account::Account::is_locked (1 samples, 0.01%)</title><rect x="83.1470%" y="709" width="0.0102%" height="15" fill="rgb(229,222,32)" fg:x="8180" fg:w="1"/><text x="83.3970%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (218 samples, 2.22%)</title><rect x="83.2283%" y="645" width="2.2159%" height="15" fill="rgb(228,62,29)" fg:x="8188" fg:w="218"/><text x="83.4783%" y="655.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (218 samples, 2.22%)</title><rect x="83.2283%" y="629" width="2.2159%" height="15" fill="rgb(251,103,34)" fg:x="8188" fg:w="218"/><text x="83.4783%" y="639.50">c..</text></g><g><title>core::ptr::write (218 samples, 2.22%)</title><rect x="83.2283%" y="613" width="2.2159%" height="15" fill="rgb(233,12,30)" fg:x="8188" fg:w="218"/><text x="83.4783%" y="623.50">c..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.01%)</title><rect x="85.4442%" y="645" width="0.0102%" height="15" fill="rgb(238,52,0)" fg:x="8406" fg:w="1"/><text x="85.6942%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="85.4442%" y="629" width="0.0102%" height="15" fill="rgb(223,98,5)" fg:x="8406" fg:w="1"/><text x="85.6942%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="85.4442%" y="613" width="0.0102%" height="15" fill="rgb(228,75,37)" fg:x="8406" fg:w="1"/><text x="85.6942%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="85.4442%" y="597" width="0.0102%" height="15" fill="rgb(205,115,49)" fg:x="8406" fg:w="1"/><text x="85.6942%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.02%)</title><rect x="85.5560%" y="613" width="0.0203%" height="15" fill="rgb(250,154,43)" fg:x="8417" fg:w="2"/><text x="85.8060%" y="623.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.03%)</title><rect x="85.5763%" y="613" width="0.0305%" height="15" fill="rgb(226,43,29)" fg:x="8419" fg:w="3"/><text x="85.8263%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (16 samples, 0.16%)</title><rect x="85.4544%" y="629" width="0.1626%" height="15" fill="rgb(249,228,39)" fg:x="8407" fg:w="16"/><text x="85.7044%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="85.6068%" y="613" width="0.0102%" height="15" fill="rgb(216,79,43)" fg:x="8422" fg:w="1"/><text x="85.8568%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="85.6068%" y="597" width="0.0102%" height="15" fill="rgb(228,95,12)" fg:x="8422" fg:w="1"/><text x="85.8568%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="85.6068%" y="581" width="0.0102%" height="15" fill="rgb(249,221,15)" fg:x="8422" fg:w="1"/><text x="85.8568%" y="591.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (250 samples, 2.54%)</title><rect x="83.1571%" y="709" width="2.5412%" height="15" fill="rgb(233,34,13)" fg:x="8181" fg:w="250"/><text x="83.4071%" y="719.50">st..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (249 samples, 2.53%)</title><rect x="83.1673%" y="693" width="2.5310%" height="15" fill="rgb(214,103,39)" fg:x="8182" fg:w="249"/><text x="83.4173%" y="703.50">st..</text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (249 samples, 2.53%)</title><rect x="83.1673%" y="677" width="2.5310%" height="15" fill="rgb(251,126,39)" fg:x="8182" fg:w="249"/><text x="83.4173%" y="687.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (245 samples, 2.49%)</title><rect x="83.2080%" y="661" width="2.4903%" height="15" fill="rgb(214,216,36)" fg:x="8186" fg:w="245"/><text x="83.4580%" y="671.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (24 samples, 0.24%)</title><rect x="85.4544%" y="645" width="0.2440%" height="15" fill="rgb(220,221,8)" fg:x="8407" fg:w="24"/><text x="85.7044%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (8 samples, 0.08%)</title><rect x="85.6170%" y="629" width="0.0813%" height="15" fill="rgb(240,216,3)" fg:x="8423" fg:w="8"/><text x="85.8670%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (8 samples, 0.08%)</title><rect x="85.6170%" y="613" width="0.0813%" height="15" fill="rgb(232,218,17)" fg:x="8423" fg:w="8"/><text x="85.8670%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.01%)</title><rect x="85.6881%" y="597" width="0.0102%" height="15" fill="rgb(229,163,45)" fg:x="8430" fg:w="1"/><text x="85.9381%" y="607.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::SubAssign&gt;::sub_assign (1 samples, 0.01%)</title><rect x="85.7186%" y="693" width="0.0102%" height="15" fill="rgb(231,110,42)" fg:x="8433" fg:w="1"/><text x="85.9686%" y="703.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::Sub&gt;::sub (1 samples, 0.01%)</title><rect x="85.7186%" y="677" width="0.0102%" height="15" fill="rgb(208,170,48)" fg:x="8433" fg:w="1"/><text x="85.9686%" y="687.50"></text></g><g><title>&lt;&amp;rust_decimal::decimal::Decimal as core::ops::arith::Sub&lt;&amp;rust_decimal::decimal::Decimal&gt;&gt;::sub (1 samples, 0.01%)</title><rect x="85.7186%" y="661" width="0.0102%" height="15" fill="rgb(239,116,25)" fg:x="8433" fg:w="1"/><text x="85.9686%" y="671.50"></text></g><g><title>rust_decimal::ops::add::sub_impl (1 samples, 0.01%)</title><rect x="85.7186%" y="645" width="0.0102%" height="15" fill="rgb(219,200,50)" fg:x="8433" fg:w="1"/><text x="85.9686%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="85.7186%" y="629" width="0.0102%" height="15" fill="rgb(245,200,0)" fg:x="8433" fg:w="1"/><text x="85.9686%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="85.8813%" y="581" width="0.0102%" height="15" fill="rgb(245,119,33)" fg:x="8449" fg:w="1"/><text x="86.1313%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="85.8813%" y="565" width="0.0102%" height="15" fill="rgb(231,125,12)" fg:x="8449" fg:w="1"/><text x="86.1313%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="85.8813%" y="549" width="0.0102%" height="15" fill="rgb(216,96,41)" fg:x="8449" fg:w="1"/><text x="86.1313%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="85.8914%" y="581" width="0.0203%" height="15" fill="rgb(248,43,45)" fg:x="8450" fg:w="2"/><text x="86.1414%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.10%)</title><rect x="85.8711%" y="613" width="0.1016%" height="15" fill="rgb(217,222,7)" fg:x="8448" fg:w="10"/><text x="86.1211%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.10%)</title><rect x="85.8711%" y="597" width="0.1016%" height="15" fill="rgb(233,28,6)" fg:x="8448" fg:w="10"/><text x="86.1211%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (6 samples, 0.06%)</title><rect x="85.9118%" y="581" width="0.0610%" height="15" fill="rgb(231,218,15)" fg:x="8452" fg:w="6"/><text x="86.1618%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (18 samples, 0.18%)</title><rect x="85.9728%" y="613" width="0.1830%" height="15" fill="rgb(226,171,48)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="623.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.18%)</title><rect x="85.9728%" y="597" width="0.1830%" height="15" fill="rgb(235,201,9)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (18 samples, 0.18%)</title><rect x="85.9728%" y="581" width="0.1830%" height="15" fill="rgb(217,80,15)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (18 samples, 0.18%)</title><rect x="85.9728%" y="565" width="0.1830%" height="15" fill="rgb(219,152,8)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.18%)</title><rect x="85.9728%" y="549" width="0.1830%" height="15" fill="rgb(243,107,38)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.18%)</title><rect x="85.9728%" y="533" width="0.1830%" height="15" fill="rgb(231,17,5)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="543.50"></text></g><g><title>__GI___libc_free (18 samples, 0.18%)</title><rect x="85.9728%" y="517" width="0.1830%" height="15" fill="rgb(209,25,54)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="527.50"></text></g><g><title>__GI_munmap (18 samples, 0.18%)</title><rect x="85.9728%" y="501" width="0.1830%" height="15" fill="rgb(219,0,2)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="511.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="485" width="0.1830%" height="15" fill="rgb(246,9,5)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="495.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="469" width="0.1830%" height="15" fill="rgb(226,159,4)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="479.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="453" width="0.1830%" height="15" fill="rgb(219,175,34)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="463.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="437" width="0.1830%" height="15" fill="rgb(236,10,46)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="447.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="421" width="0.1830%" height="15" fill="rgb(240,211,16)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="431.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="405" width="0.1830%" height="15" fill="rgb(205,3,43)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="415.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="389" width="0.1830%" height="15" fill="rgb(245,7,22)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="399.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="373" width="0.1830%" height="15" fill="rgb(239,132,32)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="383.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="357" width="0.1830%" height="15" fill="rgb(228,202,34)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="367.50"></text></g><g><title>[unknown] (18 samples, 0.18%)</title><rect x="85.9728%" y="341" width="0.1830%" height="15" fill="rgb(254,200,22)" fg:x="8458" fg:w="18"/><text x="86.2228%" y="351.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="86.0439%" y="325" width="0.1118%" height="15" fill="rgb(219,10,39)" fg:x="8465" fg:w="11"/><text x="86.2939%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="86.0541%" y="309" width="0.1016%" height="15" fill="rgb(226,210,39)" fg:x="8466" fg:w="10"/><text x="86.3041%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="86.0541%" y="293" width="0.1016%" height="15" fill="rgb(208,219,16)" fg:x="8466" fg:w="10"/><text x="86.3041%" y="303.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="86.0744%" y="277" width="0.0813%" height="15" fill="rgb(216,158,51)" fg:x="8468" fg:w="8"/><text x="86.3244%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="86.1049%" y="261" width="0.0508%" height="15" fill="rgb(233,14,44)" fg:x="8471" fg:w="5"/><text x="86.3549%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="86.1151%" y="245" width="0.0407%" height="15" fill="rgb(237,97,39)" fg:x="8472" fg:w="4"/><text x="86.3651%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="86.1151%" y="229" width="0.0407%" height="15" fill="rgb(218,198,43)" fg:x="8472" fg:w="4"/><text x="86.3651%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.14%)</title><rect x="86.4607%" y="533" width="0.1423%" height="15" fill="rgb(231,104,20)" fg:x="8506" fg:w="14"/><text x="86.7107%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.09%)</title><rect x="86.5115%" y="517" width="0.0915%" height="15" fill="rgb(254,36,13)" fg:x="8511" fg:w="9"/><text x="86.7615%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23 samples, 0.23%)</title><rect x="86.6640%" y="517" width="0.2338%" height="15" fill="rgb(248,14,50)" fg:x="8526" fg:w="23"/><text x="86.9140%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (57 samples, 0.58%)</title><rect x="86.3692%" y="581" width="0.5794%" height="15" fill="rgb(217,107,29)" fg:x="8497" fg:w="57"/><text x="86.6192%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (57 samples, 0.58%)</title><rect x="86.3692%" y="565" width="0.5794%" height="15" fill="rgb(251,169,33)" fg:x="8497" fg:w="57"/><text x="86.6192%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (57 samples, 0.58%)</title><rect x="86.3692%" y="549" width="0.5794%" height="15" fill="rgb(217,108,32)" fg:x="8497" fg:w="57"/><text x="86.6192%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (34 samples, 0.35%)</title><rect x="86.6030%" y="533" width="0.3456%" height="15" fill="rgb(219,66,42)" fg:x="8520" fg:w="34"/><text x="86.8530%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.05%)</title><rect x="86.8977%" y="517" width="0.0508%" height="15" fill="rgb(206,180,7)" fg:x="8549" fg:w="5"/><text x="87.1477%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (11 samples, 0.11%)</title><rect x="86.9486%" y="581" width="0.1118%" height="15" fill="rgb(208,226,31)" fg:x="8554" fg:w="11"/><text x="87.1986%" y="591.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (7 samples, 0.07%)</title><rect x="86.9892%" y="565" width="0.0712%" height="15" fill="rgb(218,26,49)" fg:x="8558" fg:w="7"/><text x="87.2392%" y="575.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.04%)</title><rect x="87.0197%" y="549" width="0.0407%" height="15" fill="rgb(233,197,48)" fg:x="8561" fg:w="4"/><text x="87.2697%" y="559.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.04%)</title><rect x="87.0197%" y="533" width="0.0407%" height="15" fill="rgb(252,181,51)" fg:x="8561" fg:w="4"/><text x="87.2697%" y="543.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (114 samples, 1.16%)</title><rect x="86.1557%" y="613" width="1.1588%" height="15" fill="rgb(253,90,19)" fg:x="8476" fg:w="114"/><text x="86.4057%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (114 samples, 1.16%)</title><rect x="86.1557%" y="597" width="1.1588%" height="15" fill="rgb(215,171,30)" fg:x="8476" fg:w="114"/><text x="86.4057%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (25 samples, 0.25%)</title><rect x="87.0604%" y="581" width="0.2541%" height="15" fill="rgb(214,222,9)" fg:x="8565" fg:w="25"/><text x="87.3104%" y="591.50"></text></g><g><title>core::hash::Hasher::write_u32 (25 samples, 0.25%)</title><rect x="87.0604%" y="565" width="0.2541%" height="15" fill="rgb(223,3,22)" fg:x="8565" fg:w="25"/><text x="87.3104%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.22%)</title><rect x="87.0909%" y="549" width="0.2236%" height="15" fill="rgb(225,196,46)" fg:x="8568" fg:w="22"/><text x="87.3409%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (22 samples, 0.22%)</title><rect x="87.0909%" y="533" width="0.2236%" height="15" fill="rgb(209,110,37)" fg:x="8568" fg:w="22"/><text x="87.3409%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.22%)</title><rect x="87.0909%" y="517" width="0.2236%" height="15" fill="rgb(249,89,12)" fg:x="8568" fg:w="22"/><text x="87.3409%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (14 samples, 0.14%)</title><rect x="87.1722%" y="501" width="0.1423%" height="15" fill="rgb(226,27,33)" fg:x="8576" fg:w="14"/><text x="87.4222%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="87.2738%" y="485" width="0.0407%" height="15" fill="rgb(213,82,22)" fg:x="8586" fg:w="4"/><text x="87.5238%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="87.3145%" y="613" width="0.0102%" height="15" fill="rgb(248,140,0)" fg:x="8590" fg:w="1"/><text x="87.5645%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.01%)</title><rect x="87.3145%" y="597" width="0.0102%" height="15" fill="rgb(228,106,3)" fg:x="8590" fg:w="1"/><text x="87.5645%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="87.3145%" y="581" width="0.0102%" height="15" fill="rgb(209,23,37)" fg:x="8590" fg:w="1"/><text x="87.5645%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="87.3145%" y="565" width="0.0102%" height="15" fill="rgb(241,93,50)" fg:x="8590" fg:w="1"/><text x="87.5645%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (190 samples, 1.93%)</title><rect x="87.3247%" y="597" width="1.9313%" height="15" fill="rgb(253,46,43)" fg:x="8591" fg:w="190"/><text x="87.5747%" y="607.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (190 samples, 1.93%)</title><rect x="87.3247%" y="581" width="1.9313%" height="15" fill="rgb(226,206,43)" fg:x="8591" fg:w="190"/><text x="87.5747%" y="591.50">c..</text></g><g><title>[unknown] (160 samples, 1.63%)</title><rect x="87.6296%" y="565" width="1.6263%" height="15" fill="rgb(217,54,7)" fg:x="8621" fg:w="160"/><text x="87.8796%" y="575.50"></text></g><g><title>[unknown] (144 samples, 1.46%)</title><rect x="87.7922%" y="549" width="1.4637%" height="15" fill="rgb(223,5,52)" fg:x="8637" fg:w="144"/><text x="88.0422%" y="559.50"></text></g><g><title>[unknown] (144 samples, 1.46%)</title><rect x="87.7922%" y="533" width="1.4637%" height="15" fill="rgb(206,52,46)" fg:x="8637" fg:w="144"/><text x="88.0422%" y="543.50"></text></g><g><title>[unknown] (141 samples, 1.43%)</title><rect x="87.8227%" y="517" width="1.4332%" height="15" fill="rgb(253,136,11)" fg:x="8640" fg:w="141"/><text x="88.0727%" y="527.50"></text></g><g><title>[unknown] (94 samples, 0.96%)</title><rect x="88.3005%" y="501" width="0.9555%" height="15" fill="rgb(208,106,33)" fg:x="8687" fg:w="94"/><text x="88.5505%" y="511.50"></text></g><g><title>[unknown] (90 samples, 0.91%)</title><rect x="88.3411%" y="485" width="0.9148%" height="15" fill="rgb(206,54,4)" fg:x="8691" fg:w="90"/><text x="88.5911%" y="495.50"></text></g><g><title>[unknown] (86 samples, 0.87%)</title><rect x="88.3818%" y="469" width="0.8742%" height="15" fill="rgb(213,3,15)" fg:x="8695" fg:w="86"/><text x="88.6318%" y="479.50"></text></g><g><title>[unknown] (80 samples, 0.81%)</title><rect x="88.4428%" y="453" width="0.8132%" height="15" fill="rgb(252,211,39)" fg:x="8701" fg:w="80"/><text x="88.6928%" y="463.50"></text></g><g><title>[unknown] (67 samples, 0.68%)</title><rect x="88.5749%" y="437" width="0.6810%" height="15" fill="rgb(223,6,36)" fg:x="8714" fg:w="67"/><text x="88.8249%" y="447.50"></text></g><g><title>[unknown] (48 samples, 0.49%)</title><rect x="88.7680%" y="421" width="0.4879%" height="15" fill="rgb(252,169,45)" fg:x="8733" fg:w="48"/><text x="89.0180%" y="431.50"></text></g><g><title>[unknown] (38 samples, 0.39%)</title><rect x="88.8697%" y="405" width="0.3863%" height="15" fill="rgb(212,48,26)" fg:x="8743" fg:w="38"/><text x="89.1197%" y="415.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="89.1136%" y="389" width="0.1423%" height="15" fill="rgb(251,102,48)" fg:x="8767" fg:w="14"/><text x="89.3636%" y="399.50"></text></g><g><title>[unknown] (9 samples, 0.09%)</title><rect x="89.1645%" y="373" width="0.0915%" height="15" fill="rgb(243,208,16)" fg:x="8772" fg:w="9"/><text x="89.4145%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (191 samples, 1.94%)</title><rect x="87.3247%" y="613" width="1.9415%" height="15" fill="rgb(219,96,24)" fg:x="8591" fg:w="191"/><text x="87.5747%" y="623.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.01%)</title><rect x="89.2559%" y="597" width="0.0102%" height="15" fill="rgb(219,33,29)" fg:x="8781" fg:w="1"/><text x="89.5059%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="89.2559%" y="581" width="0.0102%" height="15" fill="rgb(223,176,5)" fg:x="8781" fg:w="1"/><text x="89.5059%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="89.2559%" y="565" width="0.0102%" height="15" fill="rgb(228,140,14)" fg:x="8781" fg:w="1"/><text x="89.5059%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.06%)</title><rect x="89.3881%" y="581" width="0.0610%" height="15" fill="rgb(217,179,31)" fg:x="8794" fg:w="6"/><text x="89.6381%" y="591.50"></text></g><g><title>hashbrown::raw::is_full (15 samples, 0.15%)</title><rect x="89.4491%" y="581" width="0.1525%" height="15" fill="rgb(230,9,30)" fg:x="8800" fg:w="15"/><text x="89.6991%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="89.6015%" y="581" width="0.0102%" height="15" fill="rgb(230,136,20)" fg:x="8815" fg:w="1"/><text x="89.8515%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="89.6015%" y="565" width="0.0102%" height="15" fill="rgb(215,210,22)" fg:x="8815" fg:w="1"/><text x="89.8515%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="89.6015%" y="549" width="0.0102%" height="15" fill="rgb(218,43,5)" fg:x="8815" fg:w="1"/><text x="89.8515%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (43 samples, 0.44%)</title><rect x="89.2661%" y="597" width="0.4371%" height="15" fill="rgb(216,11,5)" fg:x="8782" fg:w="43"/><text x="89.5161%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (9 samples, 0.09%)</title><rect x="89.6117%" y="581" width="0.0915%" height="15" fill="rgb(209,82,29)" fg:x="8816" fg:w="9"/><text x="89.8617%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.09%)</title><rect x="89.6117%" y="565" width="0.0915%" height="15" fill="rgb(244,115,12)" fg:x="8816" fg:w="9"/><text x="89.8617%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (65 samples, 0.66%)</title><rect x="89.2661%" y="613" width="0.6607%" height="15" fill="rgb(222,82,18)" fg:x="8782" fg:w="65"/><text x="89.5161%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (22 samples, 0.22%)</title><rect x="89.7032%" y="597" width="0.2236%" height="15" fill="rgb(249,227,8)" fg:x="8825" fg:w="22"/><text x="89.9532%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (22 samples, 0.22%)</title><rect x="89.7032%" y="581" width="0.2236%" height="15" fill="rgb(253,141,45)" fg:x="8825" fg:w="22"/><text x="89.9532%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (413 samples, 4.20%)</title><rect x="85.8305%" y="677" width="4.1980%" height="15" fill="rgb(234,184,4)" fg:x="8444" fg:w="413"/><text x="86.0805%" y="687.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (413 samples, 4.20%)</title><rect x="85.8305%" y="661" width="4.1980%" height="15" fill="rgb(218,194,23)" fg:x="8444" fg:w="413"/><text x="86.0805%" y="671.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (411 samples, 4.18%)</title><rect x="85.8508%" y="645" width="4.1777%" height="15" fill="rgb(235,66,41)" fg:x="8446" fg:w="411"/><text x="86.1008%" y="655.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (411 samples, 4.18%)</title><rect x="85.8508%" y="629" width="4.1777%" height="15" fill="rgb(245,217,1)" fg:x="8446" fg:w="411"/><text x="86.1008%" y="639.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (10 samples, 0.10%)</title><rect x="89.9268%" y="613" width="0.1016%" height="15" fill="rgb(229,91,1)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (10 samples, 0.10%)</title><rect x="89.9268%" y="597" width="0.1016%" height="15" fill="rgb(207,101,30)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (10 samples, 0.10%)</title><rect x="89.9268%" y="581" width="0.1016%" height="15" fill="rgb(223,82,49)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="591.50"></text></g><g><title>core::intrinsics::write_bytes (10 samples, 0.10%)</title><rect x="89.9268%" y="565" width="0.1016%" height="15" fill="rgb(218,167,17)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="575.50"></text></g><g><title>__memset_avx2_erms (10 samples, 0.10%)</title><rect x="89.9268%" y="549" width="0.1016%" height="15" fill="rgb(208,103,14)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="559.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="89.9268%" y="533" width="0.1016%" height="15" fill="rgb(238,20,8)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="543.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="89.9268%" y="517" width="0.1016%" height="15" fill="rgb(218,80,54)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="527.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="89.9268%" y="501" width="0.1016%" height="15" fill="rgb(240,144,17)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="511.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="89.9268%" y="485" width="0.1016%" height="15" fill="rgb(245,27,50)" fg:x="8847" fg:w="10"/><text x="90.1768%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="89.9573%" y="469" width="0.0712%" height="15" fill="rgb(251,51,7)" fg:x="8850" fg:w="7"/><text x="90.2073%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="89.9573%" y="453" width="0.0712%" height="15" fill="rgb(245,217,29)" fg:x="8850" fg:w="7"/><text x="90.2073%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="89.9675%" y="437" width="0.0610%" height="15" fill="rgb(221,176,29)" fg:x="8851" fg:w="6"/><text x="90.2175%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="89.9675%" y="421" width="0.0610%" height="15" fill="rgb(212,180,24)" fg:x="8851" fg:w="6"/><text x="90.2175%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="89.9776%" y="405" width="0.0508%" height="15" fill="rgb(254,24,2)" fg:x="8852" fg:w="5"/><text x="90.2276%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="89.9878%" y="389" width="0.0407%" height="15" fill="rgb(230,100,2)" fg:x="8853" fg:w="4"/><text x="90.2378%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="89.9980%" y="373" width="0.0305%" height="15" fill="rgb(219,142,25)" fg:x="8854" fg:w="3"/><text x="90.2480%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.04%)</title><rect x="90.1708%" y="597" width="0.0407%" height="15" fill="rgb(240,73,43)" fg:x="8871" fg:w="4"/><text x="90.4208%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.09%)</title><rect x="90.1403%" y="613" width="0.0915%" height="15" fill="rgb(214,114,15)" fg:x="8868" fg:w="9"/><text x="90.3903%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="90.2114%" y="597" width="0.0203%" height="15" fill="rgb(207,130,4)" fg:x="8875" fg:w="2"/><text x="90.4614%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 0.10%)</title><rect x="90.2826%" y="597" width="0.1016%" height="15" fill="rgb(221,25,40)" fg:x="8882" fg:w="10"/><text x="90.5326%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (42 samples, 0.43%)</title><rect x="90.0285%" y="661" width="0.4269%" height="15" fill="rgb(241,184,7)" fg:x="8857" fg:w="42"/><text x="90.2785%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (42 samples, 0.43%)</title><rect x="90.0285%" y="645" width="0.4269%" height="15" fill="rgb(235,159,4)" fg:x="8857" fg:w="42"/><text x="90.2785%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (42 samples, 0.43%)</title><rect x="90.0285%" y="629" width="0.4269%" height="15" fill="rgb(214,87,48)" fg:x="8857" fg:w="42"/><text x="90.2785%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22 samples, 0.22%)</title><rect x="90.2318%" y="613" width="0.2236%" height="15" fill="rgb(246,198,24)" fg:x="8877" fg:w="22"/><text x="90.4818%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.07%)</title><rect x="90.3842%" y="597" width="0.0712%" height="15" fill="rgb(209,66,40)" fg:x="8892" fg:w="7"/><text x="90.6342%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 0.08%)</title><rect x="90.4554%" y="661" width="0.0813%" height="15" fill="rgb(233,147,39)" fg:x="8899" fg:w="8"/><text x="90.7054%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.04%)</title><rect x="90.4960%" y="645" width="0.0407%" height="15" fill="rgb(231,145,52)" fg:x="8903" fg:w="4"/><text x="90.7460%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.04%)</title><rect x="90.4960%" y="629" width="0.0407%" height="15" fill="rgb(206,20,26)" fg:x="8903" fg:w="4"/><text x="90.7460%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.04%)</title><rect x="90.4960%" y="613" width="0.0407%" height="15" fill="rgb(238,220,4)" fg:x="8903" fg:w="4"/><text x="90.7460%" y="623.50"></text></g><g><title>hashbrown::map::make_insert_hash (64 samples, 0.65%)</title><rect x="90.0285%" y="677" width="0.6505%" height="15" fill="rgb(252,195,42)" fg:x="8857" fg:w="64"/><text x="90.2785%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (14 samples, 0.14%)</title><rect x="90.5367%" y="661" width="0.1423%" height="15" fill="rgb(209,10,6)" fg:x="8907" fg:w="14"/><text x="90.7867%" y="671.50"></text></g><g><title>core::hash::Hasher::write_u32 (14 samples, 0.14%)</title><rect x="90.5367%" y="645" width="0.1423%" height="15" fill="rgb(229,3,52)" fg:x="8907" fg:w="14"/><text x="90.7867%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.13%)</title><rect x="90.5469%" y="629" width="0.1321%" height="15" fill="rgb(253,49,37)" fg:x="8908" fg:w="13"/><text x="90.7969%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.13%)</title><rect x="90.5469%" y="613" width="0.1321%" height="15" fill="rgb(240,103,49)" fg:x="8908" fg:w="13"/><text x="90.7969%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.13%)</title><rect x="90.5469%" y="597" width="0.1321%" height="15" fill="rgb(250,182,30)" fg:x="8908" fg:w="13"/><text x="90.7969%" y="607.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.07%)</title><rect x="90.6078%" y="581" width="0.0712%" height="15" fill="rgb(248,8,30)" fg:x="8914" fg:w="7"/><text x="90.8578%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="90.6688%" y="565" width="0.0102%" height="15" fill="rgb(237,120,30)" fg:x="8920" fg:w="1"/><text x="90.9188%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.08%)</title><rect x="91.5532%" y="629" width="0.0813%" height="15" fill="rgb(221,146,34)" fg:x="9007" fg:w="8"/><text x="91.8032%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.07%)</title><rect x="91.5633%" y="613" width="0.0712%" height="15" fill="rgb(242,55,13)" fg:x="9008" fg:w="7"/><text x="91.8133%" y="623.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (3 samples, 0.03%)</title><rect x="91.6345%" y="629" width="0.0305%" height="15" fill="rgb(242,112,31)" fg:x="9015" fg:w="3"/><text x="91.8845%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.24%)</title><rect x="91.5430%" y="661" width="0.2440%" height="15" fill="rgb(249,192,27)" fg:x="9006" fg:w="24"/><text x="91.7930%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.24%)</title><rect x="91.5430%" y="645" width="0.2440%" height="15" fill="rgb(208,204,44)" fg:x="9006" fg:w="24"/><text x="91.7930%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (12 samples, 0.12%)</title><rect x="91.6650%" y="629" width="0.1220%" height="15" fill="rgb(208,93,54)" fg:x="9018" fg:w="12"/><text x="91.9150%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.12%)</title><rect x="91.6650%" y="613" width="0.1220%" height="15" fill="rgb(242,1,31)" fg:x="9018" fg:w="12"/><text x="91.9150%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.12%)</title><rect x="91.6650%" y="597" width="0.1220%" height="15" fill="rgb(241,83,25)" fg:x="9018" fg:w="12"/><text x="91.9150%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.01%)</title><rect x="91.8073%" y="613" width="0.0102%" height="15" fill="rgb(205,169,50)" fg:x="9032" fg:w="1"/><text x="92.0573%" y="623.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="91.8174%" y="613" width="0.0203%" height="15" fill="rgb(239,186,37)" fg:x="9033" fg:w="2"/><text x="92.0674%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (561 samples, 5.70%)</title><rect x="91.8378%" y="613" width="5.7024%" height="15" fill="rgb(205,221,10)" fg:x="9035" fg:w="561"/><text x="92.0878%" y="623.50">hashbro..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (561 samples, 5.70%)</title><rect x="91.8378%" y="597" width="5.7024%" height="15" fill="rgb(218,196,15)" fg:x="9035" fg:w="561"/><text x="92.0878%" y="607.50">core::c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (561 samples, 5.70%)</title><rect x="91.8378%" y="581" width="5.7024%" height="15" fill="rgb(218,196,35)" fg:x="9035" fg:w="561"/><text x="92.0878%" y="591.50">core::i..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,165 samples, 11.84%)</title><rect x="85.7288%" y="693" width="11.8418%" height="15" fill="rgb(233,63,24)" fg:x="8434" fg:w="1165"/><text x="85.9788%" y="703.50">hashbrown::rustc_e..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (678 samples, 6.89%)</title><rect x="90.6790%" y="677" width="6.8916%" height="15" fill="rgb(225,8,4)" fg:x="8921" fg:w="678"/><text x="90.9290%" y="687.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (569 samples, 5.78%)</title><rect x="91.7869%" y="661" width="5.7837%" height="15" fill="rgb(234,105,35)" fg:x="9030" fg:w="569"/><text x="92.0369%" y="671.50">hashbro..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (569 samples, 5.78%)</title><rect x="91.7869%" y="645" width="5.7837%" height="15" fill="rgb(236,21,32)" fg:x="9030" fg:w="569"/><text x="92.0369%" y="655.50">hashbro..</text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (569 samples, 5.78%)</title><rect x="91.7869%" y="629" width="5.7837%" height="15" fill="rgb(228,109,6)" fg:x="9030" fg:w="569"/><text x="92.0369%" y="639.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.03%)</title><rect x="97.5402%" y="613" width="0.0305%" height="15" fill="rgb(229,215,31)" fg:x="9596" fg:w="3"/><text x="97.7902%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.03%)</title><rect x="97.5402%" y="597" width="0.0305%" height="15" fill="rgb(221,52,54)" fg:x="9596" fg:w="3"/><text x="97.7902%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.03%)</title><rect x="97.5402%" y="581" width="0.0305%" height="15" fill="rgb(252,129,43)" fg:x="9596" fg:w="3"/><text x="97.7902%" y="591.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.03%)</title><rect x="97.5402%" y="565" width="0.0305%" height="15" fill="rgb(248,183,27)" fg:x="9596" fg:w="3"/><text x="97.7902%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5503%" y="549" width="0.0203%" height="15" fill="rgb(250,0,22)" fg:x="9597" fg:w="2"/><text x="97.8003%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5503%" y="533" width="0.0203%" height="15" fill="rgb(213,166,10)" fg:x="9597" fg:w="2"/><text x="97.8003%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5503%" y="517" width="0.0203%" height="15" fill="rgb(207,163,36)" fg:x="9597" fg:w="2"/><text x="97.8003%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5503%" y="501" width="0.0203%" height="15" fill="rgb(208,122,22)" fg:x="9597" fg:w="2"/><text x="97.8003%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5503%" y="485" width="0.0203%" height="15" fill="rgb(207,104,49)" fg:x="9597" fg:w="2"/><text x="97.8003%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="97.5605%" y="469" width="0.0102%" height="15" fill="rgb(248,211,50)" fg:x="9598" fg:w="1"/><text x="97.8105%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="97.5605%" y="453" width="0.0102%" height="15" fill="rgb(217,13,45)" fg:x="9598" fg:w="1"/><text x="97.8105%" y="463.50"></text></g><g><title>resolution::account::Account::add_transaction (2,201 samples, 22.37%)</title><rect x="75.2795%" y="725" width="22.3724%" height="15" fill="rgb(211,216,49)" fg:x="7406" fg:w="2201"/><text x="75.5295%" y="735.50">resolution::account::Account::add_t..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,176 samples, 11.95%)</title><rect x="85.6983%" y="709" width="11.9536%" height="15" fill="rgb(221,58,53)" fg:x="8431" fg:w="1176"/><text x="85.9483%" y="719.50">std::collections::..</text></g><g><title>std::collections::hash::map::map_entry (8 samples, 0.08%)</title><rect x="97.5706%" y="693" width="0.0813%" height="15" fill="rgb(220,112,41)" fg:x="9599" fg:w="8"/><text x="97.8206%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.07%)</title><rect x="98.0484%" y="629" width="0.0712%" height="15" fill="rgb(236,38,28)" fg:x="9646" fg:w="7"/><text x="98.2984%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="98.0992%" y="613" width="0.0203%" height="15" fill="rgb(227,195,22)" fg:x="9651" fg:w="2"/><text x="98.3492%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.09%)</title><rect x="98.2212%" y="613" width="0.0915%" height="15" fill="rgb(214,55,33)" fg:x="9663" fg:w="9"/><text x="98.4712%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (39 samples, 0.40%)</title><rect x="97.9772%" y="677" width="0.3964%" height="15" fill="rgb(248,80,13)" fg:x="9639" fg:w="39"/><text x="98.2272%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (39 samples, 0.40%)</title><rect x="97.9772%" y="661" width="0.3964%" height="15" fill="rgb(238,52,6)" fg:x="9639" fg:w="39"/><text x="98.2272%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (39 samples, 0.40%)</title><rect x="97.9772%" y="645" width="0.3964%" height="15" fill="rgb(224,198,47)" fg:x="9639" fg:w="39"/><text x="98.2272%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (25 samples, 0.25%)</title><rect x="98.1195%" y="629" width="0.2541%" height="15" fill="rgb(233,171,20)" fg:x="9653" fg:w="25"/><text x="98.3695%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.06%)</title><rect x="98.3127%" y="613" width="0.0610%" height="15" fill="rgb(241,30,25)" fg:x="9672" fg:w="6"/><text x="98.5627%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (6 samples, 0.06%)</title><rect x="98.3737%" y="677" width="0.0610%" height="15" fill="rgb(207,171,38)" fg:x="9678" fg:w="6"/><text x="98.6237%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.05%)</title><rect x="98.3838%" y="661" width="0.0508%" height="15" fill="rgb(234,70,1)" fg:x="9679" fg:w="5"/><text x="98.6338%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="98.4143%" y="645" width="0.0203%" height="15" fill="rgb(232,178,18)" fg:x="9682" fg:w="2"/><text x="98.6643%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.02%)</title><rect x="98.4143%" y="629" width="0.0203%" height="15" fill="rgb(241,78,40)" fg:x="9682" fg:w="2"/><text x="98.6643%" y="639.50"></text></g><g><title>hashbrown::map::make_insert_hash (60 samples, 0.61%)</title><rect x="97.9772%" y="693" width="0.6099%" height="15" fill="rgb(222,35,25)" fg:x="9639" fg:w="60"/><text x="98.2272%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (15 samples, 0.15%)</title><rect x="98.4346%" y="677" width="0.1525%" height="15" fill="rgb(207,92,16)" fg:x="9684" fg:w="15"/><text x="98.6846%" y="687.50"></text></g><g><title>core::hash::Hasher::write_u16 (15 samples, 0.15%)</title><rect x="98.4346%" y="661" width="0.1525%" height="15" fill="rgb(216,59,51)" fg:x="9684" fg:w="15"/><text x="98.6846%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.15%)</title><rect x="98.4346%" y="645" width="0.1525%" height="15" fill="rgb(213,80,28)" fg:x="9684" fg:w="15"/><text x="98.6846%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.15%)</title><rect x="98.4346%" y="629" width="0.1525%" height="15" fill="rgb(220,93,7)" fg:x="9684" fg:w="15"/><text x="98.6846%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.15%)</title><rect x="98.4346%" y="613" width="0.1525%" height="15" fill="rgb(225,24,44)" fg:x="9684" fg:w="15"/><text x="98.6846%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.10%)</title><rect x="98.4855%" y="597" width="0.1016%" height="15" fill="rgb(243,74,40)" fg:x="9689" fg:w="10"/><text x="98.7355%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="98.6786%" y="661" width="0.0915%" height="15" fill="rgb(228,39,7)" fg:x="9708" fg:w="9"/><text x="98.9286%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="98.6786%" y="645" width="0.0915%" height="15" fill="rgb(227,79,8)" fg:x="9708" fg:w="9"/><text x="98.9286%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (9 samples, 0.09%)</title><rect x="98.6786%" y="629" width="0.0915%" height="15" fill="rgb(236,58,11)" fg:x="9708" fg:w="9"/><text x="98.9286%" y="639.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.01%)</title><rect x="98.7701%" y="613" width="0.0102%" height="15" fill="rgb(249,63,35)" fg:x="9717" fg:w="1"/><text x="99.0201%" y="623.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (1 samples, 0.01%)</title><rect x="98.7701%" y="597" width="0.0102%" height="15" fill="rgb(252,114,16)" fg:x="9717" fg:w="1"/><text x="99.0201%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.16%)</title><rect x="98.6786%" y="677" width="0.1626%" height="15" fill="rgb(254,151,24)" fg:x="9708" fg:w="16"/><text x="98.9286%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (7 samples, 0.07%)</title><rect x="98.7701%" y="661" width="0.0712%" height="15" fill="rgb(253,54,39)" fg:x="9717" fg:w="7"/><text x="99.0201%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7 samples, 0.07%)</title><rect x="98.7701%" y="645" width="0.0712%" height="15" fill="rgb(243,25,45)" fg:x="9717" fg:w="7"/><text x="99.0201%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.07%)</title><rect x="98.7701%" y="629" width="0.0712%" height="15" fill="rgb(234,134,9)" fg:x="9717" fg:w="7"/><text x="99.0201%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.06%)</title><rect x="98.7802%" y="613" width="0.0610%" height="15" fill="rgb(227,166,31)" fg:x="9718" fg:w="6"/><text x="99.0302%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.02%)</title><rect x="98.8616%" y="629" width="0.0203%" height="15" fill="rgb(245,143,41)" fg:x="9726" fg:w="2"/><text x="99.1116%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.09%)</title><rect x="98.8819%" y="629" width="0.0915%" height="15" fill="rgb(238,181,32)" fg:x="9728" fg:w="9"/><text x="99.1319%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.09%)</title><rect x="98.8819%" y="613" width="0.0915%" height="15" fill="rgb(224,113,18)" fg:x="9728" fg:w="9"/><text x="99.1319%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.09%)</title><rect x="98.8819%" y="597" width="0.0915%" height="15" fill="rgb(240,229,28)" fg:x="9728" fg:w="9"/><text x="99.1319%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (14 samples, 0.14%)</title><rect x="98.8412%" y="677" width="0.1423%" height="15" fill="rgb(250,185,3)" fg:x="9724" fg:w="14"/><text x="99.0912%" y="687.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (14 samples, 0.14%)</title><rect x="98.8412%" y="661" width="0.1423%" height="15" fill="rgb(212,59,25)" fg:x="9724" fg:w="14"/><text x="99.0912%" y="671.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (14 samples, 0.14%)</title><rect x="98.8412%" y="645" width="0.1423%" height="15" fill="rgb(221,87,20)" fg:x="9724" fg:w="14"/><text x="99.0912%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="98.9734%" y="629" width="0.0102%" height="15" fill="rgb(213,74,28)" fg:x="9737" fg:w="1"/><text x="99.2234%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.01%)</title><rect x="98.9734%" y="613" width="0.0102%" height="15" fill="rgb(224,132,34)" fg:x="9737" fg:w="1"/><text x="99.2234%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.01%)</title><rect x="98.9734%" y="597" width="0.0102%" height="15" fill="rgb(222,101,24)" fg:x="9737" fg:w="1"/><text x="99.2234%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.01%)</title><rect x="98.9734%" y="581" width="0.0102%" height="15" fill="rgb(254,142,4)" fg:x="9737" fg:w="1"/><text x="99.2234%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (128 samples, 1.30%)</title><rect x="97.8451%" y="709" width="1.3011%" height="15" fill="rgb(230,229,49)" fg:x="9626" fg:w="128"/><text x="98.0951%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (55 samples, 0.56%)</title><rect x="98.5871%" y="693" width="0.5591%" height="15" fill="rgb(238,70,47)" fg:x="9699" fg:w="55"/><text x="98.8371%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (16 samples, 0.16%)</title><rect x="98.9835%" y="677" width="0.1626%" height="15" fill="rgb(231,160,17)" fg:x="9738" fg:w="16"/><text x="99.2335%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (16 samples, 0.16%)</title><rect x="98.9835%" y="661" width="0.1626%" height="15" fill="rgb(218,68,53)" fg:x="9738" fg:w="16"/><text x="99.2335%" y="671.50"></text></g><g><title>_start (8,646 samples, 87.88%)</title><rect x="11.3031%" y="917" width="87.8837%" height="15" fill="rgb(236,111,10)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="927.50">_start</text></g><g><title>__libc_start_main (8,646 samples, 87.88%)</title><rect x="11.3031%" y="901" width="87.8837%" height="15" fill="rgb(224,34,41)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="911.50">__libc_start_main</text></g><g><title>main (8,646 samples, 87.88%)</title><rect x="11.3031%" y="885" width="87.8837%" height="15" fill="rgb(241,118,19)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="895.50">main</text></g><g><title>std::rt::lang_start_internal (8,646 samples, 87.88%)</title><rect x="11.3031%" y="869" width="87.8837%" height="15" fill="rgb(238,129,25)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="879.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,646 samples, 87.88%)</title><rect x="11.3031%" y="853" width="87.8837%" height="15" fill="rgb(238,22,31)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,646 samples, 87.88%)</title><rect x="11.3031%" y="837" width="87.8837%" height="15" fill="rgb(222,174,48)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,646 samples, 87.88%)</title><rect x="11.3031%" y="821" width="87.8837%" height="15" fill="rgb(206,152,40)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,646 samples, 87.88%)</title><rect x="11.3031%" y="805" width="87.8837%" height="15" fill="rgb(218,99,54)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8,646 samples, 87.88%)</title><rect x="11.3031%" y="789" width="87.8837%" height="15" fill="rgb(220,174,26)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,646 samples, 87.88%)</title><rect x="11.3031%" y="773" width="87.8837%" height="15" fill="rgb(245,116,9)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,646 samples, 87.88%)</title><rect x="11.3031%" y="757" width="87.8837%" height="15" fill="rgb(209,72,35)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="767.50">core::ops::function::FnOnce::call_once</text></g><g><title>resolution::main (8,646 samples, 87.88%)</title><rect x="11.3031%" y="741" width="87.8837%" height="15" fill="rgb(226,126,21)" fg:x="1112" fg:w="8646"/><text x="11.5531%" y="751.50">resolution::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (151 samples, 1.53%)</title><rect x="97.6520%" y="725" width="1.5349%" height="15" fill="rgb(227,192,1)" fg:x="9607" fg:w="151"/><text x="97.9020%" y="735.50"></text></g><g><title>std::collections::hash::map::map_entry (4 samples, 0.04%)</title><rect x="99.1462%" y="709" width="0.0407%" height="15" fill="rgb(237,180,29)" fg:x="9754" fg:w="4"/><text x="99.3962%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="99.1868%" y="917" width="0.0305%" height="15" fill="rgb(230,197,35)" fg:x="9758" fg:w="3"/><text x="99.4368%" y="927.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.03%)</title><rect x="99.2173%" y="917" width="0.0305%" height="15" fill="rgb(246,193,31)" fg:x="9761" fg:w="3"/><text x="99.4673%" y="927.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim_end (4 samples, 0.04%)</title><rect x="99.2986%" y="885" width="0.0407%" height="15" fill="rgb(241,36,4)" fg:x="9769" fg:w="4"/><text x="99.5486%" y="895.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim (8 samples, 0.08%)</title><rect x="99.2986%" y="901" width="0.0813%" height="15" fill="rgb(241,130,17)" fg:x="9769" fg:w="8"/><text x="99.5486%" y="911.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim_start (4 samples, 0.04%)</title><rect x="99.3393%" y="885" width="0.0407%" height="15" fill="rgb(206,137,32)" fg:x="9773" fg:w="4"/><text x="99.5893%" y="895.50"></text></g><g><title>alloc::alloc::box_free (5 samples, 0.05%)</title><rect x="99.3800%" y="869" width="0.0508%" height="15" fill="rgb(237,228,51)" fg:x="9777" fg:w="5"/><text x="99.6300%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.05%)</title><rect x="99.3800%" y="853" width="0.0508%" height="15" fill="rgb(243,6,42)" fg:x="9777" fg:w="5"/><text x="99.6300%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.05%)</title><rect x="99.3800%" y="837" width="0.0508%" height="15" fill="rgb(251,74,28)" fg:x="9777" fg:w="5"/><text x="99.6300%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="99.4308%" y="853" width="0.0305%" height="15" fill="rgb(218,20,49)" fg:x="9782" fg:w="3"/><text x="99.6808%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="99.4308%" y="837" width="0.0305%" height="15" fill="rgb(238,28,14)" fg:x="9782" fg:w="3"/><text x="99.6808%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="99.4308%" y="821" width="0.0305%" height="15" fill="rgb(229,40,46)" fg:x="9782" fg:w="3"/><text x="99.6808%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="99.4308%" y="805" width="0.0305%" height="15" fill="rgb(244,195,20)" fg:x="9782" fg:w="3"/><text x="99.6808%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="99.4308%" y="789" width="0.0305%" height="15" fill="rgb(253,56,35)" fg:x="9782" fg:w="3"/><text x="99.6808%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (10 samples, 0.10%)</title><rect x="99.3800%" y="901" width="0.1016%" height="15" fill="rgb(210,149,44)" fg:x="9777" fg:w="10"/><text x="99.6300%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (10 samples, 0.10%)</title><rect x="99.3800%" y="885" width="0.1016%" height="15" fill="rgb(240,135,12)" fg:x="9777" fg:w="10"/><text x="99.6300%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (5 samples, 0.05%)</title><rect x="99.4308%" y="869" width="0.0508%" height="15" fill="rgb(251,24,50)" fg:x="9782" fg:w="5"/><text x="99.6808%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (2 samples, 0.02%)</title><rect x="99.4613%" y="853" width="0.0203%" height="15" fill="rgb(243,200,47)" fg:x="9785" fg:w="2"/><text x="99.7113%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.02%)</title><rect x="99.4613%" y="837" width="0.0203%" height="15" fill="rgb(224,166,26)" fg:x="9785" fg:w="2"/><text x="99.7113%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.02%)</title><rect x="99.4613%" y="821" width="0.0203%" height="15" fill="rgb(233,0,47)" fg:x="9785" fg:w="2"/><text x="99.7113%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.4613%" y="805" width="0.0203%" height="15" fill="rgb(253,80,5)" fg:x="9785" fg:w="2"/><text x="99.7113%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="99.4613%" y="789" width="0.0203%" height="15" fill="rgb(214,133,25)" fg:x="9785" fg:w="2"/><text x="99.7113%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="99.4613%" y="773" width="0.0203%" height="15" fill="rgb(209,27,14)" fg:x="9785" fg:w="2"/><text x="99.7113%" y="783.50"></text></g><g><title>csv::byte_record::ByteRecord::push_field (9 samples, 0.09%)</title><rect x="99.4816%" y="901" width="0.0915%" height="15" fill="rgb(219,102,51)" fg:x="9787" fg:w="9"/><text x="99.7316%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.09%)</title><rect x="99.4816%" y="885" width="0.0915%" height="15" fill="rgb(237,18,16)" fg:x="9787" fg:w="9"/><text x="99.7316%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.09%)</title><rect x="99.4816%" y="869" width="0.0915%" height="15" fill="rgb(241,85,17)" fg:x="9787" fg:w="9"/><text x="99.7316%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.07%)</title><rect x="99.5731%" y="885" width="0.0712%" height="15" fill="rgb(236,90,42)" fg:x="9796" fg:w="7"/><text x="99.8231%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.07%)</title><rect x="99.5731%" y="869" width="0.0712%" height="15" fill="rgb(249,57,21)" fg:x="9796" fg:w="7"/><text x="99.8231%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.07%)</title><rect x="99.5731%" y="853" width="0.0712%" height="15" fill="rgb(243,12,36)" fg:x="9796" fg:w="7"/><text x="99.8231%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.07%)</title><rect x="99.5731%" y="837" width="0.0712%" height="15" fill="rgb(253,128,47)" fg:x="9796" fg:w="7"/><text x="99.8231%" y="847.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.07%)</title><rect x="99.5731%" y="821" width="0.0712%" height="15" fill="rgb(207,33,20)" fg:x="9796" fg:w="7"/><text x="99.8231%" y="831.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.02%)</title><rect x="99.6442%" y="885" width="0.0203%" height="15" fill="rgb(233,215,35)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="895.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.02%)</title><rect x="99.6442%" y="869" width="0.0203%" height="15" fill="rgb(249,188,52)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2 samples, 0.02%)</title><rect x="99.6442%" y="853" width="0.0203%" height="15" fill="rgb(225,12,32)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="99.6442%" y="837" width="0.0203%" height="15" fill="rgb(247,98,14)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2 samples, 0.02%)</title><rect x="99.6442%" y="821" width="0.0203%" height="15" fill="rgb(247,219,48)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="99.6442%" y="805" width="0.0203%" height="15" fill="rgb(253,60,48)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="815.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2 samples, 0.02%)</title><rect x="99.6442%" y="789" width="0.0203%" height="15" fill="rgb(245,15,52)" fg:x="9803" fg:w="2"/><text x="99.8942%" y="799.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (43 samples, 0.44%)</title><rect x="99.2478%" y="917" width="0.4371%" height="15" fill="rgb(220,133,28)" fg:x="9764" fg:w="43"/><text x="99.4978%" y="927.50"></text></g><g><title>csv::byte_record::ByteRecord::with_capacity (11 samples, 0.11%)</title><rect x="99.5731%" y="901" width="0.1118%" height="15" fill="rgb(217,180,4)" fg:x="9796" fg:w="11"/><text x="99.8231%" y="911.50"></text></g><g><title>csv::byte_record::Bounds::with_capacity (2 samples, 0.02%)</title><rect x="99.6646%" y="885" width="0.0203%" height="15" fill="rgb(251,24,1)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="895.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.02%)</title><rect x="99.6646%" y="869" width="0.0203%" height="15" fill="rgb(212,185,49)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.02%)</title><rect x="99.6646%" y="853" width="0.0203%" height="15" fill="rgb(215,175,22)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2 samples, 0.02%)</title><rect x="99.6646%" y="837" width="0.0203%" height="15" fill="rgb(250,205,14)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="99.6646%" y="821" width="0.0203%" height="15" fill="rgb(225,211,22)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2 samples, 0.02%)</title><rect x="99.6646%" y="805" width="0.0203%" height="15" fill="rgb(251,179,42)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="99.6646%" y="789" width="0.0203%" height="15" fill="rgb(208,216,51)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="799.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2 samples, 0.02%)</title><rect x="99.6646%" y="773" width="0.0203%" height="15" fill="rgb(235,36,11)" fg:x="9805" fg:w="2"/><text x="99.9146%" y="783.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (6 samples, 0.06%)</title><rect x="99.6849%" y="917" width="0.0610%" height="15" fill="rgb(213,189,28)" fg:x="9807" fg:w="6"/><text x="99.9349%" y="927.50"></text></g><g><title>csv::deserializer::deserialize_string_record (3 samples, 0.03%)</title><rect x="99.7459%" y="917" width="0.0305%" height="15" fill="rgb(227,203,42)" fg:x="9813" fg:w="3"/><text x="99.9959%" y="927.50"></text></g><g><title>csv::string_record::StringRecord::trim (2 samples, 0.02%)</title><rect x="99.7764%" y="917" width="0.0203%" height="15" fill="rgb(244,72,36)" fg:x="9816" fg:w="2"/><text x="100.0264%" y="927.50"></text></g><g><title>csv_core::reader::Reader::line (5 samples, 0.05%)</title><rect x="99.7967%" y="917" width="0.0508%" height="15" fill="rgb(213,53,17)" fg:x="9818" fg:w="5"/><text x="100.0467%" y="927.50"></text></g><g><title>csv_core::reader::Reader::read_record (6 samples, 0.06%)</title><rect x="99.8475%" y="917" width="0.0610%" height="15" fill="rgb(207,167,3)" fg:x="9823" fg:w="6"/><text x="100.0975%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.04%)</title><rect x="99.9085%" y="917" width="0.0407%" height="15" fill="rgb(216,98,30)" fg:x="9829" fg:w="4"/><text x="100.1585%" y="927.50"></text></g><g><title>all (9,838 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(236,123,15)" fg:x="0" fg:w="9838"/><text x="0.2500%" y="959.50"></text></g><g><title>resolution (9,833 samples, 99.95%)</title><rect x="0.0508%" y="933" width="99.9492%" height="15" fill="rgb(248,81,50)" fg:x="5" fg:w="9833"/><text x="0.3008%" y="943.50">resolution</text></g><g><title>rust_decimal::str::parse_str_radix_10 (5 samples, 0.05%)</title><rect x="99.9492%" y="917" width="0.0508%" height="15" fill="rgb(214,120,4)" fg:x="9833" fg:w="5"/><text x="100.1992%" y="927.50"></text></g></svg></svg>